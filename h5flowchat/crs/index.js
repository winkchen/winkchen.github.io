webpackJsonp([1],{108:function(n,t,e){n.exports=e(109)},109:function(module,__webpack_exports__,__webpack_require__){"use strict";eval("Object.defineProperty(__webpack_exports__, \"__esModule\", { value: true });\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_element_ui_lib_theme_chalk_index_css__ = __webpack_require__(62);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_element_ui_lib_theme_chalk_index_css___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_element_ui_lib_theme_chalk_index_css__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_element_ui_lib__ = __webpack_require__(65);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_element_ui_lib___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_element_ui_lib__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__crsPlugin_js__ = __webpack_require__(117);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_vue__ = __webpack_require__(1);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_vue___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_3_vue__);\n\n\n\n\nwindow.tPlugin = __WEBPACK_IMPORTED_MODULE_2__crsPlugin_js__[\"a\" /* default */];\n\n\n\n\n__WEBPACK_IMPORTED_MODULE_3_vue___default.a.use(__WEBPACK_IMPORTED_MODULE_1_element_ui_lib___default.a);\n\n//import crs from './crs.index.js';\n\n\n//require.ensure([], function (require) {\n__webpack_require__(167);\n//}, '');\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTA5LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vdHBsdWdpbi9zcmMvanMvc2NhZmYvY3JzL2luZGV4LmpzPzYxMzAiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IF9kZWZhdWx0MiBmcm9tICdlbGVtZW50LXVpL2xpYi90aGVtZS1jaGFsay9pbmRleC5jc3MnO1xuaW1wb3J0IF9kZWZhdWx0IGZyb20gJ2VsZW1lbnQtdWkvbGliJztcbmltcG9ydCB0UGx1Z2luIGZyb20gXCIuL2Nyc1BsdWdpbi5qc1wiO1xuXG53aW5kb3cudFBsdWdpbiA9IHRQbHVnaW47XG5cbmltcG9ydCB2dWUgZnJvbSAndnVlJztcblxuXG52dWUudXNlKF9kZWZhdWx0KTtcblxuLy9pbXBvcnQgY3JzIGZyb20gJy4vY3JzLmluZGV4LmpzJztcblxuXG4vL3JlcXVpcmUuZW5zdXJlKFtdLCBmdW5jdGlvbiAocmVxdWlyZSkge1xucmVxdWlyZSgnLi9jcnMuaW5kZXguanMnKTtcbi8vfSwgJycpO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vdHBsdWdpbi9zcmMvanMvc2NhZmYvY3JzL2luZGV4LmpzXG4vLyBtb2R1bGUgaWQgPSAxMDlcbi8vIG1vZHVsZSBjaHVua3MgPSAxIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///109\n")},117:function(module,__webpack_exports__,__webpack_require__){"use strict";eval('/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_element_ui_lib_theme_chalk_index_css__ = __webpack_require__(62);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_element_ui_lib_theme_chalk_index_css___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_element_ui_lib_theme_chalk_index_css__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_element_ui_lib__ = __webpack_require__(65);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_element_ui_lib___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_element_ui_lib__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__tPlugin_js__ = __webpack_require__(118);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__scaff_chart_crsChild_crsCheck_js__ = __webpack_require__(155);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__scaff_chart_crsChild_crschartController_js__ = __webpack_require__(157);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__scaff_menus_crsChild_comments_normal_js__ = __webpack_require__(162);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__scaff_menus_crsChild_comments_pySpark_js__ = __webpack_require__(163);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__scaff_menus_crsChild_comments_spark_js__ = __webpack_require__(164);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8__scaff_menus_crsChild_input_tdwInput_js__ = __webpack_require__(165);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_9__scaff_menus_crsChild_output_tdwOutput_js__ = __webpack_require__(166);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_10__tencent_idf_index_js__ = __webpack_require__(69);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_10__tencent_idf_index_js___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_10__tencent_idf_index_js__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_11_vue__ = __webpack_require__(1);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_11_vue___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_11_vue__);\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n__WEBPACK_IMPORTED_MODULE_11_vue___default.a.use(__WEBPACK_IMPORTED_MODULE_1_element_ui_lib___default.a);\n\nvar mouse = __WEBPACK_IMPORTED_MODULE_10__tencent_idf_index_js__["Event"].mouse,\n    AddReSizeFunc = mouse.AddReSizeFunc,\n    AddMouseMoveFunc = mouse.AddMouseMoveFunc,\n    AddMouseUpFunc = mouse.AddMouseUpFunc,\n    removeMMRFunc = mouse.removeMMRFunc,\n    removeMURFunc = mouse.removeMURFunc,\n    removeReSizeFunc = mouse.removeReSizeFunc;\n\nvar crsPlugin = function crsPlugin(options) {\n    __WEBPACK_IMPORTED_MODULE_2__tPlugin_js__["a" /* default */].call(this, options);\n\n    this.chartControlClass = __WEBPACK_IMPORTED_MODULE_4__scaff_chart_crsChild_crschartController_js__["a" /* default */];\n\n    this.checkControl = new __WEBPACK_IMPORTED_MODULE_3__scaff_chart_crsChild_crsCheck_js__["a" /* default */]();\n};\ncrsPlugin.prototype = new __WEBPACK_IMPORTED_MODULE_2__tPlugin_js__["a" /* default */]();\n\n//渲染菜单\ncrsPlugin.prototype.renderMenus = function (json) {\n\n    var listHtml = \'\';\n    //获取菜单对象的集合\n    var menus = this.menuRegister.getMenus();\n    menus.forEach(function (m) {\n        if ("childNodes" in m) {\n            m.childNodes = [];\n        }\n    });\n\n    var tmpMenus = Object.assign([], menus);\n\n    //处理menus,添加一个关系属性childNodes\n    for (var i = 0; i < tmpMenus.length; i++) {\n        var nodeI = tmpMenus[i];\n        for (var j = 1; j < tmpMenus.length; j++) {\n            if (nodeI.procId == tmpMenus[j].parentId) {\n                if (typeof nodeI.childNodes === "undefined") {\n                    nodeI.childNodes = [];\n                }\n                nodeI.childNodes.push(tmpMenus[j]);\n                tmpMenus[j].parentNode = nodeI;\n            }\n        }\n    }\n    //生成树形菜单 => 第一级数组去掉为子节点的数组\n    for (var i = 0; i < tmpMenus.length; i++) {\n\n        if (typeof tmpMenus[i].parentId !== "undefined") {\n            tmpMenus.splice(i, 1);\n            i--;\n        }\n    }\n\n    this.treeMenu = tmpMenus;\n\n    /*listHtml = `<ul class="v-topnav">${this.creatMenuHTML(tmpMenus)}</ul>`;\r\n      //渲染出 菜单列表 \r\n    this._els.menu.empty().append(listHtml);\r\n      this.createJQPlugin();\r\n      //绑定为手风琴系列\r\n    $(this._els.menu).accordion({\r\n        accordion: false,\r\n        speed: 300,\r\n        closedSign: \'[+]\',\r\n        openedSign: \'[-]\'\r\n    });*/\n\n    var $menu = $(\'<div id="v-menu-plugin"></div>\').appendTo(this._els.menu.empty());\n\n    renderElementMenu("#v-menu-plugin", tmpMenus);\n\n    //绑定 拖拽事件\n    this.bindDrag(this._els.menu, this._els.chart, this.treeMenu);\n};\n//绑定拖拽事件\ncrsPlugin.prototype.bindDrag = function ($menus, $chat, treeMenu) {\n    var dragging = false,\n        mov = null,\n        _this = this,\n        inArea = false,\n        areaPoint = {\n        x: 0,\n        y: 0\n    };\n    $menus.off(\'mousedown\').on(\'mousedown\', "li.el-menu-item", function (e) {\n        e.preventDefault();\n        var curDom = this;\n        AddMouseMoveFunc("mouseMove_Menu", function (e) {\n            if (!dragging) {\n                dragging = true;\n                mov = _this.creatMov(curDom, treeMenu);\n                $chat.addClass(\'moving\');\n            }\n            if (mov) {\n                mov.style.left = e.pageX - 10 + "px";\n                mov.style.top = e.pageY - 10 + "px";\n            }\n        });\n        //全局当鼠标左键弹上时\n        AddMouseUpFunc("mouseUp_Menu", function (e) {\n            removeMMRFunc("mouseMove_Menu");\n            removeMURFunc("mouseUp_Menu");\n            dragging = false;\n            $chat.removeClass(\'moving\');\n            if (mov) {\n                if (inArea) {\n                    _this.addNewTask(mov, areaPoint);\n                }\n\n                _this.dropMov(mov);\n                mov = null;\n            }\n        });\n    });\n\n    $chat.off(\'mouseover\').off(\'mouseout\').off(\'mousemove\').on(\'mouseover\', function (e) {\n        if (dragging) {\n            inArea = true;\n        }\n    }).on(\'mouseout\', function (e) {\n        inArea = false;\n    }).on(\'mousemove\', function (e) {\n        if (inArea) {\n            areaPoint.x = e.offsetX;\n            areaPoint.y = e.offsetY;\n        }\n    });\n};\n\ncrsPlugin.prototype.creatMov = function (copyDom, treeMenu) {\n    var $d = $(copyDom);\n    var div = document.createElement(\'div\');\n\n    var indexId = $d.attr("title");\n    var node = getMenuByindexId(treeMenu, indexId);\n\n    document.body.appendChild(div);\n    div.innerHTML = "<span class=\'node-name " + (node.class || "") + "\' data-procId=\'" + node.procId + "\'  data-nodeType=\'" + (node.nodeType || 1) + "\'>" + node.text + "</span>";\n    div.setAttribute(\'class\', \'menu-move\');\n    return div;\n};\n\nvar getMenuByindexId = function getMenuByindexId(treeMenu, indexId) {\n\n    var func = function func(menus) {\n        var r = null;\n        for (var i = 0; i < menus.length; i++) {\n            if (menus[i].indexId == indexId) {\n                r = menus[i];\n                break;\n            } else if (menus[i].childNodes) {\n                var tmp = func(menus[i].childNodes);\n                if (tmp) {\n                    r = tmp;\n                }\n            }\n        }\n        return r;\n    };\n\n    return func(treeMenu);\n};\n\nvar renderElementMenu = function renderElementMenu(id, menus) {\n\n    var createMenus = function createMenus(menus) {\n        var tmpStr = "";\n        for (var i = 0; i < menus.length; i++) {\n            var t = i + 1;\n            menus[i].indexId = menus[i].parentNode ? menus[i].parentNode.indexId + \'-\' + t : t;\n            if (menus[i].childNodes && menus[i].childNodes.length > 0) {\n                tmpStr += "<el-submenu index=\\"" + menus[i].indexId + "\\" >";\n                tmpStr += "<template slot=\\"title\\">\\n                    <span>" + menus[i].text + "</span>\\n                    </template>";\n                tmpStr += createMenus(menus[i].childNodes);\n                tmpStr += \'</el-submenu>\';\n            } else {\n                tmpStr += "<el-menu-item index=\\"" + menus[i].indexId + "\\" title=\\"" + menus[i].indexId + "\\">" + menus[i].text + "</el-menu-item>";\n            }\n        }\n        return tmpStr;\n    };\n\n    var str = createMenus(menus);\n\n    var res = __WEBPACK_IMPORTED_MODULE_11_vue___default.a.compile("\\n    <el-row class=\\"tac v-drag-menus\\" >\\n        <el-col :span=\\"24\\">\\n        <el-menu\\n            default-active=\\"1\\"\\n            class=\\"el-menu-vertical-demo\\"\\n            style=\\"background-color:transparent\\"\\n            >\\n            " + str + "\\n        </el-menu>\\n        </el-col>\\n    </el-row>");\n\n    new __WEBPACK_IMPORTED_MODULE_11_vue___default.a({\n        el: id,\n        data: function data() {\n            return {\n                menus: menus\n            };\n        },\n\n        render: res.render,\n        staticRenderFns: res.staticRenderFns\n    });\n};\n\n/* harmony default export */ __webpack_exports__["a"] = (crsPlugin);\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTE3LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vdHBsdWdpbi9zcmMvanMvc2NhZmYvY3JzL2Nyc1BsdWdpbi5qcz80ZTNkIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBfZGVmYXVsdDIgZnJvbSBcImVsZW1lbnQtdWkvbGliL3RoZW1lLWNoYWxrL2luZGV4LmNzc1wiO1xuaW1wb3J0IF9kZWZhdWx0IGZyb20gXCJlbGVtZW50LXVpL2xpYlwiO1xuaW1wb3J0IHRQbHVnaW4gZnJvbSAnLi4vLi4vdFBsdWdpbi5qcyc7XG5cbmltcG9ydCBjcnNDaGVjayBmcm9tIFwiLi4vLi4vLi4vLi4vLi4vc2NhZmYvY2hhcnQvY3JzQ2hpbGQvY3JzQ2hlY2suanNcIjtcblxuaW1wb3J0IGNoYXJ0Q29udHJvbCBmcm9tIFwiLi4vLi4vLi4vLi4vLi4vc2NhZmYvY2hhcnQvY3JzQ2hpbGQvY3JzY2hhcnRDb250cm9sbGVyLmpzXCI7XG5cbmltcG9ydCB7IG5vcmFtbCB9IGZyb20gXCIuLi8uLi8uLi8uLi8uLi9zY2FmZi9tZW51cy9jcnNDaGlsZC9jb21tZW50cy9ub3JtYWwuanNcIjtcbmltcG9ydCB7IHB5U3BhcmsgfSBmcm9tIFwiLi4vLi4vLi4vLi4vLi4vc2NhZmYvbWVudXMvY3JzQ2hpbGQvY29tbWVudHMvcHlTcGFyay5qc1wiO1xuaW1wb3J0IHsgc3BhcmsgfSBmcm9tIFwiLi4vLi4vLi4vLi4vLi4vc2NhZmYvbWVudXMvY3JzQ2hpbGQvY29tbWVudHMvc3BhcmsuanNcIjtcbmltcG9ydCB7IHRkd0lucHV0IH0gZnJvbSBcIi4uLy4uLy4uLy4uLy4uL3NjYWZmL21lbnVzL2Nyc0NoaWxkL2lucHV0L3Rkd0lucHV0LmpzXCI7XG5pbXBvcnQgeyB0ZHdPdXRwdXQgfSBmcm9tIFwiLi4vLi4vLi4vLi4vLi4vc2NhZmYvbWVudXMvY3JzQ2hpbGQvb3V0cHV0L3Rkd091dHB1dC5qc1wiO1xuXG5pbXBvcnQgeyBVdGlscywgRXZlbnQgfSBmcm9tIFwiQHRlbmNlbnQvaWRmL2luZGV4LmpzXCI7XG5cbmltcG9ydCB2dWUgZnJvbSAndnVlJztcblxuXG52dWUudXNlKF9kZWZhdWx0KTtcblxudmFyIG1vdXNlID0gRXZlbnQubW91c2UsXG4gICAgQWRkUmVTaXplRnVuYyA9IG1vdXNlLkFkZFJlU2l6ZUZ1bmMsXG4gICAgQWRkTW91c2VNb3ZlRnVuYyA9IG1vdXNlLkFkZE1vdXNlTW92ZUZ1bmMsXG4gICAgQWRkTW91c2VVcEZ1bmMgPSBtb3VzZS5BZGRNb3VzZVVwRnVuYyxcbiAgICByZW1vdmVNTVJGdW5jID0gbW91c2UucmVtb3ZlTU1SRnVuYyxcbiAgICByZW1vdmVNVVJGdW5jID0gbW91c2UucmVtb3ZlTVVSRnVuYyxcbiAgICByZW1vdmVSZVNpemVGdW5jID0gbW91c2UucmVtb3ZlUmVTaXplRnVuYztcblxudmFyIGNyc1BsdWdpbiA9IGZ1bmN0aW9uIGNyc1BsdWdpbihvcHRpb25zKSB7XG4gICAgdFBsdWdpbi5jYWxsKHRoaXMsIG9wdGlvbnMpO1xuXG4gICAgdGhpcy5jaGFydENvbnRyb2xDbGFzcyA9IGNoYXJ0Q29udHJvbDtcblxuICAgIHRoaXMuY2hlY2tDb250cm9sID0gbmV3IGNyc0NoZWNrKCk7XG59O1xuY3JzUGx1Z2luLnByb3RvdHlwZSA9IG5ldyB0UGx1Z2luKCk7XG5cbi8v5riy5p+T6I+c5Y2VXG5jcnNQbHVnaW4ucHJvdG90eXBlLnJlbmRlck1lbnVzID0gZnVuY3Rpb24gKGpzb24pIHtcblxuICAgIHZhciBsaXN0SHRtbCA9ICcnO1xuICAgIC8v6I635Y+W6I+c5Y2V5a+56LGh55qE6ZuG5ZCIXG4gICAgdmFyIG1lbnVzID0gdGhpcy5tZW51UmVnaXN0ZXIuZ2V0TWVudXMoKTtcbiAgICBtZW51cy5mb3JFYWNoKGZ1bmN0aW9uIChtKSB7XG4gICAgICAgIGlmIChcImNoaWxkTm9kZXNcIiBpbiBtKSB7XG4gICAgICAgICAgICBtLmNoaWxkTm9kZXMgPSBbXTtcbiAgICAgICAgfVxuICAgIH0pO1xuXG4gICAgdmFyIHRtcE1lbnVzID0gT2JqZWN0LmFzc2lnbihbXSwgbWVudXMpO1xuXG4gICAgLy/lpITnkIZtZW51cyzmt7vliqDkuIDkuKrlhbPns7vlsZ7mgKdjaGlsZE5vZGVzXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0bXBNZW51cy5sZW5ndGg7IGkrKykge1xuICAgICAgICB2YXIgbm9kZUkgPSB0bXBNZW51c1tpXTtcbiAgICAgICAgZm9yICh2YXIgaiA9IDE7IGogPCB0bXBNZW51cy5sZW5ndGg7IGorKykge1xuICAgICAgICAgICAgaWYgKG5vZGVJLnByb2NJZCA9PSB0bXBNZW51c1tqXS5wYXJlbnRJZCkge1xuICAgICAgICAgICAgICAgIGlmICh0eXBlb2Ygbm9kZUkuY2hpbGROb2RlcyA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICAgICAgICAgICAgICBub2RlSS5jaGlsZE5vZGVzID0gW107XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIG5vZGVJLmNoaWxkTm9kZXMucHVzaCh0bXBNZW51c1tqXSk7XG4gICAgICAgICAgICAgICAgdG1wTWVudXNbal0ucGFyZW50Tm9kZSA9IG5vZGVJO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIC8v55Sf5oiQ5qCR5b2i6I+c5Y2VID0+IOesrOS4gOe6p+aVsOe7hOWOu+aOieS4uuWtkOiKgueCueeahOaVsOe7hFxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdG1wTWVudXMubGVuZ3RoOyBpKyspIHtcblxuICAgICAgICBpZiAodHlwZW9mIHRtcE1lbnVzW2ldLnBhcmVudElkICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgICAgICB0bXBNZW51cy5zcGxpY2UoaSwgMSk7XG4gICAgICAgICAgICBpLS07XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICB0aGlzLnRyZWVNZW51ID0gdG1wTWVudXM7XG5cbiAgICAvKmxpc3RIdG1sID0gYDx1bCBjbGFzcz1cInYtdG9wbmF2XCI+JHt0aGlzLmNyZWF0TWVudUhUTUwodG1wTWVudXMpfTwvdWw+YDtcclxuICAgICAgLy/muLLmn5Plh7og6I+c5Y2V5YiX6KGoIFxyXG4gICAgdGhpcy5fZWxzLm1lbnUuZW1wdHkoKS5hcHBlbmQobGlzdEh0bWwpO1xyXG4gICAgICB0aGlzLmNyZWF0ZUpRUGx1Z2luKCk7XHJcbiAgICAgIC8v57uR5a6a5Li65omL6aOO55C057O75YiXXHJcbiAgICAkKHRoaXMuX2Vscy5tZW51KS5hY2NvcmRpb24oe1xyXG4gICAgICAgIGFjY29yZGlvbjogZmFsc2UsXHJcbiAgICAgICAgc3BlZWQ6IDMwMCxcclxuICAgICAgICBjbG9zZWRTaWduOiAnWytdJyxcclxuICAgICAgICBvcGVuZWRTaWduOiAnWy1dJ1xyXG4gICAgfSk7Ki9cblxuICAgIHZhciAkbWVudSA9ICQoJzxkaXYgaWQ9XCJ2LW1lbnUtcGx1Z2luXCI+PC9kaXY+JykuYXBwZW5kVG8odGhpcy5fZWxzLm1lbnUuZW1wdHkoKSk7XG5cbiAgICByZW5kZXJFbGVtZW50TWVudShcIiN2LW1lbnUtcGx1Z2luXCIsIHRtcE1lbnVzKTtcblxuICAgIC8v57uR5a6aIOaLluaLveS6i+S7tlxuICAgIHRoaXMuYmluZERyYWcodGhpcy5fZWxzLm1lbnUsIHRoaXMuX2Vscy5jaGFydCwgdGhpcy50cmVlTWVudSk7XG59O1xuLy/nu5Hlrprmi5bmi73kuovku7ZcbmNyc1BsdWdpbi5wcm90b3R5cGUuYmluZERyYWcgPSBmdW5jdGlvbiAoJG1lbnVzLCAkY2hhdCwgdHJlZU1lbnUpIHtcbiAgICB2YXIgZHJhZ2dpbmcgPSBmYWxzZSxcbiAgICAgICAgbW92ID0gbnVsbCxcbiAgICAgICAgX3RoaXMgPSB0aGlzLFxuICAgICAgICBpbkFyZWEgPSBmYWxzZSxcbiAgICAgICAgYXJlYVBvaW50ID0ge1xuICAgICAgICB4OiAwLFxuICAgICAgICB5OiAwXG4gICAgfTtcbiAgICAkbWVudXMub2ZmKCdtb3VzZWRvd24nKS5vbignbW91c2Vkb3duJywgXCJsaS5lbC1tZW51LWl0ZW1cIiwgZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICB2YXIgY3VyRG9tID0gdGhpcztcbiAgICAgICAgQWRkTW91c2VNb3ZlRnVuYyhcIm1vdXNlTW92ZV9NZW51XCIsIGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgICBpZiAoIWRyYWdnaW5nKSB7XG4gICAgICAgICAgICAgICAgZHJhZ2dpbmcgPSB0cnVlO1xuICAgICAgICAgICAgICAgIG1vdiA9IF90aGlzLmNyZWF0TW92KGN1ckRvbSwgdHJlZU1lbnUpO1xuICAgICAgICAgICAgICAgICRjaGF0LmFkZENsYXNzKCdtb3ZpbmcnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChtb3YpIHtcbiAgICAgICAgICAgICAgICBtb3Yuc3R5bGUubGVmdCA9IGUucGFnZVggLSAxMCArIFwicHhcIjtcbiAgICAgICAgICAgICAgICBtb3Yuc3R5bGUudG9wID0gZS5wYWdlWSAtIDEwICsgXCJweFwiO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgLy/lhajlsYDlvZPpvKDmoIflt6bplK7lvLnkuIrml7ZcbiAgICAgICAgQWRkTW91c2VVcEZ1bmMoXCJtb3VzZVVwX01lbnVcIiwgZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICAgIHJlbW92ZU1NUkZ1bmMoXCJtb3VzZU1vdmVfTWVudVwiKTtcbiAgICAgICAgICAgIHJlbW92ZU1VUkZ1bmMoXCJtb3VzZVVwX01lbnVcIik7XG4gICAgICAgICAgICBkcmFnZ2luZyA9IGZhbHNlO1xuICAgICAgICAgICAgJGNoYXQucmVtb3ZlQ2xhc3MoJ21vdmluZycpO1xuICAgICAgICAgICAgaWYgKG1vdikge1xuICAgICAgICAgICAgICAgIGlmIChpbkFyZWEpIHtcbiAgICAgICAgICAgICAgICAgICAgX3RoaXMuYWRkTmV3VGFzayhtb3YsIGFyZWFQb2ludCk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgX3RoaXMuZHJvcE1vdihtb3YpO1xuICAgICAgICAgICAgICAgIG1vdiA9IG51bGw7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgJGNoYXQub2ZmKCdtb3VzZW92ZXInKS5vZmYoJ21vdXNlb3V0Jykub2ZmKCdtb3VzZW1vdmUnKS5vbignbW91c2VvdmVyJywgZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgaWYgKGRyYWdnaW5nKSB7XG4gICAgICAgICAgICBpbkFyZWEgPSB0cnVlO1xuICAgICAgICB9XG4gICAgfSkub24oJ21vdXNlb3V0JywgZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgaW5BcmVhID0gZmFsc2U7XG4gICAgfSkub24oJ21vdXNlbW92ZScsIGZ1bmN0aW9uIChlKSB7XG4gICAgICAgIGlmIChpbkFyZWEpIHtcbiAgICAgICAgICAgIGFyZWFQb2ludC54ID0gZS5vZmZzZXRYO1xuICAgICAgICAgICAgYXJlYVBvaW50LnkgPSBlLm9mZnNldFk7XG4gICAgICAgIH1cbiAgICB9KTtcbn07XG5cbmNyc1BsdWdpbi5wcm90b3R5cGUuY3JlYXRNb3YgPSBmdW5jdGlvbiAoY29weURvbSwgdHJlZU1lbnUpIHtcbiAgICB2YXIgJGQgPSAkKGNvcHlEb20pO1xuICAgIHZhciBkaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcblxuICAgIHZhciBpbmRleElkID0gJGQuYXR0cihcInRpdGxlXCIpO1xuICAgIHZhciBub2RlID0gZ2V0TWVudUJ5aW5kZXhJZCh0cmVlTWVudSwgaW5kZXhJZCk7XG5cbiAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKGRpdik7XG4gICAgZGl2LmlubmVySFRNTCA9IFwiPHNwYW4gY2xhc3M9J25vZGUtbmFtZSBcIiArIChub2RlLmNsYXNzIHx8IFwiXCIpICsgXCInIGRhdGEtcHJvY0lkPSdcIiArIG5vZGUucHJvY0lkICsgXCInICBkYXRhLW5vZGVUeXBlPSdcIiArIChub2RlLm5vZGVUeXBlIHx8IDEpICsgXCInPlwiICsgbm9kZS50ZXh0ICsgXCI8L3NwYW4+XCI7XG4gICAgZGl2LnNldEF0dHJpYnV0ZSgnY2xhc3MnLCAnbWVudS1tb3ZlJyk7XG4gICAgcmV0dXJuIGRpdjtcbn07XG5cbnZhciBnZXRNZW51QnlpbmRleElkID0gZnVuY3Rpb24gZ2V0TWVudUJ5aW5kZXhJZCh0cmVlTWVudSwgaW5kZXhJZCkge1xuXG4gICAgdmFyIGZ1bmMgPSBmdW5jdGlvbiBmdW5jKG1lbnVzKSB7XG4gICAgICAgIHZhciByID0gbnVsbDtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBtZW51cy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgaWYgKG1lbnVzW2ldLmluZGV4SWQgPT0gaW5kZXhJZCkge1xuICAgICAgICAgICAgICAgIHIgPSBtZW51c1tpXTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH0gZWxzZSBpZiAobWVudXNbaV0uY2hpbGROb2Rlcykge1xuICAgICAgICAgICAgICAgIHZhciB0bXAgPSBmdW5jKG1lbnVzW2ldLmNoaWxkTm9kZXMpO1xuICAgICAgICAgICAgICAgIGlmICh0bXApIHtcbiAgICAgICAgICAgICAgICAgICAgciA9IHRtcDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHI7XG4gICAgfTtcblxuICAgIHJldHVybiBmdW5jKHRyZWVNZW51KTtcbn07XG5cbnZhciByZW5kZXJFbGVtZW50TWVudSA9IGZ1bmN0aW9uIHJlbmRlckVsZW1lbnRNZW51KGlkLCBtZW51cykge1xuXG4gICAgdmFyIGNyZWF0ZU1lbnVzID0gZnVuY3Rpb24gY3JlYXRlTWVudXMobWVudXMpIHtcbiAgICAgICAgdmFyIHRtcFN0ciA9IFwiXCI7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbWVudXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHZhciB0ID0gaSArIDE7XG4gICAgICAgICAgICBtZW51c1tpXS5pbmRleElkID0gbWVudXNbaV0ucGFyZW50Tm9kZSA/IG1lbnVzW2ldLnBhcmVudE5vZGUuaW5kZXhJZCArICctJyArIHQgOiB0O1xuICAgICAgICAgICAgaWYgKG1lbnVzW2ldLmNoaWxkTm9kZXMgJiYgbWVudXNbaV0uY2hpbGROb2Rlcy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgdG1wU3RyICs9IFwiPGVsLXN1Ym1lbnUgaW5kZXg9XFxcIlwiICsgbWVudXNbaV0uaW5kZXhJZCArIFwiXFxcIiA+XCI7XG4gICAgICAgICAgICAgICAgdG1wU3RyICs9IFwiPHRlbXBsYXRlIHNsb3Q9XFxcInRpdGxlXFxcIj5cXG4gICAgICAgICAgICAgICAgICAgIDxzcGFuPlwiICsgbWVudXNbaV0udGV4dCArIFwiPC9zcGFuPlxcbiAgICAgICAgICAgICAgICAgICAgPC90ZW1wbGF0ZT5cIjtcbiAgICAgICAgICAgICAgICB0bXBTdHIgKz0gY3JlYXRlTWVudXMobWVudXNbaV0uY2hpbGROb2Rlcyk7XG4gICAgICAgICAgICAgICAgdG1wU3RyICs9ICc8L2VsLXN1Ym1lbnU+JztcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdG1wU3RyICs9IFwiPGVsLW1lbnUtaXRlbSBpbmRleD1cXFwiXCIgKyBtZW51c1tpXS5pbmRleElkICsgXCJcXFwiIHRpdGxlPVxcXCJcIiArIG1lbnVzW2ldLmluZGV4SWQgKyBcIlxcXCI+XCIgKyBtZW51c1tpXS50ZXh0ICsgXCI8L2VsLW1lbnUtaXRlbT5cIjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdG1wU3RyO1xuICAgIH07XG5cbiAgICB2YXIgc3RyID0gY3JlYXRlTWVudXMobWVudXMpO1xuXG4gICAgdmFyIHJlcyA9IHZ1ZS5jb21waWxlKFwiXFxuICAgIDxlbC1yb3cgY2xhc3M9XFxcInRhYyB2LWRyYWctbWVudXNcXFwiID5cXG4gICAgICAgIDxlbC1jb2wgOnNwYW49XFxcIjI0XFxcIj5cXG4gICAgICAgIDxlbC1tZW51XFxuICAgICAgICAgICAgZGVmYXVsdC1hY3RpdmU9XFxcIjFcXFwiXFxuICAgICAgICAgICAgY2xhc3M9XFxcImVsLW1lbnUtdmVydGljYWwtZGVtb1xcXCJcXG4gICAgICAgICAgICBzdHlsZT1cXFwiYmFja2dyb3VuZC1jb2xvcjp0cmFuc3BhcmVudFxcXCJcXG4gICAgICAgICAgICA+XFxuICAgICAgICAgICAgXCIgKyBzdHIgKyBcIlxcbiAgICAgICAgPC9lbC1tZW51PlxcbiAgICAgICAgPC9lbC1jb2w+XFxuICAgIDwvZWwtcm93PlwiKTtcblxuICAgIG5ldyB2dWUoe1xuICAgICAgICBlbDogaWQsXG4gICAgICAgIGRhdGE6IGZ1bmN0aW9uIGRhdGEoKSB7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIG1lbnVzOiBtZW51c1xuICAgICAgICAgICAgfTtcbiAgICAgICAgfSxcblxuICAgICAgICByZW5kZXI6IHJlcy5yZW5kZXIsXG4gICAgICAgIHN0YXRpY1JlbmRlckZuczogcmVzLnN0YXRpY1JlbmRlckZuc1xuICAgIH0pO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgY3JzUGx1Z2luO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vdHBsdWdpbi9zcmMvanMvc2NhZmYvY3JzL2Nyc1BsdWdpbi5qc1xuLy8gbW9kdWxlIGlkID0gMTE3XG4vLyBtb2R1bGUgY2h1bmtzID0gMSJdLCJtYXBwaW5ncyI6IkFBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///117\n')},118:function(module,__webpack_exports__,__webpack_require__){"use strict";eval('/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__scaff_chart_base_chartController_js__ = __webpack_require__(67);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__scaff_menus_base_menuBase_js__ = __webpack_require__(119);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__scaff_prop_properHandle_js__ = __webpack_require__(120);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__tencent_idf_index_js__ = __webpack_require__(69);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__tencent_idf_index_js___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_3__tencent_idf_index_js__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4_tippy_js__ = __webpack_require__(154);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4_tippy_js___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_4_tippy_js__);\nvar _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };\n\n\n\n\n\n\n\n\n\n\n\nvar mouse = __WEBPACK_IMPORTED_MODULE_3__tencent_idf_index_js__["Event"].mouse,\n    AddReSizeFunc = mouse.AddReSizeFunc,\n    AddMouseMoveFunc = mouse.AddMouseMoveFunc,\n    AddMouseUpFunc = mouse.AddMouseUpFunc,\n    removeMMRFunc = mouse.removeMMRFunc,\n    removeMURFunc = mouse.removeMURFunc,\n    removeReSizeFunc = mouse.removeReSizeFunc;\n\nvar tplugin = function tplugin(options) {\n    if (typeof options === "undefined") {\n        options = {};\n    }\n    this.mouseEvent = mouse;\n\n    this.chartControlClass = __WEBPACK_IMPORTED_MODULE_0__scaff_chart_base_chartController_js__["a" /* default */];\n    //图形控制器\n    this.chartControl = null;\n    //右侧属性渲染控制器\n    this.properControl = null;\n    //tips渲染控制器\n    this.tipsControl = null;\n    //菜单注册机\n    this.menuRegister = Object.assign({}, __WEBPACK_IMPORTED_MODULE_1__scaff_menus_base_menuBase_js__["b" /* menuRegister */]);\n\n    this.curSelectedNode = null;\n\n    this.options = Object.assign({\n        //菜单数据列表\n        menusData: [],\n\n        //开启属性功能\n        useProp: true,\n        //属性栏目\n        prop: {\n            dataChange: function dataChange() {},\n            methods: {}\n        },\n        //图形参数\n        chart: {\n            //节点单击\n            nodeClick: {\n                cover: false,\n                run: function run(data, node) {}\n            },\n            //节点双击\n            nodeDbClick: {\n                cover: false,\n                run: function run(data, node) {}\n            },\n            //添加节点\n            nodeAdd: {\n                cover: false,\n                run: function run(data, node) {}\n            },\n            //删除节点\n            nodeDel: {\n                cover: false,\n                run: function run(data, node) {}\n            },\n            //容器点击\n            contentClick: {\n                cover: false,\n                run: function run(data, node) {}\n            },\n            nodeMouseenter: {\n                cover: false,\n                run: function run(node) {}\n            },\n            nodeMouseleave: {\n                cover: false,\n                run: function run(node) {}\n            }\n        },\n        useStart: true,\n        useEnd: true\n\n    }, options);\n\n    this.default = {\n        html: "<div class=\\"flowchart-panel\\">\\n                <div class=\\"left\\">\\n                    <ul class=\\"nodes\\" data-flow=\\"menu\\">\\n                    </ul>\\n                </div>\\n                <div class=\\"middle\\" data-flow=\\"middle\\">\\n                    <div class=\\"demo-chart\\">\\n                    \\n                    </div>\\n                    <div class=\\"demo-proto v-menu-pro\\">\\n                        <div ></div>\\n                    </div>\\n                    <div class=\\"v-tippy\\" id=\\"v-tippy\\"></div>\\n                </div>\\n            </div>",\n\n        chart: {\n            parent: null,\n            nodeClick: function nodeClick(data, node) {\n                console.log(this);\n                var _this = this.parent;\n                if (_this.curSelectedNode) {\n                    _this.curSelectedNode.removeClass(\'active\');\n                }\n\n                if (_this._els && _this._els.prop && _this.options.useProp) {\n                    _this._els.prop.addClass(\'active\');\n                }\n                node._el.addClass(\'active\');\n                _this.curSelectedNode = node._el;\n\n                //如果有菜单 唤醒菜单 菜单唯一键 procId\n                var menu = _this.menuRegister.getMenuObj(data.procId);\n\n                if (menu) {\n\n                    //如果 开启属性功能\n                    if (_this.options.useProp && _this.properControl && _this._els) {\n\n                        _this.properControl.render({\n                            el: _this._els.prop.children()[0],\n                            data: data.params,\n                            html: menu.baseHTML + menu.scattHTML,\n                            dataChange: function dataChange(key, newVal) {\n                                //node节点 保存编辑后的数据\n                                node.setParamsOfKey(key, newVal);\n                                if (key === "status") {\n                                    //改变展示的节点UI状态\n                                    node._el.find(\'.node-scatt >b\').text(newVal);\n                                }\n                                if (_this.options.prop.dataChange) {\n                                    _this.options.prop.dataChange(node, key, newVal);\n                                }\n                            },\n\n                            methods: _this.options.prop.methods\n                        });\n                    }\n                } else {\n                    if (_this.options.useProp && _this._els) {\n                        _this.properControl.render({\n                            el: _this._els.prop.children()[0],\n                            data: { aa: 11 },\n                            html: "",\n                            dataChange: function dataChange(key, newVal) {\n                                //node节点 保存编辑后的数据\n                                node.setParamsOfKey(key, newVal);\n                                if (key === "status") {\n                                    //改变展示的节点UI状态\n                                    node._el.find(\'.node-scatt >b\').text(newVal);\n                                }\n                                if (_this.options.prop.dataChange) {\n                                    _this.options.prop.dataChange(node, key, newVal);\n                                }\n                            },\n\n                            methods: _this.options.prop.methods\n                        });\n                    }\n                }\n            },\n            nodeDbClick: function nodeDbClick(data, node) {\n                var _this = this.parent;\n                if (_this.curSelectedNode) {\n                    _this.curSelectedNode.removeClass(\'editor\');\n                }\n                node._el.addClass(\'editor\').children(\'input\').focus();\n            },\n            nodeInputBlur: function nodeInputBlur(data, node) {\n                var _this = this.parent;\n                if (_this.curSelectedNode) {\n                    _this.curSelectedNode.removeClass(\'editor\');\n                }\n            },\n            nodeDel: function nodeDel(data, node) {\n                var _this = this.parent;\n            },\n            contentClick: function contentClick() {\n                var _this = this.parent;\n                if (_this) {\n                    if (_this._els && _this._els.prop) {\n                        _this._els.prop.removeClass(\'active\');\n                    }\n                    //如果有属性模块 那么进行属性栏目销毁 释放内存\n                    if (_this.properHandle) {\n                        _this.properHandle.destroy();\n                    }\n                    if (_this.curSelectedNode) {\n                        _this.curSelectedNode.removeClass(\'active\').removeClass(\'editor\');\n                    }\n                }\n            },\n            /*\r\n                tips绑定事件\r\n            */\n            nodeMouseenter: function nodeMouseenter(node, that, callback) {\n                var _this = this.parent;\n                var content = null;\n                //如果 开启tips功能\n                if (_this.options.useTips) {\n                    //if(node._el[0]._tippy){\n                    //    node._el[0]._tippy.show();\n                    //    content = node._el[0]._tippy.popper.querySelector(\'.tippy-content\');\n                    // }\n                    callback.call(this, node._el, node);\n                }\n            },\n            nodeMouseleave: function nodeMouseleave(node, that, callback) {\n                var _this = this.parent;\n                var content = null;\n                //if(node._el[0]._tippy){\n                //     node._el[0]._tippy.hide();\n                //     content = node._el[0]._tippy.popper.querySelector(\'.tippy-content\');\n                // }\n                callback.call(this, node._el, node);\n            }\n\n        }\n    };\n\n    this.initMenus();\n    this.initOptionCharts();\n\n    //如果开启属性模块,那么实例化属性模块对象\n    if (this.options.useProp) {\n        this.properControl = new __WEBPACK_IMPORTED_MODULE_2__scaff_prop_properHandle_js__["a" /* properHandle */]();\n    }\n    //如果开启TIPS模块,那么实例化属性模块对象\n    if (this.options.useTips) {\n        this.tipsControl = new __WEBPACK_IMPORTED_MODULE_2__scaff_prop_properHandle_js__["a" /* properHandle */]();\n    }\n\n    __WEBPACK_IMPORTED_MODULE_3__tencent_idf_index_js__["Event"].mouse.start();\n\n    if (options._els) {\n        this._els = options._els;\n    }\n};\n\n//待传入的综合参数\ntplugin.prototype.norm = {\n    chart: {}\n\n    //渲染插件\n};tplugin.prototype.render = function (jq, json) {\n    if (this.chartControl) {\n        this.chartControl.clear();\n        this.jq.off().empty();\n    }\n    this.jq = $(jq);\n    this.jq.append(this.default.html);\n    if (!this._els) {\n        this._els = {\n            menu: this.jq.find(\'[data-flow="menu"]\'),\n            chart: this.jq.find(\'[data-flow="middle"] >div:eq(0)\'),\n            prop: this.jq.find(\'[data-flow="middle"] >div:eq(1)\'),\n            tippy: this.jq.find(\'[data-flow="middle"] >div:eq(2)\')\n        };\n    }\n    if (!json) {\n        json = \'{"nodes":[],"connections":[]}\';\n    }\n    this.renderChart(json);\n    this.renderMenus();\n\n    //绑定tippy方法\n    //this.bindTippy();\n};\n\n//获得图形数据\ntplugin.prototype.save = function () {\n    return this.chartControl.toJson();\n};\n\n//初始化&对齐 菜单数据 和 注册的 菜单对象\ntplugin.prototype.initMenus = function () {\n    var _this2 = this;\n\n    var menusData = this.options.menusData;\n    menusData.forEach(function (obj) {\n        var hasMenu = false;\n        _this2.menuRegister.getMenus().forEach(function (menu) {\n            if (menu.procId === obj.procId) {\n                hasMenu = true;\n                for (var i in obj) {\n                    if (_typeof(obj[i]) === "object") {\n                        menu[i] = Object.assign({}, obj[i]);\n                    } else {\n                        menu[i] = obj[i];\n                    }\n                }\n                return false;\n            }\n        });\n        if (!hasMenu) {\n            var menu = new __WEBPACK_IMPORTED_MODULE_1__scaff_menus_base_menuBase_js__["a" /* menuBase */]();\n            for (var i in obj) {\n                if (_typeof(obj[i]) === "object") {\n                    menu[i] = Object.assign({}, obj[i]);\n                } else {\n                    menu[i] = obj[i];\n                }\n            }\n\n            _this2.menuRegister.add(menu);\n        }\n    });\n};\n\n//a初始化&对齐 图形参数\ntplugin.prototype.initOptionCharts = function () {\n\n    this.default.chart.parent = this;\n\n    var charOptions = this.options.chart,\n        _this = this;\n\n    for (var i in charOptions) {\n        if (i === "nodeMouseenter") {\n            (function (key) {\n                this.norm.chart[key] = function (node) {\n                    _this.default.chart[key](node, this, function (popper, node) {\n                        if (charOptions[key].run) {\n                            return charOptions[key].run.call(this, popper, node);\n                        } else {\n                            return charOptions[key].call(this, popper, node);\n                        }\n                    });\n                };\n            }).call(this, i);\n            continue;\n        }\n\n        if (i === "nodeMouseleave") {\n\n            (function (key) {\n                this.norm.chart[key] = function (node) {\n\n                    _this.default.chart[key](node, this, function (popper, node) {\n                        if (charOptions[key].run) {\n                            return charOptions[key].run.call(this, popper, node);\n                        } else {\n                            return charOptions[key].call(this, popper, node);\n                        }\n                    });\n                };\n            }).call(this, i);\n            continue;\n        }\n        if (charOptions[i].cover) {\n            (function (key) {\n                this.norm.chart[key] = charOptions[key].run;\n                this.norm.chart[key].cover = true;\n            }).call(this, i);\n        } else {\n            (function (key) {\n                this.norm.chart[key] = function (data, node) {\n                    if (typeof _this.default.chart[key] === "function") {\n                        _this.default.chart[key](data, node, this);\n                    }\n                    if (charOptions[key].run) {\n\n                        return charOptions[key].run(data, node, this);\n                    } else {\n                        return charOptions[key](data, node, this);\n                    }\n                };\n            }).call(this, i);\n        }\n    }\n};\n\n//渲染图形\ntplugin.prototype.renderChart = function (json) {\n    var _this = this;\n\n    if (!this.chartControl) {\n\n        this.chartControl = new this.chartControlClass(this._els.chart, this.norm.chart);\n    }\n\n    //渲染数据\n    this.chartControl.fromJson(json, {\n        // 节点添加时的回调函数\n        creat: function creat(node, el) {\n            var menu = _this.menuRegister.getMenuObj(node._data.procId);\n\n            if (menu && typeof menu.setNodeElement === "function") {\n                el.append(menu.setNodeElement(node._data.params));\n            }\n        },\n        useStart: this.options.useStart,\n        useEnd: this.options.useEnd\n    });\n};\n\n//渲染菜单\ntplugin.prototype.renderMenus = function (json) {\n\n    var listHtml = \'\';\n    //获取菜单对象的集合\n    var menus = this.menuRegister.getMenus();\n    menus.forEach(function (m) {\n        if ("childNodes" in m) {\n            m.childNodes = [];\n        }\n    });\n\n    var tmpMenus = Object.assign([], menus);\n\n    //处理menus,添加一个关系属性childNodes\n    for (var i = 0; i < tmpMenus.length; i++) {\n        var nodeI = tmpMenus[i];\n        for (var j = 1; j < tmpMenus.length; j++) {\n            if (nodeI.procId == tmpMenus[j].parentId) {\n                if (typeof nodeI.childNodes === "undefined") {\n                    nodeI.childNodes = [];\n                }\n                nodeI.childNodes.push(tmpMenus[j]);\n            }\n        }\n    }\n    //生成树形菜单 => 第一级数组去掉为子节点的数组\n    for (var i = 0; i < tmpMenus.length; i++) {\n\n        if (typeof tmpMenus[i].parentId !== "undefined") {\n            tmpMenus.splice(i, 1);\n            i--;\n        }\n    }\n\n    listHtml = "<ul class=\\"v-topnav\\">" + this.creatMenuHTML(tmpMenus) + "</ul>";\n\n    //渲染出 菜单列表 \n    this._els.menu.empty().append(listHtml);\n\n    this.createJQPlugin();\n\n    //绑定为手风琴系列\n    $(this._els.menu).accordion({\n        accordion: false,\n        speed: 300,\n        closedSign: \'[+]\',\n        openedSign: \'[-]\'\n    });\n\n    //绑定 拖拽事件\n    this.bindDrag(this._els.menu, this._els.chart);\n};\n//根据树形结构 生成html\ntplugin.prototype.creatMenuHTML = function (treeMenus) {\n    var _this3 = this;\n\n    var str = "";\n    treeMenus.forEach(function (node) {\n        if (node.procId === "startnode" || node.procId === "endnode") {\n            return;\n        }\n        if (typeof node.childNodes === "undefined") {\n            str += "<li><span class=\'node-name " + (node.class || "") + "\' data-procId=\'" + node.procId + "\'  data-nodeType=\'" + (node.nodeType || 1) + "\'>" + node.text + "</span></li>";\n        } else {\n            str += "<li>\\n                        <a class=\'node-name " + (node.class || "") + "\' data-procId=\'" + node.procId + "\'  data-nodeType=\'" + (node.nodeType || 1) + "\'>" + node.text + "</a>\\n                    <ul>";\n            str += _this3.creatMenuHTML(node.childNodes);\n            str += "</ul>\\n                    </li>";\n        }\n    });\n\n    return str;\n};\n\n//绑定拖拽事件\ntplugin.prototype.bindDrag = function ($menus, $chat) {\n    var dragging = false,\n        mov = null,\n        _this = this,\n        inArea = false,\n        areaPoint = {\n        x: 0,\n        y: 0\n    };\n    $menus.off(\'mousedown\').on(\'mousedown\', "span.node-name", function (e) {\n        e.preventDefault();\n        var curDom = this;\n        AddMouseMoveFunc("mouseMove_Menu", function (e) {\n            if (!dragging) {\n                dragging = true;\n                mov = _this.creatMov(curDom);\n                $chat.addClass(\'moving\');\n            }\n            if (mov) {\n                mov.style.left = e.pageX - 10 + "px";\n                mov.style.top = e.pageY - 10 + "px";\n            }\n        });\n        //全局当鼠标左键弹上时\n        AddMouseUpFunc("mouseUp_Menu", function (e) {\n            removeMMRFunc("mouseMove_Menu");\n            removeMURFunc("mouseUp_Menu");\n            dragging = false;\n            $chat.removeClass(\'moving\');\n            if (mov) {\n                if (inArea) {\n                    _this.addNewTask(mov, areaPoint);\n                }\n\n                _this.dropMov(mov);\n                mov = null;\n            }\n        });\n    });\n\n    $chat.off(\'mouseover\').off(\'mouseout\').off(\'mousemove\').on(\'mouseover\', function (e) {\n        if (dragging) {\n            inArea = true;\n        }\n    }).on(\'mouseout\', function (e) {\n        inArea = false;\n    }).on(\'mousemove\', function (e) {\n        if (inArea) {\n            areaPoint.x = e.offsetX;\n            areaPoint.y = e.offsetY;\n        }\n    });\n};\n\ntplugin.prototype.creatMov = function (copyDom) {\n    var div = document.createElement(\'div\');\n\n    document.body.appendChild(div);\n    div.innerHTML = copyDom.outerHTML;\n    div.setAttribute(\'class\', \'menu-move\');\n    return div;\n};\n\ntplugin.prototype.dropMov = function (dom) {\n    document.body.removeChild(dom);\n};\n\ntplugin.prototype.addNewTask = function (mov, point) {\n    var _this = this,\n        $t = $(mov).find(\'span\'),\n        menu = this.menuRegister.getMenuObj($t.attr(\'data-procId\')),\n        option = {\n        name: menu.text,\n        point: {\n            x: point.x,\n            y: point.y\n        },\n        data: {\n            //菜单类型标记\n            procId: menu.procId,\n            //菜单附加数据\n            params: $.extend({}, menu.baseData, menu.scattData)\n        },\n        class: "node-process",\n        removable: menu.baseData.removable || true,\n        creat: function creat(node, element) {\n            //menu 自定义一个状态UI, 在node节点上 增加元素\n            if (typeof menu.setNodeElement === "function") {\n                element.append(menu.setNodeElement(node._data.params));\n            }\n        }\n    };\n\n    this.chartControl.addNode(option);\n\n    // 绑定tips事件\n    //this.bindTippy();\n};\n\n//创建 即时的jq插件\ntplugin.prototype.createJQPlugin = function () {\n    (function ($) {\n        $.fn.extend({\n\n            //pass the options variable to the function\n            accordion: function accordion(options) {\n\n                var defaults = {\n                    accordion: \'true\',\n                    speed: 300,\n                    closedSign: \'[+]\',\n                    openedSign: \'[-]\'\n                };\n\n                // Extend our default options with those provided.\n                var opts = $.extend(defaults, options);\n                //Assign current element to variable, in this case is UL element\n                var $this = $(this);\n\n                //add a mark [+] to a multilevel menu\n                $this.find("li").each(function () {\n                    if ($(this).find("ul").size() != 0) {\n                        //add the multilevel sign next to the link\n                        $(this).find("a:first").append("<span>" + opts.closedSign + "</span>");\n\n                        //avoid jumping to the top of the page when the href is an #\n                        if ($(this).find("a:first").attr(\'href\') == "#") {\n                            $(this).find("a:first").click(function () {\n                                return false;\n                            });\n                        }\n                    }\n                });\n\n                //open active level\n                $this.find("li.active").each(function () {\n                    $(this).parents("ul").slideDown(opts.speed);\n                    $(this).parents("ul").parent("li").find("span:first").html(opts.openedSign);\n                });\n\n                $this.find("li a").click(function () {\n                    if ($(this).parent().find("ul").size() != 0) {\n                        if (opts.accordion) {\n                            //Do nothing when the list is open\n                            if (!$(this).parent().find("ul").is(\':visible\')) {\n                                parents = $(this).parent().parents("ul");\n                                visible = $this.find("ul:visible");\n                                visible.each(function (visibleIndex) {\n                                    var close = true;\n                                    parents.each(function (parentIndex) {\n                                        if (parents[parentIndex] == visible[visibleIndex]) {\n                                            close = false;\n                                            return false;\n                                        }\n                                    });\n                                    if (close) {\n                                        if ($(this).parent().find("ul") != visible[visibleIndex]) {\n                                            $(visible[visibleIndex]).slideUp(opts.speed, function () {\n                                                $(this).parent("li").find("span:first").html(opts.closedSign);\n                                            });\n                                        }\n                                    }\n                                });\n                            }\n                        }\n                        if ($(this).parent().removeClass(\'v-active\').find("ul:first").is(":visible")) {\n                            $(this).parent().find("ul:first").slideUp(opts.speed, function () {\n                                $(this).parent("li").find("span:first").delay(opts.speed).html(opts.closedSign);\n                            });\n                        } else {\n                            $(this).parent().addClass(\'v-active\').find("ul:first").slideDown(opts.speed, function () {\n                                $(this).parent("li").find("span:first").delay(opts.speed).html(opts.openedSign);\n                            });\n                        }\n                    }\n                });\n            }\n        });\n    })(jQuery);\n};\n\n// 绑定tips\ntplugin.prototype.bindTippy = function () {\n    var _this = this;\n    this._els.chart.find(\'div.task\').each(function () {\n        if ("_tippy" in this) {\n            return;\n        }\n        __WEBPACK_IMPORTED_MODULE_4_tippy_js___default()(this, {\n            theme: \'honeybee\',\n            animation: \'shift-toward\',\n            arrow: true,\n            html: "#v-tippy",\n            placement: \'right\',\n            trigger: \'\'\n        });\n    });\n};\n\n/* harmony default export */ __webpack_exports__["a"] = (tplugin);\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTE4LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vdHBsdWdpbi9zcmMvanMvdFBsdWdpbi5qcz9iOWZiIl0sInNvdXJjZXNDb250ZW50IjpbInZhciBfdHlwZW9mID0gdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09IFwic3ltYm9sXCIgPyBmdW5jdGlvbiAob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9IDogZnVuY3Rpb24gKG9iaikgeyByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG9iajsgfTtcblxuaW1wb3J0IGNoYXJ0Q29udHJvbCBmcm9tIFwiLi4vLi4vLi4vc2NhZmYvY2hhcnQvYmFzZS9jaGFydENvbnRyb2xsZXIuanNcIjtcblxuaW1wb3J0IHsgbWVudUJhc2UsIG1lbnVSZWdpc3RlciB9IGZyb20gXCIuLi8uLi8uLi9zY2FmZi9tZW51cy9iYXNlL21lbnVCYXNlLmpzXCI7XG5cbmltcG9ydCB7IHByb3BlckhhbmRsZSBhcyBwcm9wZXJDb250cm9sIH0gZnJvbSBcIi4uLy4uLy4uL3NjYWZmL3Byb3AvcHJvcGVySGFuZGxlLmpzXCI7XG5cbmltcG9ydCB7IFV0aWxzLCBFdmVudCB9IGZyb20gXCJAdGVuY2VudC9pZGYvaW5kZXguanNcIjtcblxuaW1wb3J0IHRpcHB5IGZyb20gJ3RpcHB5LmpzJztcblxudmFyIG1vdXNlID0gRXZlbnQubW91c2UsXG4gICAgQWRkUmVTaXplRnVuYyA9IG1vdXNlLkFkZFJlU2l6ZUZ1bmMsXG4gICAgQWRkTW91c2VNb3ZlRnVuYyA9IG1vdXNlLkFkZE1vdXNlTW92ZUZ1bmMsXG4gICAgQWRkTW91c2VVcEZ1bmMgPSBtb3VzZS5BZGRNb3VzZVVwRnVuYyxcbiAgICByZW1vdmVNTVJGdW5jID0gbW91c2UucmVtb3ZlTU1SRnVuYyxcbiAgICByZW1vdmVNVVJGdW5jID0gbW91c2UucmVtb3ZlTVVSRnVuYyxcbiAgICByZW1vdmVSZVNpemVGdW5jID0gbW91c2UucmVtb3ZlUmVTaXplRnVuYztcblxudmFyIHRwbHVnaW4gPSBmdW5jdGlvbiB0cGx1Z2luKG9wdGlvbnMpIHtcbiAgICBpZiAodHlwZW9mIG9wdGlvbnMgPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgb3B0aW9ucyA9IHt9O1xuICAgIH1cbiAgICB0aGlzLm1vdXNlRXZlbnQgPSBtb3VzZTtcblxuICAgIHRoaXMuY2hhcnRDb250cm9sQ2xhc3MgPSBjaGFydENvbnRyb2w7XG4gICAgLy/lm77lvaLmjqfliLblmahcbiAgICB0aGlzLmNoYXJ0Q29udHJvbCA9IG51bGw7XG4gICAgLy/lj7PkvqflsZ7mgKfmuLLmn5PmjqfliLblmahcbiAgICB0aGlzLnByb3BlckNvbnRyb2wgPSBudWxsO1xuICAgIC8vdGlwc+a4suafk+aOp+WItuWZqFxuICAgIHRoaXMudGlwc0NvbnRyb2wgPSBudWxsO1xuICAgIC8v6I+c5Y2V5rOo5YaM5py6XG4gICAgdGhpcy5tZW51UmVnaXN0ZXIgPSBPYmplY3QuYXNzaWduKHt9LCBtZW51UmVnaXN0ZXIpO1xuXG4gICAgdGhpcy5jdXJTZWxlY3RlZE5vZGUgPSBudWxsO1xuXG4gICAgdGhpcy5vcHRpb25zID0gT2JqZWN0LmFzc2lnbih7XG4gICAgICAgIC8v6I+c5Y2V5pWw5o2u5YiX6KGoXG4gICAgICAgIG1lbnVzRGF0YTogW10sXG5cbiAgICAgICAgLy/lvIDlkK/lsZ7mgKflip/og71cbiAgICAgICAgdXNlUHJvcDogdHJ1ZSxcbiAgICAgICAgLy/lsZ7mgKfmoI/nm65cbiAgICAgICAgcHJvcDoge1xuICAgICAgICAgICAgZGF0YUNoYW5nZTogZnVuY3Rpb24gZGF0YUNoYW5nZSgpIHt9LFxuICAgICAgICAgICAgbWV0aG9kczoge31cbiAgICAgICAgfSxcbiAgICAgICAgLy/lm77lvaLlj4LmlbBcbiAgICAgICAgY2hhcnQ6IHtcbiAgICAgICAgICAgIC8v6IqC54K55Y2V5Ye7XG4gICAgICAgICAgICBub2RlQ2xpY2s6IHtcbiAgICAgICAgICAgICAgICBjb3ZlcjogZmFsc2UsXG4gICAgICAgICAgICAgICAgcnVuOiBmdW5jdGlvbiBydW4oZGF0YSwgbm9kZSkge31cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAvL+iKgueCueWPjOWHu1xuICAgICAgICAgICAgbm9kZURiQ2xpY2s6IHtcbiAgICAgICAgICAgICAgICBjb3ZlcjogZmFsc2UsXG4gICAgICAgICAgICAgICAgcnVuOiBmdW5jdGlvbiBydW4oZGF0YSwgbm9kZSkge31cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAvL+a3u+WKoOiKgueCuVxuICAgICAgICAgICAgbm9kZUFkZDoge1xuICAgICAgICAgICAgICAgIGNvdmVyOiBmYWxzZSxcbiAgICAgICAgICAgICAgICBydW46IGZ1bmN0aW9uIHJ1bihkYXRhLCBub2RlKSB7fVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIC8v5Yig6Zmk6IqC54K5XG4gICAgICAgICAgICBub2RlRGVsOiB7XG4gICAgICAgICAgICAgICAgY292ZXI6IGZhbHNlLFxuICAgICAgICAgICAgICAgIHJ1bjogZnVuY3Rpb24gcnVuKGRhdGEsIG5vZGUpIHt9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgLy/lrrnlmajngrnlh7tcbiAgICAgICAgICAgIGNvbnRlbnRDbGljazoge1xuICAgICAgICAgICAgICAgIGNvdmVyOiBmYWxzZSxcbiAgICAgICAgICAgICAgICBydW46IGZ1bmN0aW9uIHJ1bihkYXRhLCBub2RlKSB7fVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIG5vZGVNb3VzZWVudGVyOiB7XG4gICAgICAgICAgICAgICAgY292ZXI6IGZhbHNlLFxuICAgICAgICAgICAgICAgIHJ1bjogZnVuY3Rpb24gcnVuKG5vZGUpIHt9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgbm9kZU1vdXNlbGVhdmU6IHtcbiAgICAgICAgICAgICAgICBjb3ZlcjogZmFsc2UsXG4gICAgICAgICAgICAgICAgcnVuOiBmdW5jdGlvbiBydW4obm9kZSkge31cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgdXNlU3RhcnQ6IHRydWUsXG4gICAgICAgIHVzZUVuZDogdHJ1ZVxuXG4gICAgfSwgb3B0aW9ucyk7XG5cbiAgICB0aGlzLmRlZmF1bHQgPSB7XG4gICAgICAgIGh0bWw6IFwiPGRpdiBjbGFzcz1cXFwiZmxvd2NoYXJ0LXBhbmVsXFxcIj5cXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFwibGVmdFxcXCI+XFxuICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9XFxcIm5vZGVzXFxcIiBkYXRhLWZsb3c9XFxcIm1lbnVcXFwiPlxcbiAgICAgICAgICAgICAgICAgICAgPC91bD5cXG4gICAgICAgICAgICAgICAgPC9kaXY+XFxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcIm1pZGRsZVxcXCIgZGF0YS1mbG93PVxcXCJtaWRkbGVcXFwiPlxcbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFwiZGVtby1jaGFydFxcXCI+XFxuICAgICAgICAgICAgICAgICAgICBcXG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxcbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFwiZGVtby1wcm90byB2LW1lbnUtcHJvXFxcIj5cXG4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2ID48L2Rpdj5cXG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxcbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFwidi10aXBweVxcXCIgaWQ9XFxcInYtdGlwcHlcXFwiPjwvZGl2PlxcbiAgICAgICAgICAgICAgICA8L2Rpdj5cXG4gICAgICAgICAgICA8L2Rpdj5cIixcblxuICAgICAgICBjaGFydDoge1xuICAgICAgICAgICAgcGFyZW50OiBudWxsLFxuICAgICAgICAgICAgbm9kZUNsaWNrOiBmdW5jdGlvbiBub2RlQ2xpY2soZGF0YSwgbm9kZSkge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKHRoaXMpO1xuICAgICAgICAgICAgICAgIHZhciBfdGhpcyA9IHRoaXMucGFyZW50O1xuICAgICAgICAgICAgICAgIGlmIChfdGhpcy5jdXJTZWxlY3RlZE5vZGUpIHtcbiAgICAgICAgICAgICAgICAgICAgX3RoaXMuY3VyU2VsZWN0ZWROb2RlLnJlbW92ZUNsYXNzKCdhY3RpdmUnKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBpZiAoX3RoaXMuX2VscyAmJiBfdGhpcy5fZWxzLnByb3AgJiYgX3RoaXMub3B0aW9ucy51c2VQcm9wKSB7XG4gICAgICAgICAgICAgICAgICAgIF90aGlzLl9lbHMucHJvcC5hZGRDbGFzcygnYWN0aXZlJyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIG5vZGUuX2VsLmFkZENsYXNzKCdhY3RpdmUnKTtcbiAgICAgICAgICAgICAgICBfdGhpcy5jdXJTZWxlY3RlZE5vZGUgPSBub2RlLl9lbDtcblxuICAgICAgICAgICAgICAgIC8v5aaC5p6c5pyJ6I+c5Y2VIOWUpOmGkuiPnOWNlSDoj5zljZXllK/kuIDplK4gcHJvY0lkXG4gICAgICAgICAgICAgICAgdmFyIG1lbnUgPSBfdGhpcy5tZW51UmVnaXN0ZXIuZ2V0TWVudU9iaihkYXRhLnByb2NJZCk7XG5cbiAgICAgICAgICAgICAgICBpZiAobWVudSkge1xuXG4gICAgICAgICAgICAgICAgICAgIC8v5aaC5p6cIOW8gOWQr+WxnuaAp+WKn+iDvVxuICAgICAgICAgICAgICAgICAgICBpZiAoX3RoaXMub3B0aW9ucy51c2VQcm9wICYmIF90aGlzLnByb3BlckNvbnRyb2wgJiYgX3RoaXMuX2Vscykge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBfdGhpcy5wcm9wZXJDb250cm9sLnJlbmRlcih7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZWw6IF90aGlzLl9lbHMucHJvcC5jaGlsZHJlbigpWzBdLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGE6IGRhdGEucGFyYW1zLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGh0bWw6IG1lbnUuYmFzZUhUTUwgKyBtZW51LnNjYXR0SFRNTCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhQ2hhbmdlOiBmdW5jdGlvbiBkYXRhQ2hhbmdlKGtleSwgbmV3VmFsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vbm9kZeiKgueCuSDkv53lrZjnvJbovpHlkI7nmoTmlbDmja5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbm9kZS5zZXRQYXJhbXNPZktleShrZXksIG5ld1ZhbCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChrZXkgPT09IFwic3RhdHVzXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8v5pS55Y+Y5bGV56S655qE6IqC54K5VUnnirbmgIFcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5vZGUuX2VsLmZpbmQoJy5ub2RlLXNjYXR0ID5iJykudGV4dChuZXdWYWwpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChfdGhpcy5vcHRpb25zLnByb3AuZGF0YUNoYW5nZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXMub3B0aW9ucy5wcm9wLmRhdGFDaGFuZ2Uobm9kZSwga2V5LCBuZXdWYWwpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1ldGhvZHM6IF90aGlzLm9wdGlvbnMucHJvcC5tZXRob2RzXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChfdGhpcy5vcHRpb25zLnVzZVByb3AgJiYgX3RoaXMuX2Vscykge1xuICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXMucHJvcGVyQ29udHJvbC5yZW5kZXIoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsOiBfdGhpcy5fZWxzLnByb3AuY2hpbGRyZW4oKVswXSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhOiB7IGFhOiAxMSB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGh0bWw6IFwiXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YUNoYW5nZTogZnVuY3Rpb24gZGF0YUNoYW5nZShrZXksIG5ld1ZhbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL25vZGXoioLngrkg5L+d5a2Y57yW6L6R5ZCO55qE5pWw5o2uXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5vZGUuc2V0UGFyYW1zT2ZLZXkoa2V5LCBuZXdWYWwpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoa2V5ID09PSBcInN0YXR1c1wiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL+aUueWPmOWxleekuueahOiKgueCuVVJ54q25oCBXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBub2RlLl9lbC5maW5kKCcubm9kZS1zY2F0dCA+YicpLnRleHQobmV3VmFsKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoX3RoaXMub3B0aW9ucy5wcm9wLmRhdGFDaGFuZ2UpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzLm9wdGlvbnMucHJvcC5kYXRhQ2hhbmdlKG5vZGUsIGtleSwgbmV3VmFsKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZXRob2RzOiBfdGhpcy5vcHRpb25zLnByb3AubWV0aG9kc1xuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgbm9kZURiQ2xpY2s6IGZ1bmN0aW9uIG5vZGVEYkNsaWNrKGRhdGEsIG5vZGUpIHtcbiAgICAgICAgICAgICAgICB2YXIgX3RoaXMgPSB0aGlzLnBhcmVudDtcbiAgICAgICAgICAgICAgICBpZiAoX3RoaXMuY3VyU2VsZWN0ZWROb2RlKSB7XG4gICAgICAgICAgICAgICAgICAgIF90aGlzLmN1clNlbGVjdGVkTm9kZS5yZW1vdmVDbGFzcygnZWRpdG9yJyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIG5vZGUuX2VsLmFkZENsYXNzKCdlZGl0b3InKS5jaGlsZHJlbignaW5wdXQnKS5mb2N1cygpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIG5vZGVJbnB1dEJsdXI6IGZ1bmN0aW9uIG5vZGVJbnB1dEJsdXIoZGF0YSwgbm9kZSkge1xuICAgICAgICAgICAgICAgIHZhciBfdGhpcyA9IHRoaXMucGFyZW50O1xuICAgICAgICAgICAgICAgIGlmIChfdGhpcy5jdXJTZWxlY3RlZE5vZGUpIHtcbiAgICAgICAgICAgICAgICAgICAgX3RoaXMuY3VyU2VsZWN0ZWROb2RlLnJlbW92ZUNsYXNzKCdlZGl0b3InKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgbm9kZURlbDogZnVuY3Rpb24gbm9kZURlbChkYXRhLCBub2RlKSB7XG4gICAgICAgICAgICAgICAgdmFyIF90aGlzID0gdGhpcy5wYXJlbnQ7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgY29udGVudENsaWNrOiBmdW5jdGlvbiBjb250ZW50Q2xpY2soKSB7XG4gICAgICAgICAgICAgICAgdmFyIF90aGlzID0gdGhpcy5wYXJlbnQ7XG4gICAgICAgICAgICAgICAgaWYgKF90aGlzKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChfdGhpcy5fZWxzICYmIF90aGlzLl9lbHMucHJvcCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXMuX2Vscy5wcm9wLnJlbW92ZUNsYXNzKCdhY3RpdmUnKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAvL+WmguaenOacieWxnuaAp+aooeWdlyDpgqPkuYjov5vooYzlsZ7mgKfmoI/nm67plIDmr4Eg6YeK5pS+5YaF5a2YXG4gICAgICAgICAgICAgICAgICAgIGlmIChfdGhpcy5wcm9wZXJIYW5kbGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzLnByb3BlckhhbmRsZS5kZXN0cm95KCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKF90aGlzLmN1clNlbGVjdGVkTm9kZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXMuY3VyU2VsZWN0ZWROb2RlLnJlbW92ZUNsYXNzKCdhY3RpdmUnKS5yZW1vdmVDbGFzcygnZWRpdG9yJyk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgLypcclxuICAgICAgICAgICAgICAgIHRpcHPnu5Hlrprkuovku7ZcclxuICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIG5vZGVNb3VzZWVudGVyOiBmdW5jdGlvbiBub2RlTW91c2VlbnRlcihub2RlLCB0aGF0LCBjYWxsYmFjaykge1xuICAgICAgICAgICAgICAgIHZhciBfdGhpcyA9IHRoaXMucGFyZW50O1xuICAgICAgICAgICAgICAgIHZhciBjb250ZW50ID0gbnVsbDtcbiAgICAgICAgICAgICAgICAvL+WmguaenCDlvIDlkK90aXBz5Yqf6IO9XG4gICAgICAgICAgICAgICAgaWYgKF90aGlzLm9wdGlvbnMudXNlVGlwcykge1xuICAgICAgICAgICAgICAgICAgICAvL2lmKG5vZGUuX2VsWzBdLl90aXBweSl7XG4gICAgICAgICAgICAgICAgICAgIC8vICAgIG5vZGUuX2VsWzBdLl90aXBweS5zaG93KCk7XG4gICAgICAgICAgICAgICAgICAgIC8vICAgIGNvbnRlbnQgPSBub2RlLl9lbFswXS5fdGlwcHkucG9wcGVyLnF1ZXJ5U2VsZWN0b3IoJy50aXBweS1jb250ZW50Jyk7XG4gICAgICAgICAgICAgICAgICAgIC8vIH1cbiAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2suY2FsbCh0aGlzLCBub2RlLl9lbCwgbm9kZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIG5vZGVNb3VzZWxlYXZlOiBmdW5jdGlvbiBub2RlTW91c2VsZWF2ZShub2RlLCB0aGF0LCBjYWxsYmFjaykge1xuICAgICAgICAgICAgICAgIHZhciBfdGhpcyA9IHRoaXMucGFyZW50O1xuICAgICAgICAgICAgICAgIHZhciBjb250ZW50ID0gbnVsbDtcbiAgICAgICAgICAgICAgICAvL2lmKG5vZGUuX2VsWzBdLl90aXBweSl7XG4gICAgICAgICAgICAgICAgLy8gICAgIG5vZGUuX2VsWzBdLl90aXBweS5oaWRlKCk7XG4gICAgICAgICAgICAgICAgLy8gICAgIGNvbnRlbnQgPSBub2RlLl9lbFswXS5fdGlwcHkucG9wcGVyLnF1ZXJ5U2VsZWN0b3IoJy50aXBweS1jb250ZW50Jyk7XG4gICAgICAgICAgICAgICAgLy8gfVxuICAgICAgICAgICAgICAgIGNhbGxiYWNrLmNhbGwodGhpcywgbm9kZS5fZWwsIG5vZGUpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgdGhpcy5pbml0TWVudXMoKTtcbiAgICB0aGlzLmluaXRPcHRpb25DaGFydHMoKTtcblxuICAgIC8v5aaC5p6c5byA5ZCv5bGe5oCn5qih5Z2XLOmCo+S5iOWunuS+i+WMluWxnuaAp+aooeWdl+WvueixoVxuICAgIGlmICh0aGlzLm9wdGlvbnMudXNlUHJvcCkge1xuICAgICAgICB0aGlzLnByb3BlckNvbnRyb2wgPSBuZXcgcHJvcGVyQ29udHJvbCgpO1xuICAgIH1cbiAgICAvL+WmguaenOW8gOWQr1RJUFPmqKHlnZcs6YKj5LmI5a6e5L6L5YyW5bGe5oCn5qih5Z2X5a+56LGhXG4gICAgaWYgKHRoaXMub3B0aW9ucy51c2VUaXBzKSB7XG4gICAgICAgIHRoaXMudGlwc0NvbnRyb2wgPSBuZXcgcHJvcGVyQ29udHJvbCgpO1xuICAgIH1cblxuICAgIEV2ZW50Lm1vdXNlLnN0YXJ0KCk7XG5cbiAgICBpZiAob3B0aW9ucy5fZWxzKSB7XG4gICAgICAgIHRoaXMuX2VscyA9IG9wdGlvbnMuX2VscztcbiAgICB9XG59O1xuXG4vL+W+heS8oOWFpeeahOe7vOWQiOWPguaVsFxudHBsdWdpbi5wcm90b3R5cGUubm9ybSA9IHtcbiAgICBjaGFydDoge31cblxuICAgIC8v5riy5p+T5o+S5Lu2XG59O3RwbHVnaW4ucHJvdG90eXBlLnJlbmRlciA9IGZ1bmN0aW9uIChqcSwganNvbikge1xuICAgIGlmICh0aGlzLmNoYXJ0Q29udHJvbCkge1xuICAgICAgICB0aGlzLmNoYXJ0Q29udHJvbC5jbGVhcigpO1xuICAgICAgICB0aGlzLmpxLm9mZigpLmVtcHR5KCk7XG4gICAgfVxuICAgIHRoaXMuanEgPSAkKGpxKTtcbiAgICB0aGlzLmpxLmFwcGVuZCh0aGlzLmRlZmF1bHQuaHRtbCk7XG4gICAgaWYgKCF0aGlzLl9lbHMpIHtcbiAgICAgICAgdGhpcy5fZWxzID0ge1xuICAgICAgICAgICAgbWVudTogdGhpcy5qcS5maW5kKCdbZGF0YS1mbG93PVwibWVudVwiXScpLFxuICAgICAgICAgICAgY2hhcnQ6IHRoaXMuanEuZmluZCgnW2RhdGEtZmxvdz1cIm1pZGRsZVwiXSA+ZGl2OmVxKDApJyksXG4gICAgICAgICAgICBwcm9wOiB0aGlzLmpxLmZpbmQoJ1tkYXRhLWZsb3c9XCJtaWRkbGVcIl0gPmRpdjplcSgxKScpLFxuICAgICAgICAgICAgdGlwcHk6IHRoaXMuanEuZmluZCgnW2RhdGEtZmxvdz1cIm1pZGRsZVwiXSA+ZGl2OmVxKDIpJylcbiAgICAgICAgfTtcbiAgICB9XG4gICAgaWYgKCFqc29uKSB7XG4gICAgICAgIGpzb24gPSAne1wibm9kZXNcIjpbXSxcImNvbm5lY3Rpb25zXCI6W119JztcbiAgICB9XG4gICAgdGhpcy5yZW5kZXJDaGFydChqc29uKTtcbiAgICB0aGlzLnJlbmRlck1lbnVzKCk7XG5cbiAgICAvL+e7keWumnRpcHB55pa55rOVXG4gICAgLy90aGlzLmJpbmRUaXBweSgpO1xufTtcblxuLy/ojrflvpflm77lvaLmlbDmja5cbnRwbHVnaW4ucHJvdG90eXBlLnNhdmUgPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHRoaXMuY2hhcnRDb250cm9sLnRvSnNvbigpO1xufTtcblxuLy/liJ3lp4vljJYm5a+56b2QIOiPnOWNleaVsOaNriDlkowg5rOo5YaM55qEIOiPnOWNleWvueixoVxudHBsdWdpbi5wcm90b3R5cGUuaW5pdE1lbnVzID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBfdGhpczIgPSB0aGlzO1xuXG4gICAgdmFyIG1lbnVzRGF0YSA9IHRoaXMub3B0aW9ucy5tZW51c0RhdGE7XG4gICAgbWVudXNEYXRhLmZvckVhY2goZnVuY3Rpb24gKG9iaikge1xuICAgICAgICB2YXIgaGFzTWVudSA9IGZhbHNlO1xuICAgICAgICBfdGhpczIubWVudVJlZ2lzdGVyLmdldE1lbnVzKCkuZm9yRWFjaChmdW5jdGlvbiAobWVudSkge1xuICAgICAgICAgICAgaWYgKG1lbnUucHJvY0lkID09PSBvYmoucHJvY0lkKSB7XG4gICAgICAgICAgICAgICAgaGFzTWVudSA9IHRydWU7XG4gICAgICAgICAgICAgICAgZm9yICh2YXIgaSBpbiBvYmopIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKF90eXBlb2Yob2JqW2ldKSA9PT0gXCJvYmplY3RcIikge1xuICAgICAgICAgICAgICAgICAgICAgICAgbWVudVtpXSA9IE9iamVjdC5hc3NpZ24oe30sIG9ialtpXSk7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBtZW51W2ldID0gb2JqW2ldO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIGlmICghaGFzTWVudSkge1xuICAgICAgICAgICAgdmFyIG1lbnUgPSBuZXcgbWVudUJhc2UoKTtcbiAgICAgICAgICAgIGZvciAodmFyIGkgaW4gb2JqKSB7XG4gICAgICAgICAgICAgICAgaWYgKF90eXBlb2Yob2JqW2ldKSA9PT0gXCJvYmplY3RcIikge1xuICAgICAgICAgICAgICAgICAgICBtZW51W2ldID0gT2JqZWN0LmFzc2lnbih7fSwgb2JqW2ldKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBtZW51W2ldID0gb2JqW2ldO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgX3RoaXMyLm1lbnVSZWdpc3Rlci5hZGQobWVudSk7XG4gICAgICAgIH1cbiAgICB9KTtcbn07XG5cbi8vYeWIneWni+WMliblr7npvZAg5Zu+5b2i5Y+C5pWwXG50cGx1Z2luLnByb3RvdHlwZS5pbml0T3B0aW9uQ2hhcnRzID0gZnVuY3Rpb24gKCkge1xuXG4gICAgdGhpcy5kZWZhdWx0LmNoYXJ0LnBhcmVudCA9IHRoaXM7XG5cbiAgICB2YXIgY2hhck9wdGlvbnMgPSB0aGlzLm9wdGlvbnMuY2hhcnQsXG4gICAgICAgIF90aGlzID0gdGhpcztcblxuICAgIGZvciAodmFyIGkgaW4gY2hhck9wdGlvbnMpIHtcbiAgICAgICAgaWYgKGkgPT09IFwibm9kZU1vdXNlZW50ZXJcIikge1xuICAgICAgICAgICAgKGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgICAgICAgICB0aGlzLm5vcm0uY2hhcnRba2V5XSA9IGZ1bmN0aW9uIChub2RlKSB7XG4gICAgICAgICAgICAgICAgICAgIF90aGlzLmRlZmF1bHQuY2hhcnRba2V5XShub2RlLCB0aGlzLCBmdW5jdGlvbiAocG9wcGVyLCBub2RlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoY2hhck9wdGlvbnNba2V5XS5ydW4pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gY2hhck9wdGlvbnNba2V5XS5ydW4uY2FsbCh0aGlzLCBwb3BwZXIsIG5vZGUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gY2hhck9wdGlvbnNba2V5XS5jYWxsKHRoaXMsIHBvcHBlciwgbm9kZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9KS5jYWxsKHRoaXMsIGkpO1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoaSA9PT0gXCJub2RlTW91c2VsZWF2ZVwiKSB7XG5cbiAgICAgICAgICAgIChmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgICAgICAgICAgdGhpcy5ub3JtLmNoYXJ0W2tleV0gPSBmdW5jdGlvbiAobm9kZSkge1xuXG4gICAgICAgICAgICAgICAgICAgIF90aGlzLmRlZmF1bHQuY2hhcnRba2V5XShub2RlLCB0aGlzLCBmdW5jdGlvbiAocG9wcGVyLCBub2RlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoY2hhck9wdGlvbnNba2V5XS5ydW4pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gY2hhck9wdGlvbnNba2V5XS5ydW4uY2FsbCh0aGlzLCBwb3BwZXIsIG5vZGUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gY2hhck9wdGlvbnNba2V5XS5jYWxsKHRoaXMsIHBvcHBlciwgbm9kZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9KS5jYWxsKHRoaXMsIGkpO1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGNoYXJPcHRpb25zW2ldLmNvdmVyKSB7XG4gICAgICAgICAgICAoZnVuY3Rpb24gKGtleSkge1xuICAgICAgICAgICAgICAgIHRoaXMubm9ybS5jaGFydFtrZXldID0gY2hhck9wdGlvbnNba2V5XS5ydW47XG4gICAgICAgICAgICAgICAgdGhpcy5ub3JtLmNoYXJ0W2tleV0uY292ZXIgPSB0cnVlO1xuICAgICAgICAgICAgfSkuY2FsbCh0aGlzLCBpKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIChmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgICAgICAgICAgdGhpcy5ub3JtLmNoYXJ0W2tleV0gPSBmdW5jdGlvbiAoZGF0YSwgbm9kZSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIF90aGlzLmRlZmF1bHQuY2hhcnRba2V5XSA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBfdGhpcy5kZWZhdWx0LmNoYXJ0W2tleV0oZGF0YSwgbm9kZSwgdGhpcyk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKGNoYXJPcHRpb25zW2tleV0ucnVuKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBjaGFyT3B0aW9uc1trZXldLnJ1bihkYXRhLCBub2RlLCB0aGlzKTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBjaGFyT3B0aW9uc1trZXldKGRhdGEsIG5vZGUsIHRoaXMpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH0pLmNhbGwodGhpcywgaSk7XG4gICAgICAgIH1cbiAgICB9XG59O1xuXG4vL+a4suafk+WbvuW9olxudHBsdWdpbi5wcm90b3R5cGUucmVuZGVyQ2hhcnQgPSBmdW5jdGlvbiAoanNvbikge1xuICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICBpZiAoIXRoaXMuY2hhcnRDb250cm9sKSB7XG5cbiAgICAgICAgdGhpcy5jaGFydENvbnRyb2wgPSBuZXcgdGhpcy5jaGFydENvbnRyb2xDbGFzcyh0aGlzLl9lbHMuY2hhcnQsIHRoaXMubm9ybS5jaGFydCk7XG4gICAgfVxuXG4gICAgLy/muLLmn5PmlbDmja5cbiAgICB0aGlzLmNoYXJ0Q29udHJvbC5mcm9tSnNvbihqc29uLCB7XG4gICAgICAgIC8vIOiKgueCuea3u+WKoOaXtueahOWbnuiwg+WHveaVsFxuICAgICAgICBjcmVhdDogZnVuY3Rpb24gY3JlYXQobm9kZSwgZWwpIHtcbiAgICAgICAgICAgIHZhciBtZW51ID0gX3RoaXMubWVudVJlZ2lzdGVyLmdldE1lbnVPYmoobm9kZS5fZGF0YS5wcm9jSWQpO1xuXG4gICAgICAgICAgICBpZiAobWVudSAmJiB0eXBlb2YgbWVudS5zZXROb2RlRWxlbWVudCA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgICAgICAgICAgZWwuYXBwZW5kKG1lbnUuc2V0Tm9kZUVsZW1lbnQobm9kZS5fZGF0YS5wYXJhbXMpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgdXNlU3RhcnQ6IHRoaXMub3B0aW9ucy51c2VTdGFydCxcbiAgICAgICAgdXNlRW5kOiB0aGlzLm9wdGlvbnMudXNlRW5kXG4gICAgfSk7XG59O1xuXG4vL+a4suafk+iPnOWNlVxudHBsdWdpbi5wcm90b3R5cGUucmVuZGVyTWVudXMgPSBmdW5jdGlvbiAoanNvbikge1xuXG4gICAgdmFyIGxpc3RIdG1sID0gJyc7XG4gICAgLy/ojrflj5boj5zljZXlr7nosaHnmoTpm4blkIhcbiAgICB2YXIgbWVudXMgPSB0aGlzLm1lbnVSZWdpc3Rlci5nZXRNZW51cygpO1xuICAgIG1lbnVzLmZvckVhY2goZnVuY3Rpb24gKG0pIHtcbiAgICAgICAgaWYgKFwiY2hpbGROb2Rlc1wiIGluIG0pIHtcbiAgICAgICAgICAgIG0uY2hpbGROb2RlcyA9IFtdO1xuICAgICAgICB9XG4gICAgfSk7XG5cbiAgICB2YXIgdG1wTWVudXMgPSBPYmplY3QuYXNzaWduKFtdLCBtZW51cyk7XG5cbiAgICAvL+WkhOeQhm1lbnVzLOa3u+WKoOS4gOS4quWFs+ezu+WxnuaAp2NoaWxkTm9kZXNcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRtcE1lbnVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHZhciBub2RlSSA9IHRtcE1lbnVzW2ldO1xuICAgICAgICBmb3IgKHZhciBqID0gMTsgaiA8IHRtcE1lbnVzLmxlbmd0aDsgaisrKSB7XG4gICAgICAgICAgICBpZiAobm9kZUkucHJvY0lkID09IHRtcE1lbnVzW2pdLnBhcmVudElkKSB7XG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBub2RlSS5jaGlsZE5vZGVzID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgICAgICAgICAgICAgIG5vZGVJLmNoaWxkTm9kZXMgPSBbXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgbm9kZUkuY2hpbGROb2Rlcy5wdXNoKHRtcE1lbnVzW2pdKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICAvL+eUn+aIkOagkeW9ouiPnOWNlSA9PiDnrKzkuIDnuqfmlbDnu4TljrvmjonkuLrlrZDoioLngrnnmoTmlbDnu4RcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRtcE1lbnVzLmxlbmd0aDsgaSsrKSB7XG5cbiAgICAgICAgaWYgKHR5cGVvZiB0bXBNZW51c1tpXS5wYXJlbnRJZCAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICAgICAgdG1wTWVudXMuc3BsaWNlKGksIDEpO1xuICAgICAgICAgICAgaS0tO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgbGlzdEh0bWwgPSBcIjx1bCBjbGFzcz1cXFwidi10b3BuYXZcXFwiPlwiICsgdGhpcy5jcmVhdE1lbnVIVE1MKHRtcE1lbnVzKSArIFwiPC91bD5cIjtcblxuICAgIC8v5riy5p+T5Ye6IOiPnOWNleWIl+ihqCBcbiAgICB0aGlzLl9lbHMubWVudS5lbXB0eSgpLmFwcGVuZChsaXN0SHRtbCk7XG5cbiAgICB0aGlzLmNyZWF0ZUpRUGx1Z2luKCk7XG5cbiAgICAvL+e7keWumuS4uuaJi+mjjueQtOezu+WIl1xuICAgICQodGhpcy5fZWxzLm1lbnUpLmFjY29yZGlvbih7XG4gICAgICAgIGFjY29yZGlvbjogZmFsc2UsXG4gICAgICAgIHNwZWVkOiAzMDAsXG4gICAgICAgIGNsb3NlZFNpZ246ICdbK10nLFxuICAgICAgICBvcGVuZWRTaWduOiAnWy1dJ1xuICAgIH0pO1xuXG4gICAgLy/nu5Hlrpog5ouW5ou95LqL5Lu2XG4gICAgdGhpcy5iaW5kRHJhZyh0aGlzLl9lbHMubWVudSwgdGhpcy5fZWxzLmNoYXJ0KTtcbn07XG4vL+agueaNruagkeW9oue7k+aehCDnlJ/miJBodG1sXG50cGx1Z2luLnByb3RvdHlwZS5jcmVhdE1lbnVIVE1MID0gZnVuY3Rpb24gKHRyZWVNZW51cykge1xuICAgIHZhciBfdGhpczMgPSB0aGlzO1xuXG4gICAgdmFyIHN0ciA9IFwiXCI7XG4gICAgdHJlZU1lbnVzLmZvckVhY2goZnVuY3Rpb24gKG5vZGUpIHtcbiAgICAgICAgaWYgKG5vZGUucHJvY0lkID09PSBcInN0YXJ0bm9kZVwiIHx8IG5vZGUucHJvY0lkID09PSBcImVuZG5vZGVcIikge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0eXBlb2Ygbm9kZS5jaGlsZE5vZGVzID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgICAgICBzdHIgKz0gXCI8bGk+PHNwYW4gY2xhc3M9J25vZGUtbmFtZSBcIiArIChub2RlLmNsYXNzIHx8IFwiXCIpICsgXCInIGRhdGEtcHJvY0lkPSdcIiArIG5vZGUucHJvY0lkICsgXCInICBkYXRhLW5vZGVUeXBlPSdcIiArIChub2RlLm5vZGVUeXBlIHx8IDEpICsgXCInPlwiICsgbm9kZS50ZXh0ICsgXCI8L3NwYW4+PC9saT5cIjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHN0ciArPSBcIjxsaT5cXG4gICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0nbm9kZS1uYW1lIFwiICsgKG5vZGUuY2xhc3MgfHwgXCJcIikgKyBcIicgZGF0YS1wcm9jSWQ9J1wiICsgbm9kZS5wcm9jSWQgKyBcIicgIGRhdGEtbm9kZVR5cGU9J1wiICsgKG5vZGUubm9kZVR5cGUgfHwgMSkgKyBcIic+XCIgKyBub2RlLnRleHQgKyBcIjwvYT5cXG4gICAgICAgICAgICAgICAgICAgIDx1bD5cIjtcbiAgICAgICAgICAgIHN0ciArPSBfdGhpczMuY3JlYXRNZW51SFRNTChub2RlLmNoaWxkTm9kZXMpO1xuICAgICAgICAgICAgc3RyICs9IFwiPC91bD5cXG4gICAgICAgICAgICAgICAgICAgIDwvbGk+XCI7XG4gICAgICAgIH1cbiAgICB9KTtcblxuICAgIHJldHVybiBzdHI7XG59O1xuXG4vL+e7keWumuaLluaLveS6i+S7tlxudHBsdWdpbi5wcm90b3R5cGUuYmluZERyYWcgPSBmdW5jdGlvbiAoJG1lbnVzLCAkY2hhdCkge1xuICAgIHZhciBkcmFnZ2luZyA9IGZhbHNlLFxuICAgICAgICBtb3YgPSBudWxsLFxuICAgICAgICBfdGhpcyA9IHRoaXMsXG4gICAgICAgIGluQXJlYSA9IGZhbHNlLFxuICAgICAgICBhcmVhUG9pbnQgPSB7XG4gICAgICAgIHg6IDAsXG4gICAgICAgIHk6IDBcbiAgICB9O1xuICAgICRtZW51cy5vZmYoJ21vdXNlZG93bicpLm9uKCdtb3VzZWRvd24nLCBcInNwYW4ubm9kZS1uYW1lXCIsIGZ1bmN0aW9uIChlKSB7XG4gICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgdmFyIGN1ckRvbSA9IHRoaXM7XG4gICAgICAgIEFkZE1vdXNlTW92ZUZ1bmMoXCJtb3VzZU1vdmVfTWVudVwiLCBmdW5jdGlvbiAoZSkge1xuICAgICAgICAgICAgaWYgKCFkcmFnZ2luZykge1xuICAgICAgICAgICAgICAgIGRyYWdnaW5nID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICBtb3YgPSBfdGhpcy5jcmVhdE1vdihjdXJEb20pO1xuICAgICAgICAgICAgICAgICRjaGF0LmFkZENsYXNzKCdtb3ZpbmcnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChtb3YpIHtcbiAgICAgICAgICAgICAgICBtb3Yuc3R5bGUubGVmdCA9IGUucGFnZVggLSAxMCArIFwicHhcIjtcbiAgICAgICAgICAgICAgICBtb3Yuc3R5bGUudG9wID0gZS5wYWdlWSAtIDEwICsgXCJweFwiO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgLy/lhajlsYDlvZPpvKDmoIflt6bplK7lvLnkuIrml7ZcbiAgICAgICAgQWRkTW91c2VVcEZ1bmMoXCJtb3VzZVVwX01lbnVcIiwgZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICAgIHJlbW92ZU1NUkZ1bmMoXCJtb3VzZU1vdmVfTWVudVwiKTtcbiAgICAgICAgICAgIHJlbW92ZU1VUkZ1bmMoXCJtb3VzZVVwX01lbnVcIik7XG4gICAgICAgICAgICBkcmFnZ2luZyA9IGZhbHNlO1xuICAgICAgICAgICAgJGNoYXQucmVtb3ZlQ2xhc3MoJ21vdmluZycpO1xuICAgICAgICAgICAgaWYgKG1vdikge1xuICAgICAgICAgICAgICAgIGlmIChpbkFyZWEpIHtcbiAgICAgICAgICAgICAgICAgICAgX3RoaXMuYWRkTmV3VGFzayhtb3YsIGFyZWFQb2ludCk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgX3RoaXMuZHJvcE1vdihtb3YpO1xuICAgICAgICAgICAgICAgIG1vdiA9IG51bGw7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgJGNoYXQub2ZmKCdtb3VzZW92ZXInKS5vZmYoJ21vdXNlb3V0Jykub2ZmKCdtb3VzZW1vdmUnKS5vbignbW91c2VvdmVyJywgZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgaWYgKGRyYWdnaW5nKSB7XG4gICAgICAgICAgICBpbkFyZWEgPSB0cnVlO1xuICAgICAgICB9XG4gICAgfSkub24oJ21vdXNlb3V0JywgZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgaW5BcmVhID0gZmFsc2U7XG4gICAgfSkub24oJ21vdXNlbW92ZScsIGZ1bmN0aW9uIChlKSB7XG4gICAgICAgIGlmIChpbkFyZWEpIHtcbiAgICAgICAgICAgIGFyZWFQb2ludC54ID0gZS5vZmZzZXRYO1xuICAgICAgICAgICAgYXJlYVBvaW50LnkgPSBlLm9mZnNldFk7XG4gICAgICAgIH1cbiAgICB9KTtcbn07XG5cbnRwbHVnaW4ucHJvdG90eXBlLmNyZWF0TW92ID0gZnVuY3Rpb24gKGNvcHlEb20pIHtcbiAgICB2YXIgZGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG5cbiAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKGRpdik7XG4gICAgZGl2LmlubmVySFRNTCA9IGNvcHlEb20ub3V0ZXJIVE1MO1xuICAgIGRpdi5zZXRBdHRyaWJ1dGUoJ2NsYXNzJywgJ21lbnUtbW92ZScpO1xuICAgIHJldHVybiBkaXY7XG59O1xuXG50cGx1Z2luLnByb3RvdHlwZS5kcm9wTW92ID0gZnVuY3Rpb24gKGRvbSkge1xuICAgIGRvY3VtZW50LmJvZHkucmVtb3ZlQ2hpbGQoZG9tKTtcbn07XG5cbnRwbHVnaW4ucHJvdG90eXBlLmFkZE5ld1Rhc2sgPSBmdW5jdGlvbiAobW92LCBwb2ludCkge1xuICAgIHZhciBfdGhpcyA9IHRoaXMsXG4gICAgICAgICR0ID0gJChtb3YpLmZpbmQoJ3NwYW4nKSxcbiAgICAgICAgbWVudSA9IHRoaXMubWVudVJlZ2lzdGVyLmdldE1lbnVPYmooJHQuYXR0cignZGF0YS1wcm9jSWQnKSksXG4gICAgICAgIG9wdGlvbiA9IHtcbiAgICAgICAgbmFtZTogbWVudS50ZXh0LFxuICAgICAgICBwb2ludDoge1xuICAgICAgICAgICAgeDogcG9pbnQueCxcbiAgICAgICAgICAgIHk6IHBvaW50LnlcbiAgICAgICAgfSxcbiAgICAgICAgZGF0YToge1xuICAgICAgICAgICAgLy/oj5zljZXnsbvlnovmoIforrBcbiAgICAgICAgICAgIHByb2NJZDogbWVudS5wcm9jSWQsXG4gICAgICAgICAgICAvL+iPnOWNlemZhOWKoOaVsOaNrlxuICAgICAgICAgICAgcGFyYW1zOiAkLmV4dGVuZCh7fSwgbWVudS5iYXNlRGF0YSwgbWVudS5zY2F0dERhdGEpXG4gICAgICAgIH0sXG4gICAgICAgIGNsYXNzOiBcIm5vZGUtcHJvY2Vzc1wiLFxuICAgICAgICByZW1vdmFibGU6IG1lbnUuYmFzZURhdGEucmVtb3ZhYmxlIHx8IHRydWUsXG4gICAgICAgIGNyZWF0OiBmdW5jdGlvbiBjcmVhdChub2RlLCBlbGVtZW50KSB7XG4gICAgICAgICAgICAvL21lbnUg6Ieq5a6a5LmJ5LiA5Liq54q25oCBVUksIOWcqG5vZGXoioLngrnkuIog5aKe5Yqg5YWD57SgXG4gICAgICAgICAgICBpZiAodHlwZW9mIG1lbnUuc2V0Tm9kZUVsZW1lbnQgPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICAgICAgICAgIGVsZW1lbnQuYXBwZW5kKG1lbnUuc2V0Tm9kZUVsZW1lbnQobm9kZS5fZGF0YS5wYXJhbXMpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH07XG5cbiAgICB0aGlzLmNoYXJ0Q29udHJvbC5hZGROb2RlKG9wdGlvbik7XG5cbiAgICAvLyDnu5Hlrpp0aXBz5LqL5Lu2XG4gICAgLy90aGlzLmJpbmRUaXBweSgpO1xufTtcblxuLy/liJvlu7og5Y2z5pe255qEanHmj5Lku7ZcbnRwbHVnaW4ucHJvdG90eXBlLmNyZWF0ZUpRUGx1Z2luID0gZnVuY3Rpb24gKCkge1xuICAgIChmdW5jdGlvbiAoJCkge1xuICAgICAgICAkLmZuLmV4dGVuZCh7XG5cbiAgICAgICAgICAgIC8vcGFzcyB0aGUgb3B0aW9ucyB2YXJpYWJsZSB0byB0aGUgZnVuY3Rpb25cbiAgICAgICAgICAgIGFjY29yZGlvbjogZnVuY3Rpb24gYWNjb3JkaW9uKG9wdGlvbnMpIHtcblxuICAgICAgICAgICAgICAgIHZhciBkZWZhdWx0cyA9IHtcbiAgICAgICAgICAgICAgICAgICAgYWNjb3JkaW9uOiAndHJ1ZScsXG4gICAgICAgICAgICAgICAgICAgIHNwZWVkOiAzMDAsXG4gICAgICAgICAgICAgICAgICAgIGNsb3NlZFNpZ246ICdbK10nLFxuICAgICAgICAgICAgICAgICAgICBvcGVuZWRTaWduOiAnWy1dJ1xuICAgICAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgICAgICAvLyBFeHRlbmQgb3VyIGRlZmF1bHQgb3B0aW9ucyB3aXRoIHRob3NlIHByb3ZpZGVkLlxuICAgICAgICAgICAgICAgIHZhciBvcHRzID0gJC5leHRlbmQoZGVmYXVsdHMsIG9wdGlvbnMpO1xuICAgICAgICAgICAgICAgIC8vQXNzaWduIGN1cnJlbnQgZWxlbWVudCB0byB2YXJpYWJsZSwgaW4gdGhpcyBjYXNlIGlzIFVMIGVsZW1lbnRcbiAgICAgICAgICAgICAgICB2YXIgJHRoaXMgPSAkKHRoaXMpO1xuXG4gICAgICAgICAgICAgICAgLy9hZGQgYSBtYXJrIFsrXSB0byBhIG11bHRpbGV2ZWwgbWVudVxuICAgICAgICAgICAgICAgICR0aGlzLmZpbmQoXCJsaVwiKS5lYWNoKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCQodGhpcykuZmluZChcInVsXCIpLnNpemUoKSAhPSAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvL2FkZCB0aGUgbXVsdGlsZXZlbCBzaWduIG5leHQgdG8gdGhlIGxpbmtcbiAgICAgICAgICAgICAgICAgICAgICAgICQodGhpcykuZmluZChcImE6Zmlyc3RcIikuYXBwZW5kKFwiPHNwYW4+XCIgKyBvcHRzLmNsb3NlZFNpZ24gKyBcIjwvc3Bhbj5cIik7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIC8vYXZvaWQganVtcGluZyB0byB0aGUgdG9wIG9mIHRoZSBwYWdlIHdoZW4gdGhlIGhyZWYgaXMgYW4gI1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCQodGhpcykuZmluZChcImE6Zmlyc3RcIikuYXR0cignaHJlZicpID09IFwiI1wiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJCh0aGlzKS5maW5kKFwiYTpmaXJzdFwiKS5jbGljayhmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgLy9vcGVuIGFjdGl2ZSBsZXZlbFxuICAgICAgICAgICAgICAgICR0aGlzLmZpbmQoXCJsaS5hY3RpdmVcIikuZWFjaChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICQodGhpcykucGFyZW50cyhcInVsXCIpLnNsaWRlRG93bihvcHRzLnNwZWVkKTtcbiAgICAgICAgICAgICAgICAgICAgJCh0aGlzKS5wYXJlbnRzKFwidWxcIikucGFyZW50KFwibGlcIikuZmluZChcInNwYW46Zmlyc3RcIikuaHRtbChvcHRzLm9wZW5lZFNpZ24pO1xuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgJHRoaXMuZmluZChcImxpIGFcIikuY2xpY2soZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoJCh0aGlzKS5wYXJlbnQoKS5maW5kKFwidWxcIikuc2l6ZSgpICE9IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChvcHRzLmFjY29yZGlvbikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vRG8gbm90aGluZyB3aGVuIHRoZSBsaXN0IGlzIG9wZW5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoISQodGhpcykucGFyZW50KCkuZmluZChcInVsXCIpLmlzKCc6dmlzaWJsZScpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhcmVudHMgPSAkKHRoaXMpLnBhcmVudCgpLnBhcmVudHMoXCJ1bFwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmlzaWJsZSA9ICR0aGlzLmZpbmQoXCJ1bDp2aXNpYmxlXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2aXNpYmxlLmVhY2goZnVuY3Rpb24gKHZpc2libGVJbmRleCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGNsb3NlID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhcmVudHMuZWFjaChmdW5jdGlvbiAocGFyZW50SW5kZXgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocGFyZW50c1twYXJlbnRJbmRleF0gPT0gdmlzaWJsZVt2aXNpYmxlSW5kZXhdKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsb3NlID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjbG9zZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICgkKHRoaXMpLnBhcmVudCgpLmZpbmQoXCJ1bFwiKSAhPSB2aXNpYmxlW3Zpc2libGVJbmRleF0pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJCh2aXNpYmxlW3Zpc2libGVJbmRleF0pLnNsaWRlVXAob3B0cy5zcGVlZCwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJCh0aGlzKS5wYXJlbnQoXCJsaVwiKS5maW5kKFwic3BhbjpmaXJzdFwiKS5odG1sKG9wdHMuY2xvc2VkU2lnbik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCQodGhpcykucGFyZW50KCkucmVtb3ZlQ2xhc3MoJ3YtYWN0aXZlJykuZmluZChcInVsOmZpcnN0XCIpLmlzKFwiOnZpc2libGVcIikpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkKHRoaXMpLnBhcmVudCgpLmZpbmQoXCJ1bDpmaXJzdFwiKS5zbGlkZVVwKG9wdHMuc3BlZWQsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJCh0aGlzKS5wYXJlbnQoXCJsaVwiKS5maW5kKFwic3BhbjpmaXJzdFwiKS5kZWxheShvcHRzLnNwZWVkKS5odG1sKG9wdHMuY2xvc2VkU2lnbik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICQodGhpcykucGFyZW50KCkuYWRkQ2xhc3MoJ3YtYWN0aXZlJykuZmluZChcInVsOmZpcnN0XCIpLnNsaWRlRG93bihvcHRzLnNwZWVkLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICQodGhpcykucGFyZW50KFwibGlcIikuZmluZChcInNwYW46Zmlyc3RcIikuZGVsYXkob3B0cy5zcGVlZCkuaHRtbChvcHRzLm9wZW5lZFNpZ24pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH0pKGpRdWVyeSk7XG59O1xuXG4vLyDnu5Hlrpp0aXBzXG50cGx1Z2luLnByb3RvdHlwZS5iaW5kVGlwcHkgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIF90aGlzID0gdGhpcztcbiAgICB0aGlzLl9lbHMuY2hhcnQuZmluZCgnZGl2LnRhc2snKS5lYWNoKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKFwiX3RpcHB5XCIgaW4gdGhpcykge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHRpcHB5KHRoaXMsIHtcbiAgICAgICAgICAgIHRoZW1lOiAnaG9uZXliZWUnLFxuICAgICAgICAgICAgYW5pbWF0aW9uOiAnc2hpZnQtdG93YXJkJyxcbiAgICAgICAgICAgIGFycm93OiB0cnVlLFxuICAgICAgICAgICAgaHRtbDogXCIjdi10aXBweVwiLFxuICAgICAgICAgICAgcGxhY2VtZW50OiAncmlnaHQnLFxuICAgICAgICAgICAgdHJpZ2dlcjogJydcbiAgICAgICAgfSk7XG4gICAgfSk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCB0cGx1Z2luO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vdHBsdWdpbi9zcmMvanMvdFBsdWdpbi5qc1xuLy8gbW9kdWxlIGlkID0gMTE4XG4vLyBtb2R1bGUgY2h1bmtzID0gMSJdLCJtYXBwaW5ncyI6IkFBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///118\n')},119:function(module,__webpack_exports__,__webpack_require__){"use strict";eval('/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return menuBases; });\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__core_menu_menuBase_js__ = __webpack_require__(68);\n/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return __WEBPACK_IMPORTED_MODULE_0__core_menu_menuBase_js__["b"]; });\n\n\nvar menuBases = function menuBases() {\n    __WEBPACK_IMPORTED_MODULE_0__core_menu_menuBase_js__["a" /* menuBase */].call(this);\n\n    this.procId = "0";\n    this.text = "";\n    //组件的 公共数据结构\n    this.baseData = $.extend(this.baseData, {});\n\n    //组件的 特性数据结构\n    this.scattData = {};\n\n    //添加后的节点是否可以删除\n    this.baseData.removable = true;\n\n    //特性模板\n    this.scattHTML = "";\n\n    //设置 图形节点的内容\n    this.setNodeElement = function (data) {\n\n        return "";\n    };\n};\n\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTE5LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vc2NhZmYvbWVudXMvYmFzZS9tZW51QmFzZS5qcz9kYzgyIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IG1lbnVCYXNlLCBtZW51UmVnaXN0ZXIgfSBmcm9tICcuLi8uLi8uLi9jb3JlL21lbnUvbWVudUJhc2UuanMnO1xuXG52YXIgbWVudUJhc2VzID0gZnVuY3Rpb24gbWVudUJhc2VzKCkge1xuICAgIG1lbnVCYXNlLmNhbGwodGhpcyk7XG5cbiAgICB0aGlzLnByb2NJZCA9IFwiMFwiO1xuICAgIHRoaXMudGV4dCA9IFwiXCI7XG4gICAgLy/nu4Tku7bnmoQg5YWs5YWx5pWw5o2u57uT5p6EXG4gICAgdGhpcy5iYXNlRGF0YSA9ICQuZXh0ZW5kKHRoaXMuYmFzZURhdGEsIHt9KTtcblxuICAgIC8v57uE5Lu255qEIOeJueaAp+aVsOaNrue7k+aehFxuICAgIHRoaXMuc2NhdHREYXRhID0ge307XG5cbiAgICAvL+a3u+WKoOWQjueahOiKgueCueaYr+WQpuWPr+S7peWIoOmZpFxuICAgIHRoaXMuYmFzZURhdGEucmVtb3ZhYmxlID0gdHJ1ZTtcblxuICAgIC8v54m55oCn5qih5p2/XG4gICAgdGhpcy5zY2F0dEhUTUwgPSBcIlwiO1xuXG4gICAgLy/orr7nva4g5Zu+5b2i6IqC54K555qE5YaF5a65XG4gICAgdGhpcy5zZXROb2RlRWxlbWVudCA9IGZ1bmN0aW9uIChkYXRhKSB7XG5cbiAgICAgICAgcmV0dXJuIFwiXCI7XG4gICAgfTtcbn07XG5cbmV4cG9ydCB7IG1lbnVCYXNlcyBhcyBtZW51QmFzZSwgbWVudVJlZ2lzdGVyIH07XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9zY2FmZi9tZW51cy9iYXNlL21lbnVCYXNlLmpzXG4vLyBtb2R1bGUgaWQgPSAxMTlcbi8vIG1vZHVsZSBjaHVua3MgPSAxIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUFBO0FBQUE7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///119\n')},120:function(module,__webpack_exports__,__webpack_require__){"use strict";eval('/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return properHandles; });\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__core_prop_properHandle_js__ = __webpack_require__(121);\n\nvar properHandles = function properHandles() {\n    __WEBPACK_IMPORTED_MODULE_0__core_prop_properHandle_js__["a" /* default */].call(this);\n};\nproperHandles.prototype = new __WEBPACK_IMPORTED_MODULE_0__core_prop_properHandle_js__["a" /* default */]();\n\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTIwLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vc2NhZmYvcHJvcC9wcm9wZXJIYW5kbGUuanM/YzljYiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgcHJvcGVySGFuZGxlIGZyb20gJy4uLy4uL2NvcmUvcHJvcC9wcm9wZXJIYW5kbGUuanMnO1xudmFyIHByb3BlckhhbmRsZXMgPSBmdW5jdGlvbiBwcm9wZXJIYW5kbGVzKCkge1xuICAgIHByb3BlckhhbmRsZS5jYWxsKHRoaXMpO1xufTtcbnByb3BlckhhbmRsZXMucHJvdG90eXBlID0gbmV3IHByb3BlckhhbmRsZSgpO1xuXG5leHBvcnQgeyBwcm9wZXJIYW5kbGVzIGFzIHByb3BlckhhbmRsZSB9O1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vc2NhZmYvcHJvcC9wcm9wZXJIYW5kbGUuanNcbi8vIG1vZHVsZSBpZCA9IDEyMFxuLy8gbW9kdWxlIGNodW5rcyA9IDEiXSwibWFwcGluZ3MiOiJBQUFBO0FBQUE7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///120\n')},121:function(module,__webpack_exports__,__webpack_require__){"use strict";eval('/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_vue__ = __webpack_require__(1);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_vue___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_vue__);\n\n\nvar properHandle = function properHandle() {\n    this._vue = null;\n    this.ptComponet = null;\n    this.unwatchs = [];\n\n    this.extend = $.extend;\n\n    var ptMixin = {\n        template: "<div></div>",\n\n        methods: {}\n\n    };\n    this.ptComponet = __WEBPACK_IMPORTED_MODULE_0_vue___default.a.extend({\n        mixins: [ptMixin]\n    });\n};\n\nproperHandle.prototype.render = function (options) {\n    var _this = this;\n\n    this.options = this.extend({\n        el: "",\n        data: {},\n        html: "",\n        dataChange: function dataChange() {}\n\n    }, options);\n\n    var _data = JSON.parse(JSON.stringify(this.options.data)),\n        methods = this.extend({}, this.options.methods);\n\n    this.destroy();\n\n    this._vue = new this.ptComponet({\n        el: this.options.el,\n        data: function data() {\n            return _data;\n        },\n\n        template: "<div>" + this.options.html + "</div>",\n        methods: methods\n    });\n\n    for (var i in this.options.data) {\n        (function (tmpKey) {\n            var unwatch = _this._vue.$watch(tmpKey, function (newVal, oldVal) {\n                _this.options.dataChange(tmpKey, newVal, oldVal);\n            }, {\n                deep: true\n            });\n            _this.unwatchs.push(unwatch);\n        })(i);\n    }\n};\n//销毁实例vue对象\nproperHandle.prototype.destroy = function () {\n    if (this._vue) {\n        if (this.unwatchs.length > 0) {\n            this.unwatchs.forEach(function (unwatch) {\n\n                unwatch();\n            });\n            this.unwatchs = [];\n        }\n        this._vue.$destroy();\n        this._vue = null;\n    }\n};\n\n/* harmony default export */ __webpack_exports__["a"] = (properHandle);\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTIxLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vY29yZS9wcm9wL3Byb3BlckhhbmRsZS5qcz80YTFiIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBWdWUgZnJvbSAndnVlJztcblxudmFyIHByb3BlckhhbmRsZSA9IGZ1bmN0aW9uIHByb3BlckhhbmRsZSgpIHtcbiAgICB0aGlzLl92dWUgPSBudWxsO1xuICAgIHRoaXMucHRDb21wb25ldCA9IG51bGw7XG4gICAgdGhpcy51bndhdGNocyA9IFtdO1xuXG4gICAgdGhpcy5leHRlbmQgPSAkLmV4dGVuZDtcblxuICAgIHZhciBwdE1peGluID0ge1xuICAgICAgICB0ZW1wbGF0ZTogXCI8ZGl2PjwvZGl2PlwiLFxuXG4gICAgICAgIG1ldGhvZHM6IHt9XG5cbiAgICB9O1xuICAgIHRoaXMucHRDb21wb25ldCA9IFZ1ZS5leHRlbmQoe1xuICAgICAgICBtaXhpbnM6IFtwdE1peGluXVxuICAgIH0pO1xufTtcblxucHJvcGVySGFuZGxlLnByb3RvdHlwZS5yZW5kZXIgPSBmdW5jdGlvbiAob3B0aW9ucykge1xuICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICB0aGlzLm9wdGlvbnMgPSB0aGlzLmV4dGVuZCh7XG4gICAgICAgIGVsOiBcIlwiLFxuICAgICAgICBkYXRhOiB7fSxcbiAgICAgICAgaHRtbDogXCJcIixcbiAgICAgICAgZGF0YUNoYW5nZTogZnVuY3Rpb24gZGF0YUNoYW5nZSgpIHt9XG5cbiAgICB9LCBvcHRpb25zKTtcblxuICAgIHZhciBfZGF0YSA9IEpTT04ucGFyc2UoSlNPTi5zdHJpbmdpZnkodGhpcy5vcHRpb25zLmRhdGEpKSxcbiAgICAgICAgbWV0aG9kcyA9IHRoaXMuZXh0ZW5kKHt9LCB0aGlzLm9wdGlvbnMubWV0aG9kcyk7XG5cbiAgICB0aGlzLmRlc3Ryb3koKTtcblxuICAgIHRoaXMuX3Z1ZSA9IG5ldyB0aGlzLnB0Q29tcG9uZXQoe1xuICAgICAgICBlbDogdGhpcy5vcHRpb25zLmVsLFxuICAgICAgICBkYXRhOiBmdW5jdGlvbiBkYXRhKCkge1xuICAgICAgICAgICAgcmV0dXJuIF9kYXRhO1xuICAgICAgICB9LFxuXG4gICAgICAgIHRlbXBsYXRlOiBcIjxkaXY+XCIgKyB0aGlzLm9wdGlvbnMuaHRtbCArIFwiPC9kaXY+XCIsXG4gICAgICAgIG1ldGhvZHM6IG1ldGhvZHNcbiAgICB9KTtcblxuICAgIGZvciAodmFyIGkgaW4gdGhpcy5vcHRpb25zLmRhdGEpIHtcbiAgICAgICAgKGZ1bmN0aW9uICh0bXBLZXkpIHtcbiAgICAgICAgICAgIHZhciB1bndhdGNoID0gX3RoaXMuX3Z1ZS4kd2F0Y2godG1wS2V5LCBmdW5jdGlvbiAobmV3VmFsLCBvbGRWYWwpIHtcbiAgICAgICAgICAgICAgICBfdGhpcy5vcHRpb25zLmRhdGFDaGFuZ2UodG1wS2V5LCBuZXdWYWwsIG9sZFZhbCk7XG4gICAgICAgICAgICB9LCB7XG4gICAgICAgICAgICAgICAgZGVlcDogdHJ1ZVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBfdGhpcy51bndhdGNocy5wdXNoKHVud2F0Y2gpO1xuICAgICAgICB9KShpKTtcbiAgICB9XG59O1xuLy/plIDmr4Hlrp7kvot2dWXlr7nosaFcbnByb3BlckhhbmRsZS5wcm90b3R5cGUuZGVzdHJveSA9IGZ1bmN0aW9uICgpIHtcbiAgICBpZiAodGhpcy5fdnVlKSB7XG4gICAgICAgIGlmICh0aGlzLnVud2F0Y2hzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIHRoaXMudW53YXRjaHMuZm9yRWFjaChmdW5jdGlvbiAodW53YXRjaCkge1xuXG4gICAgICAgICAgICAgICAgdW53YXRjaCgpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB0aGlzLnVud2F0Y2hzID0gW107XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fdnVlLiRkZXN0cm95KCk7XG4gICAgICAgIHRoaXMuX3Z1ZSA9IG51bGw7XG4gICAgfVxufTtcblxuZXhwb3J0IGRlZmF1bHQgcHJvcGVySGFuZGxlO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vY29yZS9wcm9wL3Byb3BlckhhbmRsZS5qc1xuLy8gbW9kdWxlIGlkID0gMTIxXG4vLyBtb2R1bGUgY2h1bmtzID0gMSJdLCJtYXBwaW5ncyI6IkFBQUE7QUFBQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///121\n')},155:function(module,__webpack_exports__,__webpack_require__){"use strict";eval('/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__lib_comm_chart_check_js__ = __webpack_require__(156);\n\nvar crsCheck = function crsCheck() {\n    __WEBPACK_IMPORTED_MODULE_0__lib_comm_chart_check_js__["a" /* default */].call(this);\n    this.base = new __WEBPACK_IMPORTED_MODULE_0__lib_comm_chart_check_js__["a" /* default */]();\n\n    this.island = function (json) {\n        //自定义\n        return this.base.island(json);\n    };\n};\n\n/* harmony default export */ __webpack_exports__["a"] = (crsCheck);\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTU1LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vc2NhZmYvY2hhcnQvY3JzQ2hpbGQvY3JzQ2hlY2suanM/MDFhMiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgY2hlY2tCYXNlIGZyb20gXCIuLi8uLi8uLi9saWIvY29tbS9jaGFydC9jaGVjay5qc1wiO1xudmFyIGNyc0NoZWNrID0gZnVuY3Rpb24gY3JzQ2hlY2soKSB7XG4gICAgY2hlY2tCYXNlLmNhbGwodGhpcyk7XG4gICAgdGhpcy5iYXNlID0gbmV3IGNoZWNrQmFzZSgpO1xuXG4gICAgdGhpcy5pc2xhbmQgPSBmdW5jdGlvbiAoanNvbikge1xuICAgICAgICAvL+iHquWumuS5iVxuICAgICAgICByZXR1cm4gdGhpcy5iYXNlLmlzbGFuZChqc29uKTtcbiAgICB9O1xufTtcblxuZXhwb3J0IGRlZmF1bHQgY3JzQ2hlY2s7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9zY2FmZi9jaGFydC9jcnNDaGlsZC9jcnNDaGVjay5qc1xuLy8gbW9kdWxlIGlkID0gMTU1XG4vLyBtb2R1bGUgY2h1bmtzID0gMSJdLCJtYXBwaW5ncyI6IkFBQUE7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///155\n')},156:function(module,__webpack_exports__,__webpack_require__){"use strict";eval('var check = function check() {\n\n    /**\r\n     * 检测合法性 \r\n        参数： \r\n         {string} funcNames 方法名 多方法以空格隔开 \r\n         {object} json数据 图形控件.toJson的返回值  \r\n    */\n    this.check = function (funcNames, json) {\n        var _this = this;\n\n        var blg = true;\n        var funcArr = funcNames.replace(/\\s+/g, " ").trim(),\n            blgArr = [];\n\n        funcArr.split(" ").forEach(function (funcName) {\n            if (funcName in _this) {\n                blgArr.push(_this[funcName](json));\n            }\n        });\n\n        blgArr.forEach(function (bl) {\n            blg = blg && bl;\n            if (blg === false) {\n                return false;\n            }\n        });\n\n        return blg;\n    };\n\n    // 空函数\n    this.none = function (json) {\n        return true;\n    };\n\n    // 检测闭环\n    this.closedLoop = function (json) {\n        if (typeof json === "undefined") {\n            return true;\n        }\n        if (!"connections" in json) {\n            return true;\n        }\n        var connections = json.connections,\n            nodes = [],\n            pageTargetIds = [];\n\n        var addNodes = function addNodes(sourceId, targetId) {\n            var hasSourceNode = false,\n                hasTargetNode = false;\n            nodes.forEach(function (n) {\n                if (n.id === sourceId) {\n                    hasSourceNode = true;\n                    n.targetIds.push(targetId);\n                }\n                if (n.id === targetId) {\n                    hasTargetNode = true;\n                    n.sourceIds.push(sourceId);\n                }\n            });\n\n            if (hasSourceNode === false) {\n                nodes.push({\n                    id: sourceId,\n                    targetIds: [targetId],\n                    sourceIds: []\n                });\n                if (sourceId === targetId) {\n                    nodes[nodes.length - 1].sourceIds.push(sourceId);\n                }\n            }\n            if (hasTargetNode === false) {\n                nodes.push({\n                    id: targetId,\n                    targetIds: [],\n                    sourceIds: [sourceId]\n                });\n            }\n        };\n\n        connections.forEach(function (c) {\n            addNodes(c.pageSourceId, c.pageTargetId);\n        });\n\n        var blg = true;\n        nodes.forEach(function (n) {\n            var sourceIds = n.sourceIds;\n            sourceIds.forEach(function (sid) {\n                n.targetIds.forEach(function (tid) {\n                    if (sid === tid) {\n                        blg = false;\n                        return false;\n                    }\n                });\n            });\n        });\n\n        return blg;\n    };\n\n    //检测 孤立节点\n    this.island = function (json) {\n        if (typeof json === "undefined") {\n            return true;\n        }\n        if (!("connections" in json && "nodes" in json)) {\n            return true;\n        }\n\n        var connections = json.connections,\n            nodes = json.nodes,\n            blg = true;\n\n        nodes.forEach(function (n) {\n            var id = n.elId,\n                hasNode = false;\n\n            connections.forEach(function (c) {\n                if (id === c.pageSourceId) {\n                    hasNode = true;\n                    return false;\n                }\n\n                if (id === c.pageTargetId) {\n                    hasNode = true;\n                    return false;\n                }\n            });\n\n            if (!hasNode) {\n                blg = false;\n                return false;\n            }\n        });\n\n        return blg;\n    };\n};\n\n/* harmony default export */ __webpack_exports__["a"] = (check);\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTU2LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbGliL2NvbW0vY2hhcnQvY2hlY2suanM/NjM2MCJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgY2hlY2sgPSBmdW5jdGlvbiBjaGVjaygpIHtcblxuICAgIC8qKlxyXG4gICAgICog5qOA5rWL5ZCI5rOV5oCnIFxyXG4gICAgICAgIOWPguaVsO+8miBcclxuICAgICAgICAge3N0cmluZ30gZnVuY05hbWVzIOaWueazleWQjSDlpJrmlrnms5Xku6XnqbrmoLzpmpTlvIAgXHJcbiAgICAgICAgIHtvYmplY3R9IGpzb27mlbDmja4g5Zu+5b2i5o6n5Lu2LnRvSnNvbueahOi/lOWbnuWAvCAgXHJcbiAgICAqL1xuICAgIHRoaXMuY2hlY2sgPSBmdW5jdGlvbiAoZnVuY05hbWVzLCBqc29uKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICAgICAgdmFyIGJsZyA9IHRydWU7XG4gICAgICAgIHZhciBmdW5jQXJyID0gZnVuY05hbWVzLnJlcGxhY2UoL1xccysvZywgXCIgXCIpLnRyaW0oKSxcbiAgICAgICAgICAgIGJsZ0FyciA9IFtdO1xuXG4gICAgICAgIGZ1bmNBcnIuc3BsaXQoXCIgXCIpLmZvckVhY2goZnVuY3Rpb24gKGZ1bmNOYW1lKSB7XG4gICAgICAgICAgICBpZiAoZnVuY05hbWUgaW4gX3RoaXMpIHtcbiAgICAgICAgICAgICAgICBibGdBcnIucHVzaChfdGhpc1tmdW5jTmFtZV0oanNvbikpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcblxuICAgICAgICBibGdBcnIuZm9yRWFjaChmdW5jdGlvbiAoYmwpIHtcbiAgICAgICAgICAgIGJsZyA9IGJsZyAmJiBibDtcbiAgICAgICAgICAgIGlmIChibGcgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcblxuICAgICAgICByZXR1cm4gYmxnO1xuICAgIH07XG5cbiAgICAvLyDnqbrlh73mlbBcbiAgICB0aGlzLm5vbmUgPSBmdW5jdGlvbiAoanNvbikge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9O1xuXG4gICAgLy8g5qOA5rWL6Zet546vXG4gICAgdGhpcy5jbG9zZWRMb29wID0gZnVuY3Rpb24gKGpzb24pIHtcbiAgICAgICAgaWYgKHR5cGVvZiBqc29uID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIVwiY29ubmVjdGlvbnNcIiBpbiBqc29uKSB7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgY29ubmVjdGlvbnMgPSBqc29uLmNvbm5lY3Rpb25zLFxuICAgICAgICAgICAgbm9kZXMgPSBbXSxcbiAgICAgICAgICAgIHBhZ2VUYXJnZXRJZHMgPSBbXTtcblxuICAgICAgICB2YXIgYWRkTm9kZXMgPSBmdW5jdGlvbiBhZGROb2Rlcyhzb3VyY2VJZCwgdGFyZ2V0SWQpIHtcbiAgICAgICAgICAgIHZhciBoYXNTb3VyY2VOb2RlID0gZmFsc2UsXG4gICAgICAgICAgICAgICAgaGFzVGFyZ2V0Tm9kZSA9IGZhbHNlO1xuICAgICAgICAgICAgbm9kZXMuZm9yRWFjaChmdW5jdGlvbiAobikge1xuICAgICAgICAgICAgICAgIGlmIChuLmlkID09PSBzb3VyY2VJZCkge1xuICAgICAgICAgICAgICAgICAgICBoYXNTb3VyY2VOb2RlID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgbi50YXJnZXRJZHMucHVzaCh0YXJnZXRJZCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChuLmlkID09PSB0YXJnZXRJZCkge1xuICAgICAgICAgICAgICAgICAgICBoYXNUYXJnZXROb2RlID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgbi5zb3VyY2VJZHMucHVzaChzb3VyY2VJZCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIGlmIChoYXNTb3VyY2VOb2RlID09PSBmYWxzZSkge1xuICAgICAgICAgICAgICAgIG5vZGVzLnB1c2goe1xuICAgICAgICAgICAgICAgICAgICBpZDogc291cmNlSWQsXG4gICAgICAgICAgICAgICAgICAgIHRhcmdldElkczogW3RhcmdldElkXSxcbiAgICAgICAgICAgICAgICAgICAgc291cmNlSWRzOiBbXVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIGlmIChzb3VyY2VJZCA9PT0gdGFyZ2V0SWQpIHtcbiAgICAgICAgICAgICAgICAgICAgbm9kZXNbbm9kZXMubGVuZ3RoIC0gMV0uc291cmNlSWRzLnB1c2goc291cmNlSWQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChoYXNUYXJnZXROb2RlID09PSBmYWxzZSkge1xuICAgICAgICAgICAgICAgIG5vZGVzLnB1c2goe1xuICAgICAgICAgICAgICAgICAgICBpZDogdGFyZ2V0SWQsXG4gICAgICAgICAgICAgICAgICAgIHRhcmdldElkczogW10sXG4gICAgICAgICAgICAgICAgICAgIHNvdXJjZUlkczogW3NvdXJjZUlkXVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuXG4gICAgICAgIGNvbm5lY3Rpb25zLmZvckVhY2goZnVuY3Rpb24gKGMpIHtcbiAgICAgICAgICAgIGFkZE5vZGVzKGMucGFnZVNvdXJjZUlkLCBjLnBhZ2VUYXJnZXRJZCk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHZhciBibGcgPSB0cnVlO1xuICAgICAgICBub2Rlcy5mb3JFYWNoKGZ1bmN0aW9uIChuKSB7XG4gICAgICAgICAgICB2YXIgc291cmNlSWRzID0gbi5zb3VyY2VJZHM7XG4gICAgICAgICAgICBzb3VyY2VJZHMuZm9yRWFjaChmdW5jdGlvbiAoc2lkKSB7XG4gICAgICAgICAgICAgICAgbi50YXJnZXRJZHMuZm9yRWFjaChmdW5jdGlvbiAodGlkKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChzaWQgPT09IHRpZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgYmxnID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcblxuICAgICAgICByZXR1cm4gYmxnO1xuICAgIH07XG5cbiAgICAvL+ajgOa1iyDlraTnq4voioLngrlcbiAgICB0aGlzLmlzbGFuZCA9IGZ1bmN0aW9uIChqc29uKSB7XG4gICAgICAgIGlmICh0eXBlb2YganNvbiA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCEoXCJjb25uZWN0aW9uc1wiIGluIGpzb24gJiYgXCJub2Rlc1wiIGluIGpzb24pKSB7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBjb25uZWN0aW9ucyA9IGpzb24uY29ubmVjdGlvbnMsXG4gICAgICAgICAgICBub2RlcyA9IGpzb24ubm9kZXMsXG4gICAgICAgICAgICBibGcgPSB0cnVlO1xuXG4gICAgICAgIG5vZGVzLmZvckVhY2goZnVuY3Rpb24gKG4pIHtcbiAgICAgICAgICAgIHZhciBpZCA9IG4uZWxJZCxcbiAgICAgICAgICAgICAgICBoYXNOb2RlID0gZmFsc2U7XG5cbiAgICAgICAgICAgIGNvbm5lY3Rpb25zLmZvckVhY2goZnVuY3Rpb24gKGMpIHtcbiAgICAgICAgICAgICAgICBpZiAoaWQgPT09IGMucGFnZVNvdXJjZUlkKSB7XG4gICAgICAgICAgICAgICAgICAgIGhhc05vZGUgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgaWYgKGlkID09PSBjLnBhZ2VUYXJnZXRJZCkge1xuICAgICAgICAgICAgICAgICAgICBoYXNOb2RlID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICBpZiAoIWhhc05vZGUpIHtcbiAgICAgICAgICAgICAgICBibGcgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHJldHVybiBibGc7XG4gICAgfTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IGNoZWNrO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbGliL2NvbW0vY2hhcnQvY2hlY2suanNcbi8vIG1vZHVsZSBpZCA9IDE1NlxuLy8gbW9kdWxlIGNodW5rcyA9IDEiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///156\n')},157:function(module,__webpack_exports__,__webpack_require__){"use strict";eval('/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__base_chartBase_js__ = __webpack_require__(158);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__base_chartController_js__ = __webpack_require__(67);\n\n\n\nvar crschartController = function crschartController(select, options) {\n    //继承\n    __WEBPACK_IMPORTED_MODULE_1__base_chartController_js__["a" /* default */].call(this, select, options);\n    //设置 base对象\n    this.base = new __WEBPACK_IMPORTED_MODULE_1__base_chartController_js__["a" /* default */]();\n    //创建图形\n    this.createFlow(__WEBPACK_IMPORTED_MODULE_0__base_chartBase_js__["a" /* default */]);\n    //绑定chart引用\n    this.base.chart = this.chart;\n\n    /** \r\n        开始覆写 xxxx\r\n    */\n    this.fromJson = function (json, option) {\n        this.base.fromJson(json, option);\n    };\n};\n\n/* harmony default export */ __webpack_exports__["a"] = (crschartController);\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTU3LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vc2NhZmYvY2hhcnQvY3JzQ2hpbGQvY3JzY2hhcnRDb250cm9sbGVyLmpzP2QwZGIiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IENoYXJ0IGZyb20gJy4uL2Jhc2UvY2hhcnRCYXNlLmpzJztcbmltcG9ydCBjaGFydENvbnRyb2xsZXIgZnJvbSAnLi4vYmFzZS9jaGFydENvbnRyb2xsZXIuanMnO1xuXG52YXIgY3JzY2hhcnRDb250cm9sbGVyID0gZnVuY3Rpb24gY3JzY2hhcnRDb250cm9sbGVyKHNlbGVjdCwgb3B0aW9ucykge1xuICAgIC8v57un5om/XG4gICAgY2hhcnRDb250cm9sbGVyLmNhbGwodGhpcywgc2VsZWN0LCBvcHRpb25zKTtcbiAgICAvL+iuvue9riBiYXNl5a+56LGhXG4gICAgdGhpcy5iYXNlID0gbmV3IGNoYXJ0Q29udHJvbGxlcigpO1xuICAgIC8v5Yib5bu65Zu+5b2iXG4gICAgdGhpcy5jcmVhdGVGbG93KENoYXJ0KTtcbiAgICAvL+e7keWummNoYXJ05byV55SoXG4gICAgdGhpcy5iYXNlLmNoYXJ0ID0gdGhpcy5jaGFydDtcblxuICAgIC8qKiBcclxuICAgICAgICDlvIDlp4vopoblhpkgeHh4eFxyXG4gICAgKi9cbiAgICB0aGlzLmZyb21Kc29uID0gZnVuY3Rpb24gKGpzb24sIG9wdGlvbikge1xuICAgICAgICB0aGlzLmJhc2UuZnJvbUpzb24oanNvbiwgb3B0aW9uKTtcbiAgICB9O1xufTtcblxuZXhwb3J0IGRlZmF1bHQgY3JzY2hhcnRDb250cm9sbGVyO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vc2NhZmYvY2hhcnQvY3JzQ2hpbGQvY3JzY2hhcnRDb250cm9sbGVyLmpzXG4vLyBtb2R1bGUgaWQgPSAxNTdcbi8vIG1vZHVsZSBjaHVua3MgPSAxIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUFBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///157\n')},158:function(module,__webpack_exports__,__webpack_require__){"use strict";eval('/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__core_chart_chart_js__ = __webpack_require__(159);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__chartNodeBase_js__ = __webpack_require__(161);\n\n\n\nvar chartBase = function chartBase(container, options) {\n\n    __WEBPACK_IMPORTED_MODULE_0__core_chart_chart_js__["a" /* default */].call(this, container, options);\n\n    this.base = new __WEBPACK_IMPORTED_MODULE_0__core_chart_chart_js__["a" /* default */]();\n\n    this.ChartNode = __WEBPACK_IMPORTED_MODULE_1__chartNodeBase_js__["a" /* default */];\n\n    /**\r\n     * 添加起点\r\n     * @param {obj} options node参数\r\n     */\n    this.addNodeStart = function (options) {\n        options = $.extend({\n            html: \'\\n            <div class="window task taskcircle taskcirclestart">\\n            </div> \\n            \'\n        }, options);\n        var node = this.base.addNode.call(this, options);\n        var _this = this;\n\n        node.addSmallPort({\n            isSource: true,\n            dragOptions: {\n                stop: function stop(e) {\n\n                    var connections = _this._jsPlumb.getConnections({\n                        source: $(e.drag.el).attr("elid")\n                    });\n\n                    _this.bindConnections(connections, this._nodes, this.options);\n                }\n            }\n        });\n        return node;\n    };\n\n    /**\r\n     * 添加终点\r\n     * @param {obj} options node参数\r\n     */\n    this.addNodeEnd = function (options) {\n        options = $.extend({\n            html: \'\\n            <div class="window task taskcircle taskcirclend">\\n            </div> \\n            \'\n        }, options);\n        var node = this.base.addNode.call(this, options);\n        node.addSmallPort({\n            isTarget: true,\n            position: \'Top\'\n        });\n        return node;\n    };\n\n    /**\r\n     * 起点连接线\r\n     * @param {obj} item connection参数\r\n     */\n    this.connectStart = function (item) {\n        this._jsPlumb.makeTarget(item.pageTargetId, {\n            anchor: "Top",\n            isTarget: true,\n            maxConnections: -1\n        });\n\n        return this._jsPlumb.connect({\n            source: item.pageSourceId,\n            target: item.pageTargetId,\n            deleteEndpointsOnDetach: true,\n\n            paintStyle: {\n                stroke: "#1fb139",\n                strokeWidth: 2\n            },\n            connector: ["Bezier", {\n                curviness: 100\n            }],\n            endpoints: [["Dot", {\n                radius: 4\n            }], ["Dot", {\n                radius: 6,\n                cssClass: "jspl-point-top"\n            }]],\n            endpointStyles: [{\n                fillStyle: \'#1fb139\'\n            }, {\n                fill: "#f65d3b",\n                stroke: "rgba(0,0,0,0)",\n                strokeWidth: 8\n            }]\n        });\n    };\n\n    /**\r\n     * 终点连接线\r\n     * @param {obj} item connection参数\r\n     */\n    this.connectEnd = function (item) {\n        this._jsPlumb.makeTarget(item.pageTargetId, {\n            anchor: "Top",\n            isTarget: true,\n            maxConnections: -1\n        });\n\n        return this._jsPlumb.connect({\n            source: item.pageSourceId,\n            target: item.pageTargetId,\n            deleteEndpointsOnDetach: true,\n\n            paintStyle: {\n                stroke: "#0096f2",\n                strokeWidth: 2\n            },\n            connector: ["Bezier", {\n                curviness: 100\n            }],\n            endpoints: [["Dot", {\n                radius: 6\n            }], ["Dot", {\n                radius: 4,\n                cssClass: "jspl-point-top"\n            }]],\n            endpointStyles: [{\n                fillStyle: \'#0096f2\'\n            }, {\n                fill: "#f65d3b",\n                stroke: "rgba(0,0,0,0)",\n                strokeWidth: 8\n            }]\n        });\n    };\n\n    /**\r\n     *  图形导出为json\r\n     *  重写基础类\r\n     */\n    this.toJson = function () {\n        var _this2 = this;\n\n        // 获取所有节点\n        var nodes = [];\n        this._nodes.forEach(function (item) {\n\n            nodes.push(item.toPlainObj());\n        });\n\n        // 获取所有连接\n        var connections = this._jsPlumb.getAllConnections().map(function (connection) {\n\n            var rJson = {\n                connectionId: connection.id,\n                pageSourceId: connection.sourceId,\n                pageTargetId: connection.targetId\n            };\n\n            var sourceNode = _this2.getNodeById(connection.sourceId);\n\n            if (sourceNode._options && sourceNode._options.nodeStyle === "start") {\n                rJson.nodeStyle = "start";\n            } else {\n                var targetNode = _this2.getNodeById(connection.targetId);\n                if (targetNode._options && targetNode._options.nodeStyle === "end") {\n                    rJson.nodeStyle = "end";\n                }\n            }\n\n            return rJson;\n        });\n\n        return {\n            nodes: nodes,\n            connections: connections\n        };\n    };\n\n    /**\r\n     * 渲染节点\r\n     * @param {obj} nodes nodes数组\r\n     * @param {obj} options options 来自fromJson的输入参数 {creat,useStart,useEnd}\r\n     * \r\n     * 覆写基础类 \r\n     */\n    this.renderNodes = function (nodes, options) {\n        var _this3 = this;\n\n        this.base.renderNodes.call(this, nodes, options);\n\n        options = $.extend({\n            useStart: true,\n            useEnd: true\n        }, options);\n\n        var startBlg = true,\n            endBlg = true;\n\n        if (options.useStart) {\n            startBlg = false;\n        }\n        if (options.useEnd) {\n            endBlg = false;\n        }\n\n        nodes && nodes.forEach(function (item) {\n            var op = {\n                name: item.name,\n                point: {\n                    x: item._x,\n                    y: item._y\n                },\n                data: item,\n                class: item.className,\n                removable: item.removable,\n                nodeId: item.nodeId,\n                unPort: true,\n                nodeStyle: item.nodeStyle\n            };\n\n            switch (item.nodeStyle) {\n                case "start":\n                    _this3.addNodeStart(op);\n                    startBlg = true;\n                    break;\n                case "end":\n                    _this3.addNodeEnd(op);\n                    endBlg = true;\n                    break;\n            }\n        });\n\n        if (!startBlg) {\n            this.addNodeStart({\n                name: \'\',\n                point: {\n                    x: 25,\n                    y: 25\n                },\n                class: \'\',\n                removable: false,\n                nodeId: null,\n                data: {},\n                creat: false,\n                unPort: true,\n                nodeStyle: "start"\n            });\n        }\n        if (!endBlg) {\n            this.addNodeEnd({\n                name: \'\',\n                point: {\n                    x: 25,\n                    y: 210\n                },\n                class: \'\',\n                removable: false,\n                nodeId: null,\n                data: {},\n                creat: false,\n                unPort: true,\n                nodeStyle: "end"\n            });\n        }\n    };\n\n    /**\r\n     * 渲染连接线与点\r\n     * @param {obj} connections connections数组\r\n     * \r\n     * 覆写基础类 \r\n     */\n    this.renderConnections = function (connections, nodes, options) {\n        var _this4 = this;\n\n        this.base.renderConnections.call(this, connections, nodes, options);\n\n        connections && connections.forEach(function (item) {\n            var connect = null;\n            switch (item.nodeStyle) {\n                case "start":\n\n                    connect = _this4.connectStart(item);\n                    break;\n                case "end":\n\n                    connect = _this4.connectEnd(item);\n                    break;\n            }\n            if (connect) {\n                var node = _this4.getNodeById(item.pageSourceId);\n\n                node.connectorEvent.init(node, connect, options);\n            }\n        });\n    };\n};\n\nchartBase.prototype = new __WEBPACK_IMPORTED_MODULE_0__core_chart_chart_js__["a" /* default */]();\n\n/* harmony default export */ __webpack_exports__["a"] = (chartBase);\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///158\n')},159:function(module,__webpack_exports__,__webpack_require__){"use strict";eval("/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__jsPlumb_js__ = __webpack_require__(160);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__jsPlumb_js___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0__jsPlumb_js__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__chartNode_js__ = __webpack_require__(85);\n\n\n\n/**\r\n * @class 画布  基于jsplumb.js?v= 2.6.9 开发\r\n */\nvar Chart = function Chart(container, options) {\n    if (arguments.length < 2) {\n        return;\n    }\n    this.ChartNode = __WEBPACK_IMPORTED_MODULE_1__chartNode_js__[\"a\" /* default */];\n    this._jsPlumb = null;\n    this._container = container;\n    this.options = $.extend({\n        nodeDbClick: function nodeDbClick() {},\n        nodeClick: function nodeClick() {},\n        contentClick: function contentClick() {},\n        nodeDel: function nodeDel() {},\n        nodeInputBlur: function nodeInputBlur() {},\n        nodeMouseenter: function nodeMouseenter() {},\n        nodeMouseleave: function nodeMouseleave() {}\n    }, options);\n    this._nodes = [];\n    this._seedName = 'n';\n    this._seedId = 0;\n\n    this.init();\n};\n\nChart.prototype.nodeId = function () {\n    return this._seedName + this._seedId++ + new Date().getTime().toString().substring(3);\n};\n\n/**\r\n * 初始化方法\r\n * @param  {Object} [options] 初始化参数\r\n * @param {Function} [options.onNodeClick] 节点点击事件回调函数，参数为节点绑定的数据\r\n */\nChart.prototype.init = function () {\n    var _this2 = this;\n\n    this._jsPlumb = __WEBPACK_IMPORTED_MODULE_0__jsPlumb_js___default.a.jsPlumb.getInstance();\n    this._jsPlumb.importDefaults({\n        ConnectionOverlays: [[\"PlainArrow\", {\n            width: 15,\n            location: 1, //[ 0, 1 ],\n            id: \"arrow\",\n            length: 8\n        }]],\n        Endpoints: [//https://jsplumbtoolkit.com/community/apidocs/classes/Endpoints.Dot.html \n        [\"Dot\", {\n            radius: 6,\n            cssClass: \"jspl-point-bottom\"\n\n        }], [\"Dot\", {\n            radius: 6,\n            cssClass: \"jspl-point-top\"\n\n        }]],\n        EndpointStyles: [{\n            fillStyle: '#f65d3b'\n        }, {\n            fillStyle: '#0096f2'\n        }]\n\n    });\n\n    this._container.addClass('flow-chart-canvas-lkiarest');\n\n    var _this = this;\n    // 节点点击事件\n    this._container.on('click', '.task', function (e) {\n\n        var $t = $(this);\n        var node = _this.getNodeById($t.attr('id'));\n\n        _this.options.nodeClick(node._data, node);\n\n        e.stopPropagation();\n    })\n    // 节点双击事件\n    .on('dblclick', '.task', function (e) {\n\n        var $t = $(this);\n        var node = _this.getNodeById($t.attr('id'));\n\n        _this.options.nodeDbClick.call(_this, node._data, node);\n        e.stopPropagation();\n    }).on('blur', '.task > input', function (e) {\n        var $t = $(this),\n            $task = $t.parents('.task');\n        var node = _this.getNodeById($task.attr('id'));\n        var val = $t.val(),\n            data = node.getData();\n        node._name = val;\n\n        $task.children('span.node-flow-name').text(node._name);\n\n        _this.options.nodeInputBlur.call(_this, node._data, node);\n        e.stopPropagation();\n    })\n    // 画布空白点击事件\n    .on('click', function (e) {\n\n        _this.options.contentClick.call(_this);\n\n        e.stopPropagation();\n    });\n\n    // 删除节点\n    this._container.on('click', '.remove', function (event) {\n        var nodeId = $(event.target).parent().attr('id'),\n            delNode = _this.getNodeById(nodeId),\n            data = null;\n        if (delNode) {\n            data = delNode.getData();\n        }\n\n        if (_this.options.nodeDel.cover) {\n            _this.options.nodeDel.call(_this, data, delNode);\n        } else {\n\n            if (delNode) {\n\n                delNode.dispose();\n                _this2.removeNode(nodeId);\n            }\n            _this.options.nodeDel.call(_this, data, delNode);\n        }\n        event.stopPropagation();\n    });\n    //节点 悬停\n    this._container.parent().on('mouseenter', '.task.node-process', function (event) {\n        var node = _this.getNodeById($(this).attr('id'));\n\n        _this.options.nodeMouseenter.call(_this, node);\n    }).on('mouseleave', '.task.node-process', function (event) {\n        var node = _this.getNodeById($(this).attr('id'));\n        _this.options.nodeMouseleave.call(_this, node);\n    });\n};\n\n/**\r\n * 添加新节点\r\n * @param {String} name    节点名称\r\n * @param {Number} x       节点x坐标\r\n * @param {Number} y       节点y坐标\r\n * @param {Object} options 节点参数，可参考 {class ChartNode} 构造参数\r\n * @param {String} [options.id] 节点id，若未定义则由系统自动分配\r\n * @param {string} html dom内容\r\n */\nChart.prototype.addNode = function (options) {\n    //name, x, y,\n    var nodeId = options && options.nodeId || this.nodeId();\n    var node = new this.ChartNode(nodeId, options);\n    node.setPlumb(this._jsPlumb);\n    node.setContainer(this._container);\n\n    var html = \"\";\n    if (!options.html) {\n        html = '\\n        <div class=\"window task\">\\n            <span class=\"node-flow-name\">' + node._name + '</span>\\n            <input value=\"' + node._name + '\"/>\\n        </div>\\n        ';\n    } else {\n        html = options.html;\n    }\n    var npt = {\n        removable: options.removable,\n        container: this._container,\n        elementCallback: function elementCallback(node, el) {\n            if (typeof options.creat === \"string\") {\n                var c = new Function(\"node\", \"el\", '(' + options.creat + ')(node,el)');\n\n                c(node, el);\n            } else if (typeof options.creat === \"function\") {\n                options.creat(node, el);\n            }\n        },\n        html: html\n    };\n\n    node.createElemt(npt);\n\n    this._nodes.push(node);\n\n    var _this = this;\n    if (!options.unPort) {\n        node.addPort({\n            isSource: true,\n            dragOptions: {\n                stop: function stop(e) {\n\n                    var connections = _this._jsPlumb.getConnections({\n                        source: $(e.drag.el).attr(\"elid\")\n                    });\n\n                    _this.bindConnections(connections, this._nodes, this.options);\n                }\n            }\n        });\n\n        node.addPort({\n            isTarget: true,\n            position: 'Top',\n            dragOptions: {\n                stop: function stop(e) {\n                    // console.log(\"top\",e)\n                    //var r = this.getConnections({\n                    //   source:\n                    //   target:\n                    //});\n                }\n            }\n        });\n    } else {}\n\n    return node;\n};\n\n/**\r\n * 删除节点\r\n * @param {String} nodeId 节点ID \r\n */\nChart.prototype.removeNode = function (nodeId) {\n    var nodes = this._nodes;\n    for (var i = 0, len = nodes.length; i < len; i++) {\n        var node = nodes[i];\n        if (node.getId() === nodeId) {\n            node.dispose();\n            nodes.splice(i, 1);\n            return node;\n        }\n    }\n};\n\n//获得所有节点\nChart.prototype.getNodes = function () {\n    return this._nodes;\n};\n\n//获得某个节点 根据nodeId \nChart.prototype.getNodeById = function (id) {\n    var l = this._nodes;\n    for (var i = 0; i < l.length; i++) {\n        if (l[i]._id === id) {\n            return l[i];\n        }\n    }\n    return null;\n};\n\n/**\r\n * 序列化以保存\r\n */\nChart.prototype.toJson = function () {\n    // 获取所有节点\n    var nodes = [];\n    this._nodes.forEach(function (item) {\n\n        nodes.push(item.toPlainObj());\n    });\n\n    // 获取所有连接\n    var connections = this._jsPlumb.getAllConnections().map(function (connection) {\n        return {\n            connectionId: connection.id,\n            pageSourceId: connection.sourceId,\n            pageTargetId: connection.targetId\n        };\n    });\n\n    return {\n        nodes: nodes,\n        connections: connections\n    };\n};\n\n/**\r\n * 反序列化保存的数据并绘制流程图\r\n */\nChart.prototype.fromJson = function (jsonStr, options) {\n    if (!jsonStr || jsonStr === '') {\n        console.error('draw from json failed: empty json string');\n        reutrn;\n    }\n\n    if (!options) {\n        options = {};\n    }\n\n    this.options = $.extend(this.options, Object.assign({}, options));\n\n    var jsonObj = null;\n\n    try {\n        if (typeof jsonStr === \"string\") {\n            jsonObj = JSON.parse(jsonStr);\n        } else {\n            jsonObj = jsonStr;\n        }\n    } catch (e) {\n        console.error('invalid json string', e);\n        return;\n    }\n\n    this.clear();\n\n    var nodes = jsonObj.nodes;\n    var connections = jsonObj.connections;\n\n    this.renderNodes(nodes, this.options);\n\n    this.renderConnections(connections, nodes, this.options);\n\n    this._jsPlumb.repaintEverything();\n};\n\n/**\r\n * 渲染节点\r\n * @param {obj} nodes nodes数组\r\n * @param {obj} options options 来自fromJson的输入参数 {creat,useStart,useEnd}\r\n */\nChart.prototype.renderNodes = function (nodes, options) {\n    var _this3 = this;\n\n    nodes && nodes.forEach(function (item) {\n        if (!item.nodeStyle || item.nodeStyle === \"normal\") {\n            var node = _this3.addNode($.extend(options, {\n                name: item.name,\n                point: {\n                    x: item._x,\n                    y: item._y\n                },\n                class: item.className,\n                removable: item.removable,\n                nodeId: item.nodeId,\n                data: item\n            }));\n            _this3._jsPlumb.repaint(item.elId);\n        }\n    });\n};\n\n/**\r\n * 渲染连接线与点\r\n * @param {obj} connections connections数组\r\n * param {obj} options options 来自fromJson的输入参数 \r\n */\nChart.prototype.renderConnections = function (connections, nodes, options) {\n    var _this4 = this;\n\n    connections && connections.forEach(function (item) {\n\n        if (!item.nodeStyle || item.nodeStyle === \"normal\") {\n            _this4._jsPlumb.makeTarget(item.pageTargetId, {\n                anchor: \"Top\",\n                isTarget: true,\n                maxConnections: -1,\n                endpoint: [\"Dot\", {\n                    radius: 6,\n                    cssClass: \"jspl-point-top\",\n                    hoverClass: \"jspl-point-bottom-hover\"\n                }],\n                paintStyle: {\n                    fill: \"#f65d3b\",\n                    stroke: \"rgba(0,0,0,0)\",\n                    strokeWidth: 8\n                }\n\n            });\n\n            var connect = _this4._jsPlumb.connect({\n                source: item.pageSourceId,\n                target: item.pageTargetId,\n                deleteEndpointsOnDetach: true,\n\n                paintStyle: {\n                    stroke: \"#0096f2\",\n                    strokeWidth: 2\n                },\n                connector: [\"Bezier\", {\n                    curviness: 100\n                }]\n\n            });\n\n            var node = _this4.getNodeById(item.pageSourceId);\n\n            node.connectorEvent.init(node, connect, options);\n        }\n    });\n};\n\n/**\r\n * 重新绑定connector线条事件\r\n */\nChart.prototype.bindConnections = function (connections, nodes, options) {\n    var _this5 = this;\n\n    connections && connections.forEach(function (item) {\n\n        var node = _this5.getNodeById(item.sourceId);\n\n        node.connectorEvent.init(node, item, options);\n    });\n};\n\n/**\r\n * 清除画布中的元素\r\n */\nChart.prototype.clear = function () {\n    this._nodes && this._nodes.forEach(function (item) {\n        item.dispose();\n    });\n\n    this._nodes = [];\n    this._jsPlumb.deleteEveryEndpoint(this._container);\n    this._jsPlumb.removeAllEndpoints(this._container);\n};\n\n/**\r\n * 销毁释放\r\n */\nChart.prototype.dispose = function () {\n    this.clear();\n    this._container.off('click'); // unbind events\n    this._container = null;\n};\n\nChart.ready = function (callback) {\n    jsPlumb.ready(callback);\n};\n\n/* harmony default export */ __webpack_exports__[\"a\"] = (Chart);\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///159\n")},160:function(module,exports,__webpack_require__){eval('var _typeof=typeof Symbol==="function"&&typeof Symbol.iterator==="symbol"?function(obj){return typeof obj;}:function(obj){return obj&&typeof Symbol==="function"&&obj.constructor===Symbol&&obj!==Symbol.prototype?"symbol":typeof obj;};/**\r\n * jsBezier\r\n *\r\n * Copyright (c) 2010 - 2017 jsPlumb (hello@jsplumbtoolkit.com)\r\n *\r\n * licensed under the MIT license.\r\n *\r\n * a set of Bezier curve functions that deal with Beziers, used by jsPlumb, and perhaps useful for other people.  These functions work with Bezier\r\n * curves of arbitrary degree.\r\n *\r\n * - functions are all in the \'jsBezier\' namespace.\r\n *\r\n * - all input points should be in the format {x:.., y:..}. all output points are in this format too.\r\n *\r\n * - all input curves should be in the format [ {x:.., y:..}, {x:.., y:..}, {x:.., y:..}, {x:.., y:..} ]\r\n *\r\n * - \'location\' as used as an input here refers to a decimal in the range 0-1 inclusive, which indicates a point some proportion along the length\r\n * of the curve.  location as output has the same format and meaning.\r\n *\r\n *\r\n * Function List:\r\n * --------------\r\n *\r\n * distanceFromCurve(point, curve)\r\n *\r\n * \tCalculates the distance that the given point lies from the given Bezier.  Note that it is computed relative to the center of the Bezier,\r\n * so if you have stroked the curve with a wide pen you may wish to take that into account!  The distance returned is relative to the values\r\n * of the curve and the point - it will most likely be pixels.\r\n *\r\n * gradientAtPoint(curve, location)\r\n *\r\n * \tCalculates the gradient to the curve at the given location, as a decimal between 0 and 1 inclusive.\r\n *\r\n * gradientAtPointAlongCurveFrom (curve, location)\r\n *\r\n *\tCalculates the gradient at the point on the given curve that is \'distance\' units from location.\r\n *\r\n * nearestPointOnCurve(point, curve)\r\n *\r\n *\tCalculates the nearest point to the given point on the given curve.  The return value of this is a JS object literal, containing both the\r\n *point\'s coordinates and also the \'location\' of the point (see above), for example:  { point:{x:551,y:150}, location:0.263365 }.\r\n *\r\n * pointOnCurve(curve, location)\r\n *\r\n * \tCalculates the coordinates of the point on the given Bezier curve at the given location.\r\n *\r\n * pointAlongCurveFrom(curve, location, distance)\r\n *\r\n * \tCalculates the coordinates of the point on the given curve that is \'distance\' units from location.  \'distance\' should be in the same coordinate\r\n * space as that used to construct the Bezier curve.  For an HTML Canvas usage, for example, distance would be a measure of pixels.\r\n *\r\n * locationAlongCurveFrom(curve, location, distance)\r\n *\r\n * \tCalculates the location on the given curve that is \'distance\' units from location.  \'distance\' should be in the same coordinate\r\n * space as that used to construct the Bezier curve.  For an HTML Canvas usage, for example, distance would be a measure of pixels.\r\n *\r\n * perpendicularToCurveAt(curve, location, length, distance)\r\n *\r\n * \tCalculates the perpendicular to the given curve at the given location.  length is the length of the line you wish for (it will be centered\r\n * on the point at \'location\'). distance is optional, and allows you to specify a point along the path from the given location as the center of\r\n * the perpendicular returned.  The return value of this is an array of two points: [ {x:...,y:...}, {x:...,y:...} ].\r\n *\r\n *\r\n */(function(){var root=this;if(typeof Math.sgn=="undefined"){Math.sgn=function(x){return x==0?0:x>0?1:-1;};}var Vectors={subtract:function subtract(v1,v2){return{x:v1.x-v2.x,y:v1.y-v2.y};},dotProduct:function dotProduct(v1,v2){return v1.x*v2.x+v1.y*v2.y;},square:function square(v){return Math.sqrt(v.x*v.x+v.y*v.y);},scale:function scale(v,s){return{x:v.x*s,y:v.y*s};}},maxRecursion=64,flatnessTolerance=Math.pow(2.0,-maxRecursion-1);/**\r\n     * Calculates the distance that the point lies from the curve.\r\n     *\r\n     * @param point a point in the form {x:567, y:3342}\r\n     * @param curve a Bezier curve in the form [{x:..., y:...}, {x:..., y:...}, {x:..., y:...}, {x:..., y:...}].  note that this is currently\r\n     * hardcoded to assume cubiz beziers, but would be better off supporting any degree.\r\n     * @return a JS object literal containing location and distance, for example: {location:0.35, distance:10}.  Location is analogous to the location\r\n     * argument you pass to the pointOnPath function: it is a ratio of distance travelled along the curve.  Distance is the distance in pixels from\r\n     * the point to the curve.\r\n     */var _distanceFromCurve=function _distanceFromCurve(point,curve){var candidates=[],w=_convertToBezier(point,curve),degree=curve.length-1,higherDegree=2*degree-1,numSolutions=_findRoots(w,higherDegree,candidates,0),v=Vectors.subtract(point,curve[0]),dist=Vectors.square(v),t=0.0;for(var i=0;i<numSolutions;i++){v=Vectors.subtract(point,_bezier(curve,degree,candidates[i],null,null));var newDist=Vectors.square(v);if(newDist<dist){dist=newDist;t=candidates[i];}}v=Vectors.subtract(point,curve[degree]);newDist=Vectors.square(v);if(newDist<dist){dist=newDist;t=1.0;}return{location:t,distance:dist};};/**\r\n     * finds the nearest point on the curve to the given point.\r\n     */var _nearestPointOnCurve=function _nearestPointOnCurve(point,curve){var td=_distanceFromCurve(point,curve);return{point:_bezier(curve,curve.length-1,td.location,null,null),location:td.location};};var _convertToBezier=function _convertToBezier(point,curve){var degree=curve.length-1,higherDegree=2*degree-1,c=[],d=[],cdTable=[],w=[],z=[[1.0,0.6,0.3,0.1],[0.4,0.6,0.6,0.4],[0.1,0.3,0.6,1.0]];for(var i=0;i<=degree;i++){c[i]=Vectors.subtract(curve[i],point);}for(var i=0;i<=degree-1;i++){d[i]=Vectors.subtract(curve[i+1],curve[i]);d[i]=Vectors.scale(d[i],3.0);}for(var row=0;row<=degree-1;row++){for(var column=0;column<=degree;column++){if(!cdTable[row])cdTable[row]=[];cdTable[row][column]=Vectors.dotProduct(d[row],c[column]);}}for(i=0;i<=higherDegree;i++){if(!w[i])w[i]=[];w[i].y=0.0;w[i].x=parseFloat(i)/higherDegree;}var n=degree,m=degree-1;for(var k=0;k<=n+m;k++){var lb=Math.max(0,k-m),ub=Math.min(k,n);for(i=lb;i<=ub;i++){j=k-i;w[i+j].y+=cdTable[j][i]*z[j][i];}}return w;};/**\r\n     * counts how many roots there are.\r\n     */var _findRoots=function _findRoots(w,degree,t,depth){var left=[],right=[],left_count,right_count,left_t=[],right_t=[];switch(_getCrossingCount(w,degree)){case 0:{return 0;}case 1:{if(depth>=maxRecursion){t[0]=(w[0].x+w[degree].x)/2.0;return 1;}if(_isFlatEnough(w,degree)){t[0]=_computeXIntercept(w,degree);return 1;}break;}}_bezier(w,degree,0.5,left,right);left_count=_findRoots(left,degree,left_t,depth+1);right_count=_findRoots(right,degree,right_t,depth+1);for(var i=0;i<left_count;i++){t[i]=left_t[i];}for(var i=0;i<right_count;i++){t[i+left_count]=right_t[i];}return left_count+right_count;};var _getCrossingCount=function _getCrossingCount(curve,degree){var n_crossings=0,sign,old_sign;sign=old_sign=Math.sgn(curve[0].y);for(var i=1;i<=degree;i++){sign=Math.sgn(curve[i].y);if(sign!=old_sign)n_crossings++;old_sign=sign;}return n_crossings;};var _isFlatEnough=function _isFlatEnough(curve,degree){var error,intercept_1,intercept_2,left_intercept,right_intercept,a,b,c,det,dInv,a1,b1,c1,a2,b2,c2;a=curve[0].y-curve[degree].y;b=curve[degree].x-curve[0].x;c=curve[0].x*curve[degree].y-curve[degree].x*curve[0].y;var max_distance_above=max_distance_below=0.0;for(var i=1;i<degree;i++){var value=a*curve[i].x+b*curve[i].y+c;if(value>max_distance_above)max_distance_above=value;else if(value<max_distance_below)max_distance_below=value;}a1=0.0;b1=1.0;c1=0.0;a2=a;b2=b;c2=c-max_distance_above;det=a1*b2-a2*b1;dInv=1.0/det;intercept_1=(b1*c2-b2*c1)*dInv;a2=a;b2=b;c2=c-max_distance_below;det=a1*b2-a2*b1;dInv=1.0/det;intercept_2=(b1*c2-b2*c1)*dInv;left_intercept=Math.min(intercept_1,intercept_2);right_intercept=Math.max(intercept_1,intercept_2);error=right_intercept-left_intercept;return error<flatnessTolerance?1:0;};var _computeXIntercept=function _computeXIntercept(curve,degree){var XLK=1.0,YLK=0.0,XNM=curve[degree].x-curve[0].x,YNM=curve[degree].y-curve[0].y,XMK=curve[0].x-0.0,YMK=curve[0].y-0.0,det=XNM*YLK-YNM*XLK,detInv=1.0/det,S=(XNM*YMK-YNM*XMK)*detInv;return 0.0+XLK*S;};var _bezier=function _bezier(curve,degree,t,left,right){var temp=[[]];for(var j=0;j<=degree;j++){temp[0][j]=curve[j];}for(var i=1;i<=degree;i++){for(var j=0;j<=degree-i;j++){if(!temp[i])temp[i]=[];if(!temp[i][j])temp[i][j]={};temp[i][j].x=(1.0-t)*temp[i-1][j].x+t*temp[i-1][j+1].x;temp[i][j].y=(1.0-t)*temp[i-1][j].y+t*temp[i-1][j+1].y;}}if(left!=null)for(j=0;j<=degree;j++){left[j]=temp[j][0];}if(right!=null)for(j=0;j<=degree;j++){right[j]=temp[degree-j][j];}return temp[degree][0];};var _curveFunctionCache={};var _getCurveFunctions=function _getCurveFunctions(order){var fns=_curveFunctionCache[order];if(!fns){fns=[];var f_term=function f_term(){return function(t){return Math.pow(t,order);};},l_term=function l_term(){return function(t){return Math.pow(1-t,order);};},c_term=function c_term(c){return function(t){return c;};},t_term=function t_term(){return function(t){return t;};},one_minus_t_term=function one_minus_t_term(){return function(t){return 1-t;};},_termFunc=function _termFunc(terms){return function(t){var p=1;for(var i=0;i<terms.length;i++){p=p*terms[i](t);}return p;};};fns.push(new f_term());// first is t to the power of the curve order\nfor(var i=1;i<order;i++){var terms=[new c_term(order)];for(var j=0;j<order-i;j++){terms.push(new t_term());}for(var j=0;j<i;j++){terms.push(new one_minus_t_term());}fns.push(new _termFunc(terms));}fns.push(new l_term());// last is (1-t) to the power of the curve order\n_curveFunctionCache[order]=fns;}return fns;};/**\r\n     * calculates a point on the curve, for a Bezier of arbitrary order.\r\n     * @param curve an array of control points, eg [{x:10,y:20}, {x:50,y:50}, {x:100,y:100}, {x:120,y:100}].  For a cubic bezier this should have four points.\r\n     * @param location a decimal indicating the distance along the curve the point should be located at.  this is the distance along the curve as it travels, taking the way it bends into account.  should be a number from 0 to 1, inclusive.\r\n     */var _pointOnPath=function _pointOnPath(curve,location){var cc=_getCurveFunctions(curve.length-1),_x=0,_y=0;for(var i=0;i<curve.length;i++){_x=_x+curve[i].x*cc[i](location);_y=_y+curve[i].y*cc[i](location);}return{x:_x,y:_y};};var _dist=function _dist(p1,p2){return Math.sqrt(Math.pow(p1.x-p2.x,2)+Math.pow(p1.y-p2.y,2));};var _isPoint=function _isPoint(curve){return curve[0].x==curve[1].x&&curve[0].y==curve[1].y;};/**\r\n     * finds the point that is \'distance\' along the path from \'location\'.  this method returns both the x,y location of the point and also\r\n     * its \'location\' (proportion of travel along the path); the method below - _pointAlongPathFrom - calls this method and just returns the\r\n     * point.\r\n     */var _pointAlongPath=function _pointAlongPath(curve,location,distance){if(_isPoint(curve)){return{point:curve[0],location:location};}var prev=_pointOnPath(curve,location),tally=0,curLoc=location,direction=distance>0?1:-1,cur=null;while(tally<Math.abs(distance)){curLoc+=0.005*direction;cur=_pointOnPath(curve,curLoc);tally+=_dist(cur,prev);prev=cur;}return{point:cur,location:curLoc};};var _length=function _length(curve){if(_isPoint(curve))return 0;var prev=_pointOnPath(curve,0),tally=0,curLoc=0,direction=1,cur=null;while(curLoc<1){curLoc+=0.005*direction;cur=_pointOnPath(curve,curLoc);tally+=_dist(cur,prev);prev=cur;}return tally;};/**\r\n     * finds the point that is \'distance\' along the path from \'location\'.\r\n     */var _pointAlongPathFrom=function _pointAlongPathFrom(curve,location,distance){return _pointAlongPath(curve,location,distance).point;};/**\r\n     * finds the location that is \'distance\' along the path from \'location\'.\r\n     */var _locationAlongPathFrom=function _locationAlongPathFrom(curve,location,distance){return _pointAlongPath(curve,location,distance).location;};/**\r\n     * returns the gradient of the curve at the given location, which is a decimal between 0 and 1 inclusive.\r\n     *\r\n     * thanks // http://bimixual.org/AnimationLibrary/beziertangents.html\r\n     */var _gradientAtPoint=function _gradientAtPoint(curve,location){var p1=_pointOnPath(curve,location),p2=_pointOnPath(curve.slice(0,curve.length-1),location),dy=p2.y-p1.y,dx=p2.x-p1.x;return dy==0?Infinity:Math.atan(dy/dx);};/**\r\n     returns the gradient of the curve at the point which is \'distance\' from the given location.\r\n     if this point is greater than location 1, the gradient at location 1 is returned.\r\n     if this point is less than location 0, the gradient at location 0 is returned.\r\n     */var _gradientAtPointAlongPathFrom=function _gradientAtPointAlongPathFrom(curve,location,distance){var p=_pointAlongPath(curve,location,distance);if(p.location>1)p.location=1;if(p.location<0)p.location=0;return _gradientAtPoint(curve,p.location);};/**\r\n     * calculates a line that is \'length\' pixels long, perpendicular to, and centered on, the path at \'distance\' pixels from the given location.\r\n     * if distance is not supplied, the perpendicular for the given location is computed (ie. we set distance to zero).\r\n     */var _perpendicularToPathAt=function _perpendicularToPathAt(curve,location,length,distance){distance=distance==null?0:distance;var p=_pointAlongPath(curve,location,distance),m=_gradientAtPoint(curve,p.location),_theta2=Math.atan(-1/m),y=length/2*Math.sin(_theta2),x=length/2*Math.cos(_theta2);return[{x:p.point.x+x,y:p.point.y+y},{x:p.point.x-x,y:p.point.y-y}];};var jsBezier=this.jsBezier={distanceFromCurve:_distanceFromCurve,gradientAtPoint:_gradientAtPoint,gradientAtPointAlongCurveFrom:_gradientAtPointAlongPathFrom,nearestPointOnCurve:_nearestPointOnCurve,pointOnCurve:_pointOnPath,pointAlongCurveFrom:_pointAlongPathFrom,perpendicularToCurveAt:_perpendicularToPathAt,locationAlongCurveFrom:_locationAlongPathFrom,getLength:_length,version:"0.9.0"};if(true){exports.jsBezier=jsBezier;}}).call(typeof window!==\'undefined\'?window:this);/**\r\n * Biltong v0.4.0\r\n *\r\n * Various geometry functions written as part of jsPlumb and perhaps useful for others.\r\n *\r\n * Copyright (c) 2017 jsPlumb\r\n * https://jsplumbtoolkit.com\r\n *\r\n * Permission is hereby granted, free of charge, to any person\r\n * obtaining a copy of this software and associated documentation\r\n * files (the "Software"), to deal in the Software without\r\n * restriction, including without limitation the rights to use,\r\n * copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the\r\n * Software is furnished to do so, subject to the following\r\n * conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be\r\n * included in all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,\r\n * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES\r\n * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\r\n * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\r\n * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,\r\n * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\r\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR\r\n * OTHER DEALINGS IN THE SOFTWARE.\r\n */;(function(){"use strict";var root=this;var Biltong=root.Biltong={version:"0.4.0"};if(true){exports.Biltong=Biltong;}var _isa=function _isa(a){return Object.prototype.toString.call(a)==="[object Array]";},_pointHelper=function _pointHelper(p1,p2,fn){p1=_isa(p1)?p1:[p1.x,p1.y];p2=_isa(p2)?p2:[p2.x,p2.y];return fn(p1,p2);},/**\r\n         * @name Biltong.gradient\r\n         * @function\r\n         * @desc Calculates the gradient of a line between the two points.\r\n         * @param {Point} p1 First point, either as a 2 entry array or object with `left` and `top` properties.\r\n         * @param {Point} p2 Second point, either as a 2 entry array or object with `left` and `top` properties.\r\n         * @return {Float} The gradient of a line between the two points.\r\n         */_gradient=Biltong.gradient=function(p1,p2){return _pointHelper(p1,p2,function(_p1,_p2){if(_p2[0]==_p1[0])return _p2[1]>_p1[1]?Infinity:-Infinity;else if(_p2[1]==_p1[1])return _p2[0]>_p1[0]?0:-0;else return(_p2[1]-_p1[1])/(_p2[0]-_p1[0]);});},/**\r\n         * @name Biltong.normal\r\n         * @function\r\n         * @desc Calculates the gradient of a normal to a line between the two points.\r\n         * @param {Point} p1 First point, either as a 2 entry array or object with `left` and `top` properties.\r\n         * @param {Point} p2 Second point, either as a 2 entry array or object with `left` and `top` properties.\r\n         * @return {Float} The gradient of a normal to a line between the two points.\r\n         */_normal=Biltong.normal=function(p1,p2){return-1/_gradient(p1,p2);},/**\r\n         * @name Biltong.lineLength\r\n         * @function\r\n         * @desc Calculates the length of a line between the two points.\r\n         * @param {Point} p1 First point, either as a 2 entry array or object with `left` and `top` properties.\r\n         * @param {Point} p2 Second point, either as a 2 entry array or object with `left` and `top` properties.\r\n         * @return {Float} The length of a line between the two points.\r\n         */_lineLength=Biltong.lineLength=function(p1,p2){return _pointHelper(p1,p2,function(_p1,_p2){return Math.sqrt(Math.pow(_p2[1]-_p1[1],2)+Math.pow(_p2[0]-_p1[0],2));});},/**\r\n         * @name Biltong.quadrant\r\n         * @function\r\n         * @desc Calculates the quadrant in which the angle between the two points lies.\r\n         * @param {Point} p1 First point, either as a 2 entry array or object with `left` and `top` properties.\r\n         * @param {Point} p2 Second point, either as a 2 entry array or object with `left` and `top` properties.\r\n         * @return {Integer} The quadrant - 1 for upper right, 2 for lower right, 3 for lower left, 4 for upper left.\r\n         */_quadrant=Biltong.quadrant=function(p1,p2){return _pointHelper(p1,p2,function(_p1,_p2){if(_p2[0]>_p1[0]){return _p2[1]>_p1[1]?2:1;}else if(_p2[0]==_p1[0]){return _p2[1]>_p1[1]?2:1;}else{return _p2[1]>_p1[1]?3:4;}});},/**\r\n         * @name Biltong.theta\r\n         * @function\r\n         * @desc Calculates the angle between the two points.\r\n         * @param {Point} p1 First point, either as a 2 entry array or object with `left` and `top` properties.\r\n         * @param {Point} p2 Second point, either as a 2 entry array or object with `left` and `top` properties.\r\n         * @return {Float} The angle between the two points.\r\n         */_theta=Biltong.theta=function(p1,p2){return _pointHelper(p1,p2,function(_p1,_p2){var m=_gradient(_p1,_p2),t=Math.atan(m),s=_quadrant(_p1,_p2);if(s==4||s==3)t+=Math.PI;if(t<0)t+=2*Math.PI;return t;});},/**\r\n         * @name Biltong.intersects\r\n         * @function\r\n         * @desc Calculates whether or not the two rectangles intersect.\r\n         * @param {Rectangle} r1 First rectangle, as a js object in the form `{x:.., y:.., w:.., h:..}`\r\n         * @param {Rectangle} r2 Second rectangle, as a js object in the form `{x:.., y:.., w:.., h:..}`\r\n         * @return {Boolean} True if the rectangles intersect, false otherwise.\r\n         */_intersects=Biltong.intersects=function(r1,r2){var x1=r1.x,x2=r1.x+r1.w,y1=r1.y,y2=r1.y+r1.h,a1=r2.x,a2=r2.x+r2.w,b1=r2.y,b2=r2.y+r2.h;return x1<=a1&&a1<=x2&&y1<=b1&&b1<=y2||x1<=a2&&a2<=x2&&y1<=b1&&b1<=y2||x1<=a1&&a1<=x2&&y1<=b2&&b2<=y2||x1<=a2&&a1<=x2&&y1<=b2&&b2<=y2||a1<=x1&&x1<=a2&&b1<=y1&&y1<=b2||a1<=x2&&x2<=a2&&b1<=y1&&y1<=b2||a1<=x1&&x1<=a2&&b1<=y2&&y2<=b2||a1<=x2&&x1<=a2&&b1<=y2&&y2<=b2;},/**\r\n         * @name Biltong.encloses\r\n         * @function\r\n         * @desc Calculates whether or not r2 is completely enclosed by r1.\r\n         * @param {Rectangle} r1 First rectangle, as a js object in the form `{x:.., y:.., w:.., h:..}`\r\n         * @param {Rectangle} r2 Second rectangle, as a js object in the form `{x:.., y:.., w:.., h:..}`\r\n         * @param {Boolean} [allowSharedEdges=false] If true, the concept of enclosure allows for one or more edges to be shared by the two rectangles.\r\n         * @return {Boolean} True if r1 encloses r2, false otherwise.\r\n         */_encloses=Biltong.encloses=function(r1,r2,allowSharedEdges){var x1=r1.x,x2=r1.x+r1.w,y1=r1.y,y2=r1.y+r1.h,a1=r2.x,a2=r2.x+r2.w,b1=r2.y,b2=r2.y+r2.h,c=function c(v1,v2,v3,v4){return allowSharedEdges?v1<=v2&&v3>=v4:v1<v2&&v3>v4;};return c(x1,a1,x2,a2)&&c(y1,b1,y2,b2);},_segmentMultipliers=[null,[1,-1],[1,1],[-1,1],[-1,-1]],_inverseSegmentMultipliers=[null,[-1,-1],[-1,1],[1,1],[1,-1]],/**\r\n         * @name Biltong.pointOnLine\r\n         * @function\r\n         * @desc Calculates a point on the line from `fromPoint` to `toPoint` that is `distance` units along the length of the line.\r\n         * @param {Point} p1 First point, either as a 2 entry array or object with `left` and `top` properties.\r\n         * @param {Point} p2 Second point, either as a 2 entry array or object with `left` and `top` properties.\r\n         * @return {Point} Point on the line, in the form `{ x:..., y:... }`.\r\n         */_pointOnLine=Biltong.pointOnLine=function(fromPoint,toPoint,distance){var m=_gradient(fromPoint,toPoint),s=_quadrant(fromPoint,toPoint),segmentMultiplier=distance>0?_segmentMultipliers[s]:_inverseSegmentMultipliers[s],theta=Math.atan(m),y=Math.abs(distance*Math.sin(theta))*segmentMultiplier[1],x=Math.abs(distance*Math.cos(theta))*segmentMultiplier[0];return{x:fromPoint.x+x,y:fromPoint.y+y};},/**\r\n         * @name Biltong.perpendicularLineTo\r\n         * @function\r\n         * @desc Calculates a line of length `length` that is perpendicular to the line from `fromPoint` to `toPoint` and passes through `toPoint`.\r\n         * @param {Point} p1 First point, either as a 2 entry array or object with `left` and `top` properties.\r\n         * @param {Point} p2 Second point, either as a 2 entry array or object with `left` and `top` properties.\r\n         * @return {Line} Perpendicular line, in the form `[ { x:..., y:... }, { x:..., y:... } ]`.\r\n         */_perpendicularLineTo=Biltong.perpendicularLineTo=function(fromPoint,toPoint,length){var m=_gradient(fromPoint,toPoint),theta2=Math.atan(-1/m),y=length/2*Math.sin(theta2),x=length/2*Math.cos(theta2);return[{x:toPoint.x+x,y:toPoint.y+y},{x:toPoint.x-x,y:toPoint.y-y}];};}).call(typeof window!==\'undefined\'?window:this);;(function(){"use strict";var root=this,Sniff={android:navigator.userAgent.toLowerCase().indexOf("android")>-1},matchesSelector=function matchesSelector(el,selector,ctx){ctx=ctx||el.parentNode;var possibles=ctx.querySelectorAll(selector);for(var i=0;i<possibles.length;i++){if(possibles[i]===el){return true;}}return false;},_gel=function _gel(el){return typeof el=="string"||el.constructor===String?document.getElementById(el):el;},_t=function _t(e){return e.srcElement||e.target;},//\n// gets path info for the given event - the path from target to obj, in the event\'s bubble chain. if doCompute\n// is false we just return target for the path.\n//\n_pi=function _pi(e,target,obj,doCompute){if(!doCompute)return{path:[target],end:1};else if(typeof e.path!=="undefined"&&e.path.indexOf){return{path:e.path,end:e.path.indexOf(obj)};}else{var out={path:[],end:-1},_one=function _one(el){out.path.push(el);if(el===obj){out.end=out.path.length-1;}else if(el.parentNode!=null){_one(el.parentNode);}};_one(target);return out;}},_d=function _d(l,fn){for(var i=0,j=l.length;i<j;i++){if(l[i]==fn)break;}if(i<l.length)l.splice(i,1);},guid=1,//\n// this function generates a guid for every handler, sets it on the handler, then adds\n// it to the associated object\'s map of handlers for the given event. this is what enables us\n// to unbind all events of some type, or all events (the second of which can be requested by the user,\n// but it also used by Mottle when an element is removed.)\n_store=function _store(obj,event,fn){var g=guid++;obj.__ta=obj.__ta||{};obj.__ta[event]=obj.__ta[event]||{};// store each handler with a unique guid.\nobj.__ta[event][g]=fn;// set the guid on the handler.\nfn.__tauid=g;return g;},_unstore=function _unstore(obj,event,fn){obj.__ta&&obj.__ta[event]&&delete obj.__ta[event][fn.__tauid];// a handler might have attached extra functions, so we unbind those too.\nif(fn.__taExtra){for(var i=0;i<fn.__taExtra.length;i++){_unbind(obj,fn.__taExtra[i][0],fn.__taExtra[i][1]);}fn.__taExtra.length=0;}// a handler might have attached an unstore callback\nfn.__taUnstore&&fn.__taUnstore();},_curryChildFilter=function _curryChildFilter(children,obj,fn,evt){if(children==null)return fn;else{var c=children.split(","),_fn=function _fn(e){_fn.__tauid=fn.__tauid;var t=_t(e),target=t;// t is the target element on which the event occurred. it is the\n// element we will wish to pass to any callbacks.\nvar pathInfo=_pi(e,t,obj,children!=null);if(pathInfo.end!=-1){for(var p=0;p<pathInfo.end;p++){target=pathInfo.path[p];for(var i=0;i<c.length;i++){if(matchesSelector(target,c[i],obj)){fn.apply(target,arguments);}}}}};registerExtraFunction(fn,evt,_fn);return _fn;}},//\n// registers an \'extra\' function on some event listener function we were given - a function that we\n// created and bound to the element as part of our housekeeping, and which we want to unbind and remove\n// whenever the given function is unbound.\nregisterExtraFunction=function registerExtraFunction(fn,evt,newFn){fn.__taExtra=fn.__taExtra||[];fn.__taExtra.push([evt,newFn]);},DefaultHandler=function DefaultHandler(obj,evt,fn,children){if(isTouchDevice&&touchMap[evt]){var tfn=_curryChildFilter(children,obj,fn,touchMap[evt]);_bind(obj,touchMap[evt],tfn,fn);}if(evt==="focus"&&obj.getAttribute("tabindex")==null){obj.setAttribute("tabindex","1");}_bind(obj,evt,_curryChildFilter(children,obj,fn,evt),fn);},SmartClickHandler=function SmartClickHandler(obj,evt,fn,children){if(obj.__taSmartClicks==null){var down=function down(e){obj.__tad=_pageLocation(e);},up=function up(e){obj.__tau=_pageLocation(e);},click=function click(e){if(obj.__tad&&obj.__tau&&obj.__tad[0]===obj.__tau[0]&&obj.__tad[1]===obj.__tau[1]){for(var i=0;i<obj.__taSmartClicks.length;i++){obj.__taSmartClicks[i].apply(_t(e),[e]);}}};DefaultHandler(obj,"mousedown",down,children);DefaultHandler(obj,"mouseup",up,children);DefaultHandler(obj,"click",click,children);obj.__taSmartClicks=[];}// store in the list of callbacks\nobj.__taSmartClicks.push(fn);// the unstore function removes this function from the object\'s listener list for this type.\nfn.__taUnstore=function(){_d(obj.__taSmartClicks,fn);};},_tapProfiles={"tap":{touches:1,taps:1},"dbltap":{touches:1,taps:2},"contextmenu":{touches:2,taps:1}},TapHandler=function TapHandler(clickThreshold,dblClickThreshold){return function(obj,evt,fn,children){// if event is contextmenu, for devices which are mouse only, we want to\n// use the default bind.\nif(evt=="contextmenu"&&isMouseDevice)DefaultHandler(obj,evt,fn,children);else{// the issue here is that this down handler gets registered only for the\n// child nodes in the first registration. in fact it should be registered with\n// no child selector and then on down we should cycle through the registered\n// functions to see if one of them matches. on mouseup we should execute ALL of\n// the functions whose children are either null or match the element.\nif(obj.__taTapHandler==null){var tt=obj.__taTapHandler={tap:[],dbltap:[],contextmenu:[],down:false,taps:0,downSelectors:[]};var down=function down(e){var target=_t(e),pathInfo=_pi(e,target,obj,children!=null),finished=false;for(var p=0;p<pathInfo.end;p++){if(finished)return;target=pathInfo.path[p];for(var i=0;i<tt.downSelectors.length;i++){if(tt.downSelectors[i]==null||matchesSelector(target,tt.downSelectors[i],obj)){tt.down=true;setTimeout(clearSingle,clickThreshold);setTimeout(clearDouble,dblClickThreshold);finished=true;break;// we only need one match on mousedown\n}}}},up=function up(e){if(tt.down){var target=_t(e),currentTarget,pathInfo;tt.taps++;var tc=_touchCount(e);for(var eventId in _tapProfiles){if(_tapProfiles.hasOwnProperty(eventId)){var p=_tapProfiles[eventId];if(p.touches===tc&&(p.taps===1||p.taps===tt.taps)){for(var i=0;i<tt[eventId].length;i++){pathInfo=_pi(e,target,obj,tt[eventId][i][1]!=null);for(var pLoop=0;pLoop<pathInfo.end;pLoop++){currentTarget=pathInfo.path[pLoop];// this is a single event registration handler.\nif(tt[eventId][i][1]==null||matchesSelector(currentTarget,tt[eventId][i][1],obj)){tt[eventId][i][0].apply(currentTarget,[e]);break;}}}}}}}},clearSingle=function clearSingle(){tt.down=false;},clearDouble=function clearDouble(){tt.taps=0;};DefaultHandler(obj,"mousedown",down);DefaultHandler(obj,"mouseup",up);}// add this child selector (it can be null, that\'s fine).\nobj.__taTapHandler.downSelectors.push(children);obj.__taTapHandler[evt].push([fn,children]);// the unstore function removes this function from the object\'s listener list for this type.\nfn.__taUnstore=function(){_d(obj.__taTapHandler[evt],fn);};}};},meeHelper=function meeHelper(type,evt,obj,target){for(var i in obj.__tamee[type]){if(obj.__tamee[type].hasOwnProperty(i)){obj.__tamee[type][i].apply(target,[evt]);}}},MouseEnterExitHandler=function MouseEnterExitHandler(){var activeElements=[];return function(obj,evt,fn,children){if(!obj.__tamee){// __tamee holds a flag saying whether the mouse is currently "in" the element, and a list of\n// both mouseenter and mouseexit functions.\nobj.__tamee={over:false,mouseenter:[],mouseexit:[]};// register over and out functions\nvar over=function over(e){var t=_t(e);if(children==null&&t==obj&&!obj.__tamee.over||matchesSelector(t,children,obj)&&(t.__tamee==null||!t.__tamee.over)){meeHelper("mouseenter",e,obj,t);t.__tamee=t.__tamee||{};t.__tamee.over=true;activeElements.push(t);}},out=function out(e){var t=_t(e);// is the current target one of the activeElements? and is the\n// related target NOT a descendant of it?\nfor(var i=0;i<activeElements.length;i++){if(t==activeElements[i]&&!matchesSelector(e.relatedTarget||e.toElement,"*",t)){t.__tamee.over=false;activeElements.splice(i,1);meeHelper("mouseexit",e,obj,t);}}};_bind(obj,"mouseover",_curryChildFilter(children,obj,over,"mouseover"),over);_bind(obj,"mouseout",_curryChildFilter(children,obj,out,"mouseout"),out);}fn.__taUnstore=function(){delete obj.__tamee[evt][fn.__tauid];};_store(obj,evt,fn);obj.__tamee[evt][fn.__tauid]=fn;};},isTouchDevice="ontouchstart"in document.documentElement,isMouseDevice="onmousedown"in document.documentElement,touchMap={"mousedown":"touchstart","mouseup":"touchend","mousemove":"touchmove"},touchstart="touchstart",touchend="touchend",touchmove="touchmove",iev=function(){var rv=-1;if(navigator.appName==\'Microsoft Internet Explorer\'){var ua=navigator.userAgent,re=new RegExp("MSIE ([0-9]{1,}[\\.0-9]{0,})");if(re.exec(ua)!=null)rv=parseFloat(RegExp.$1);}return rv;}(),isIELT9=iev>-1&&iev<9,_genLoc=function _genLoc(e,prefix){if(e==null)return[0,0];var ts=_touches(e),t=_getTouch(ts,0);return[t[prefix+"X"],t[prefix+"Y"]];},_pageLocation=function _pageLocation(e){if(e==null)return[0,0];if(isIELT9){return[e.clientX+document.documentElement.scrollLeft,e.clientY+document.documentElement.scrollTop];}else{return _genLoc(e,"page");}},_screenLocation=function _screenLocation(e){return _genLoc(e,"screen");},_clientLocation=function _clientLocation(e){return _genLoc(e,"client");},_getTouch=function _getTouch(touches,idx){return touches.item?touches.item(idx):touches[idx];},_touches=function _touches(e){return e.touches&&e.touches.length>0?e.touches:e.changedTouches&&e.changedTouches.length>0?e.changedTouches:e.targetTouches&&e.targetTouches.length>0?e.targetTouches:[e];},_touchCount=function _touchCount(e){return _touches(e).length;},//http://www.quirksmode.org/blog/archives/2005/10/_and_the_winner_1.html\n_bind=function _bind(obj,type,fn,originalFn){_store(obj,type,fn);originalFn.__tauid=fn.__tauid;if(obj.addEventListener)obj.addEventListener(type,fn,false);else if(obj.attachEvent){var key=type+fn.__tauid;obj["e"+key]=fn;// TODO look at replacing with .call(..)\nobj[key]=function(){obj["e"+key]&&obj["e"+key](window.event);};obj.attachEvent("on"+type,obj[key]);}},_unbind=function _unbind(obj,type,fn){if(fn==null)return;_each(obj,function(){var _el=_gel(this);_unstore(_el,type,fn);// it has been bound if there is a tauid. otherwise it was not bound and we can ignore it.\nif(fn.__tauid!=null){if(_el.removeEventListener){_el.removeEventListener(type,fn,false);if(isTouchDevice&&touchMap[type])_el.removeEventListener(touchMap[type],fn,false);}else if(this.detachEvent){var key=type+fn.__tauid;_el[key]&&_el.detachEvent("on"+type,_el[key]);_el[key]=null;_el["e"+key]=null;}}// if a touch event was also registered, deregister now.\nif(fn.__taTouchProxy){_unbind(obj,fn.__taTouchProxy[1],fn.__taTouchProxy[0]);}});},_each=function _each(obj,fn){if(obj==null)return;// if a list (or list-like), use it. if a string, get a list\n// by running the string through querySelectorAll. else, assume\n// it\'s an Element.\n// obj.top is "unknown" in IE8.\nobj=typeof Window!=="undefined"&&typeof obj.top!=="unknown"&&obj==obj.top?[obj]:typeof obj!=="string"&&obj.tagName==null&&obj.length!=null?obj:typeof obj==="string"?document.querySelectorAll(obj):[obj];for(var i=0;i<obj.length;i++){fn.apply(obj[i]);}};/**\r\n     * Mottle offers support for abstracting out the differences\r\n     * between touch and mouse devices, plus "smart click" functionality\r\n     * (don\'t fire click if the mouse has moved between mousedown and mouseup),\r\n     * and synthesized click/tap events.\r\n     * @class Mottle\r\n     * @constructor\r\n     * @param {Object} params Constructor params\r\n     * @param {Number} [params.clickThreshold=250] Threshold, in milliseconds beyond which a touchstart followed by a touchend is not considered to be a click.\r\n     * @param {Number} [params.dblClickThreshold=450] Threshold, in milliseconds beyond which two successive tap events are not considered to be a click.\r\n     * @param {Boolean} [params.smartClicks=false] If true, won\'t fire click events if the mouse has moved between mousedown and mouseup. Note that this functionality\r\n     * requires that Mottle consume the mousedown event, and so may not be viable in all use cases.\r\n     */root.Mottle=function(params){params=params||{};var clickThreshold=params.clickThreshold||250,dblClickThreshold=params.dblClickThreshold||450,mouseEnterExitHandler=new MouseEnterExitHandler(),tapHandler=new TapHandler(clickThreshold,dblClickThreshold),_smartClicks=params.smartClicks,_doBind=function _doBind(obj,evt,fn,children){if(fn==null)return;_each(obj,function(){var _el=_gel(this);if(_smartClicks&&evt==="click")SmartClickHandler(_el,evt,fn,children);else if(evt==="tap"||evt==="dbltap"||evt==="contextmenu"){tapHandler(_el,evt,fn,children);}else if(evt==="mouseenter"||evt=="mouseexit")mouseEnterExitHandler(_el,evt,fn,children);else DefaultHandler(_el,evt,fn,children);});};/**\r\n         * Removes an element from the DOM, and deregisters all event handlers for it. You should use this\r\n         * to ensure you don\'t leak memory.\r\n         * @method remove\r\n         * @param {String|Element} el Element, or id of the element, to remove.\r\n         * @return {Mottle} The current Mottle instance; you can chain this method.\r\n         */this.remove=function(el){_each(el,function(){var _el=_gel(this);if(_el.__ta){for(var evt in _el.__ta){if(_el.__ta.hasOwnProperty(evt)){for(var h in _el.__ta[evt]){if(_el.__ta[evt].hasOwnProperty(h))_unbind(_el,evt,_el.__ta[evt][h]);}}}}_el.parentNode&&_el.parentNode.removeChild(_el);});return this;};/**\r\n         * Register an event handler, optionally as a delegate for some set of descendant elements. Note\r\n         * that this method takes either 3 or 4 arguments - if you supply 3 arguments it is assumed you have\r\n         * omitted the `children` parameter, and that the event handler should be bound directly to the given element.\r\n         * @method on\r\n         * @param {Element[]|Element|String} el Either an Element, or a CSS spec for a list of elements, or an array of Elements.\r\n         * @param {String} [children] Comma-delimited list of selectors identifying allowed children.\r\n         * @param {String} event Event ID.\r\n         * @param {Function} fn Event handler function.\r\n         * @return {Mottle} The current Mottle instance; you can chain this method.\r\n         */this.on=function(el,event,children,fn){var _el=arguments[0],_c=arguments.length==4?arguments[2]:null,_e=arguments[1],_f=arguments[arguments.length-1];_doBind(_el,_e,_f,_c);return this;};/**\r\n         * Cancel delegate event handling for the given function. Note that unlike with \'on\' you do not supply\r\n         * a list of child selectors here: it removes event delegation from all of the child selectors for which the\r\n         * given function was registered (if any).\r\n         * @method off\r\n         * @param {Element[]|Element|String} el Element - or ID of element - from which to remove event listener.\r\n         * @param {String} event Event ID.\r\n         * @param {Function} fn Event handler function.\r\n         * @return {Mottle} The current Mottle instance; you can chain this method.\r\n         */this.off=function(el,event,fn){_unbind(el,event,fn);return this;};/**\r\n         * Triggers some event for a given element.\r\n         * @method trigger\r\n         * @param {Element} el Element for which to trigger the event.\r\n         * @param {String} event Event ID.\r\n         * @param {Event} originalEvent The original event. Should be optional of course, but currently is not, due\r\n         * to the jsPlumb use case that caused this method to be added.\r\n         * @param {Object} [payload] Optional object to set as `payload` on the generated event; useful for message passing.\r\n         * @return {Mottle} The current Mottle instance; you can chain this method.\r\n         */this.trigger=function(el,event,originalEvent,payload){// MouseEvent undefined in old IE; that\'s how we know it\'s a mouse event.  A fine Microsoft paradox.\nvar originalIsMouse=isMouseDevice&&(typeof MouseEvent==="undefined"||originalEvent==null||originalEvent.constructor===MouseEvent);var eventToBind=isTouchDevice&&!isMouseDevice&&touchMap[event]?touchMap[event]:event,bindingAMouseEvent=!(isTouchDevice&&!isMouseDevice&&touchMap[event]);var pl=_pageLocation(originalEvent),sl=_screenLocation(originalEvent),cl=_clientLocation(originalEvent);_each(el,function(){var _el=_gel(this),evt;originalEvent=originalEvent||{screenX:sl[0],screenY:sl[1],clientX:cl[0],clientY:cl[1]};var _decorate=function _decorate(_evt){if(payload)_evt.payload=payload;};var eventGenerators={"TouchEvent":function TouchEvent(evt){var touch=document.createTouch(window,_el,0,pl[0],pl[1],sl[0],sl[1],cl[0],cl[1],0,0,0,0);// https://gist.github.com/sstephenson/448808\nvar touches=document.createTouchList(touch);var targetTouches=document.createTouchList(touch);var changedTouches=document.createTouchList(touch);evt.initTouchEvent(eventToBind,true,true,window,null,sl[0],sl[1],cl[0],cl[1],false,false,false,false,touches,targetTouches,changedTouches,1,0);},"MouseEvents":function MouseEvents(evt){evt.initMouseEvent(eventToBind,true,true,window,0,sl[0],sl[1],cl[0],cl[1],false,false,false,false,1,_el);if(Sniff.android){// Android\'s touch events are not standard.\nvar t=document.createTouch(window,_el,0,pl[0],pl[1],sl[0],sl[1],cl[0],cl[1],0,0,0,0);evt.touches=evt.targetTouches=evt.changedTouches=document.createTouchList(t);}}};if(document.createEvent){var ite=!bindingAMouseEvent&&!originalIsMouse&&isTouchDevice&&touchMap[event]&&!Sniff.android,evtName=ite?"TouchEvent":"MouseEvents";evt=document.createEvent(evtName);eventGenerators[evtName](evt);_decorate(evt);_el.dispatchEvent(evt);}else if(document.createEventObject){evt=document.createEventObject();evt.eventType=evt.eventName=eventToBind;evt.screenX=sl[0];evt.screenY=sl[1];evt.clientX=cl[0];evt.clientY=cl[1];_decorate(evt);_el.fireEvent(\'on\'+eventToBind,evt);}});return this;};};/**\r\n     * Static method to assist in \'consuming\' an element: uses `stopPropagation` where available, or sets\r\n     * `e.returnValue=false` where it is not.\r\n     * @method Mottle.consume\r\n     * @param {Event} e Event to consume\r\n     * @param {Boolean} [doNotPreventDefault=false] If true, does not call `preventDefault()` on the event.\r\n     */root.Mottle.consume=function(e,doNotPreventDefault){if(e.stopPropagation)e.stopPropagation();else e.returnValue=false;if(!doNotPreventDefault&&e.preventDefault)e.preventDefault();};/**\r\n     * Gets the page location corresponding to the given event. For touch events this means get the page location of the first touch.\r\n     * @method Mottle.pageLocation\r\n     * @param {Event} e Event to get page location for.\r\n     * @return {Number[]} [left, top] for the given event.\r\n     */root.Mottle.pageLocation=_pageLocation;/**\r\n     * Forces touch events to be turned "on". Useful for testing: even if you don\'t have a touch device, you can still\r\n     * trigger a touch event when this is switched on and it will be captured and acted on.\r\n     * @method setForceTouchEvents\r\n     * @param {Boolean} value If true, force touch events to be on.\r\n     */root.Mottle.setForceTouchEvents=function(value){isTouchDevice=value;};/**\r\n     * Forces mouse events to be turned "on". Useful for testing: even if you don\'t have a mouse, you can still\r\n     * trigger a mouse event when this is switched on and it will be captured and acted on.\r\n     * @method setForceMouseEvents\r\n     * @param {Boolean} value If true, force mouse events to be on.\r\n     */root.Mottle.setForceMouseEvents=function(value){isMouseDevice=value;};root.Mottle.version="0.8.0";if(true){exports.Mottle=root.Mottle;}}).call(typeof window==="undefined"?this:window);/**\r\n drag/drop functionality for use with jsPlumb but with\r\n no knowledge of jsPlumb. supports multiple scopes (separated by whitespace), dragging\r\n multiple elements, constrain to parent, drop filters, drag start filters, custom\r\n css classes.\r\n\r\n a lot of the functionality of this script is expected to be plugged in:\r\n\r\n addClass\r\n removeClass\r\n\r\n addEvent\r\n removeEvent\r\n\r\n getPosition\r\n setPosition\r\n getSize\r\n\r\n indexOf\r\n intersects\r\n\r\n the name came from here:\r\n\r\n http://mrsharpoblunto.github.io/foswig.js/\r\n\r\n copyright 2016 jsPlumb\r\n */;(function(){"use strict";var root=this;var _suggest=function _suggest(list,item,head){if(list.indexOf(item)===-1){head?list.unshift(item):list.push(item);return true;}return false;};var _vanquish=function _vanquish(list,item){var idx=list.indexOf(item);if(idx!==-1)list.splice(idx,1);};var _difference=function _difference(l1,l2){var d=[];for(var i=0;i<l1.length;i++){if(l2.indexOf(l1[i])===-1)d.push(l1[i]);}return d;};var _isString=function _isString(f){return f==null?false:typeof f==="string"||f.constructor===String;};var getOffsetRect=function getOffsetRect(elem){// (1)\nvar box=elem.getBoundingClientRect(),body=document.body,docElem=document.documentElement,// (2)\nscrollTop=window.pageYOffset||docElem.scrollTop||body.scrollTop,scrollLeft=window.pageXOffset||docElem.scrollLeft||body.scrollLeft,// (3)\nclientTop=docElem.clientTop||body.clientTop||0,clientLeft=docElem.clientLeft||body.clientLeft||0,// (4)\ntop=box.top+scrollTop-clientTop,left=box.left+scrollLeft-clientLeft;return{top:Math.round(top),left:Math.round(left)};};var matchesSelector=function matchesSelector(el,selector,ctx){ctx=ctx||el.parentNode;var possibles=ctx.querySelectorAll(selector);for(var i=0;i<possibles.length;i++){if(possibles[i]===el)return true;}return false;};var iev=function(){var rv=-1;if(navigator.appName===\'Microsoft Internet Explorer\'){var ua=navigator.userAgent,re=new RegExp("MSIE ([0-9]{1,}[\\.0-9]{0,})");if(re.exec(ua)!=null)rv=parseFloat(RegExp.$1);}return rv;}(),DEFAULT_GRID_X=10,DEFAULT_GRID_Y=10,isIELT9=iev>-1&&iev<9,isIE9=iev===9,_pl=function _pl(e){if(isIELT9){return[e.clientX+document.documentElement.scrollLeft,e.clientY+document.documentElement.scrollTop];}else{var ts=_touches(e),t=_getTouch(ts,0);// for IE9 pageX might be null if the event was synthesized. We try for pageX/pageY first,\n// falling back to clientX/clientY if necessary. In every other browser we want to use pageX/pageY.\nreturn isIE9?[t.pageX||t.clientX,t.pageY||t.clientY]:[t.pageX,t.pageY];}},_getTouch=function _getTouch(touches,idx){return touches.item?touches.item(idx):touches[idx];},_touches=function _touches(e){return e.touches&&e.touches.length>0?e.touches:e.changedTouches&&e.changedTouches.length>0?e.changedTouches:e.targetTouches&&e.targetTouches.length>0?e.targetTouches:[e];},_classes={draggable:"katavorio-draggable",// draggable elements\ndroppable:"katavorio-droppable",// droppable elements\ndrag:"katavorio-drag",// elements currently being dragged\nselected:"katavorio-drag-selected",// elements in current drag selection\nactive:"katavorio-drag-active",// droppables that are targets of a currently dragged element\nhover:"katavorio-drag-hover",// droppables over which a matching drag element is hovering\nnoSelect:"katavorio-drag-no-select",// added to the body to provide a hook to suppress text selection\nghostProxy:"katavorio-ghost-proxy",// added to a ghost proxy element in use when a drag has exited the bounds of its parent.\nclonedDrag:"katavorio-clone-drag"// added to a node that is a clone of an element created at the start of a drag\n},_defaultScope="katavorio-drag-scope",_events=["stop","start","drag","drop","over","out","beforeStart"],_devNull=function _devNull(){},_true=function _true(){return true;},_foreach=function _foreach(l,fn,from){for(var i=0;i<l.length;i++){if(l[i]!=from)fn(l[i]);}},_setDroppablesActive=function _setDroppablesActive(dd,val,andHover,drag){_foreach(dd,function(e){e.setActive(val);if(val)e.updatePosition();if(andHover)e.setHover(drag,val);});},_each=function _each(obj,fn){if(obj==null)return;obj=!_isString(obj)&&obj.tagName==null&&obj.length!=null?obj:[obj];for(var i=0;i<obj.length;i++){fn.apply(obj[i],[obj[i]]);}},_consume=function _consume(e){if(e.stopPropagation){e.stopPropagation();e.preventDefault();}else{e.returnValue=false;}},_defaultInputFilterSelector="input,textarea,select,button,option",//\n// filters out events on all input elements, like textarea, checkbox, input, select.\n_inputFilter=function _inputFilter(e,el,_katavorio){var t=e.srcElement||e.target;return!matchesSelector(t,_katavorio.getInputFilterSelector(),el);};var Super=function Super(el,params,css,scope){this.params=params||{};this.el=el;this.params.addClass(this.el,this._class);this.uuid=_uuid();var enabled=true;this.setEnabled=function(e){enabled=e;};this.isEnabled=function(){return enabled;};this.toggleEnabled=function(){enabled=!enabled;};this.setScope=function(scopes){this.scopes=scopes?scopes.split(/\\s+/):[scope];};this.addScope=function(scopes){var m={};_each(this.scopes,function(s){m[s]=true;});_each(scopes?scopes.split(/\\s+/):[],function(s){m[s]=true;});this.scopes=[];for(var i in m){this.scopes.push(i);}};this.removeScope=function(scopes){var m={};_each(this.scopes,function(s){m[s]=true;});_each(scopes?scopes.split(/\\s+/):[],function(s){delete m[s];});this.scopes=[];for(var i in m){this.scopes.push(i);}};this.toggleScope=function(scopes){var m={};_each(this.scopes,function(s){m[s]=true;});_each(scopes?scopes.split(/\\s+/):[],function(s){if(m[s])delete m[s];else m[s]=true;});this.scopes=[];for(var i in m){this.scopes.push(i);}};this.setScope(params.scope);this.k=params.katavorio;return params.katavorio;};var TRUE=function TRUE(){return true;};var FALSE=function FALSE(){return false;};var Drag=function Drag(el,params,css,scope){this._class=css.draggable;var k=Super.apply(this,arguments);this.rightButtonCanDrag=this.params.rightButtonCanDrag;var downAt=[0,0],posAtDown=null,pagePosAtDown=null,pageDelta=[0,0],moving=false,consumeStartEvent=this.params.consumeStartEvent!==false,dragEl=this.el,clone=this.params.clone,scroll=this.params.scroll,_multipleDrop=params.multipleDrop!==false,isConstrained=false,useGhostProxy=params.ghostProxy===true?TRUE:params.ghostProxy&&typeof params.ghostProxy==="function"?params.ghostProxy:FALSE,ghostProxy=function ghostProxy(el){return el.cloneNode(true);};var snapThreshold=params.snapThreshold,_snap=function _snap(pos,gridX,gridY,thresholdX,thresholdY){var _dx=Math.floor(pos[0]/gridX),_dxl=gridX*_dx,_dxt=_dxl+gridX,_x=Math.abs(pos[0]-_dxl)<=thresholdX?_dxl:Math.abs(_dxt-pos[0])<=thresholdX?_dxt:pos[0];var _dy=Math.floor(pos[1]/gridY),_dyl=gridY*_dy,_dyt=_dyl+gridY,_y=Math.abs(pos[1]-_dyl)<=thresholdY?_dyl:Math.abs(_dyt-pos[1])<=thresholdY?_dyt:pos[1];return[_x,_y];};this.posses=[];this.posseRoles={};this.toGrid=function(pos){if(this.params.grid==null){return pos;}else{var tx=this.params.grid?this.params.grid[0]/2:snapThreshold?snapThreshold:DEFAULT_GRID_X/2,ty=this.params.grid?this.params.grid[1]/2:snapThreshold?snapThreshold:DEFAULT_GRID_Y/2;return _snap(pos,this.params.grid[0],this.params.grid[1],tx,ty);}};this.snap=function(x,y){if(dragEl==null)return;x=x||(this.params.grid?this.params.grid[0]:DEFAULT_GRID_X);y=y||(this.params.grid?this.params.grid[1]:DEFAULT_GRID_Y);var p=this.params.getPosition(dragEl),tx=this.params.grid?this.params.grid[0]/2:snapThreshold,ty=this.params.grid?this.params.grid[1]/2:snapThreshold;this.params.setPosition(dragEl,_snap(p,x,y,tx,ty));};this.setUseGhostProxy=function(val){useGhostProxy=val?TRUE:FALSE;};var constrain;var negativeFilter=function negativeFilter(pos){return params.allowNegative===false?[Math.max(0,pos[0]),Math.max(0,pos[1])]:pos;};var _setConstrain=function(value){constrain=typeof value==="function"?value:value?function(pos){return negativeFilter([Math.max(0,Math.min(constrainRect.w-this.size[0],pos[0])),Math.max(0,Math.min(constrainRect.h-this.size[1],pos[1]))]);}.bind(this):function(pos){return negativeFilter(pos);};}.bind(this);_setConstrain(typeof this.params.constrain==="function"?this.params.constrain:this.params.constrain||this.params.containment);/**\r\n         * Sets whether or not the Drag is constrained. A value of \'true\' means constrain to parent bounds; a function\r\n         * will be executed and returns true if the position is allowed.\r\n         * @param value\r\n         */this.setConstrain=function(value){_setConstrain(value);};var revertFunction;/**\r\n         * Sets a function to call on drag stop, which, if it returns true, indicates that the given element should\r\n         * revert to its position before the previous drag.\r\n         * @param fn\r\n         */this.setRevert=function(fn){revertFunction=fn;};var _assignId=function _assignId(obj){if(typeof obj==="function"){obj._katavorioId=_uuid();return obj._katavorioId;}else{return obj;}},// a map of { spec -> [ fn, exclusion ] } entries.\n_filters={},_testFilter=function _testFilter(e){for(var key in _filters){var f=_filters[key];var rv=f[0](e);if(f[1])rv=!rv;if(!rv)return false;}return true;},_setFilter=this.setFilter=function(f,_exclude){if(f){var key=_assignId(f);_filters[key]=[function(e){var t=e.srcElement||e.target,m;if(_isString(f)){m=matchesSelector(t,f,el);}else if(typeof f==="function"){m=f(e,el);}return m;},_exclude!==false];}},_addFilter=this.addFilter=_setFilter,_removeFilter=this.removeFilter=function(f){var key=typeof f==="function"?f._katavorioId:f;delete _filters[key];};this.clearAllFilters=function(){_filters={};};this.canDrag=this.params.canDrag||_true;var constrainRect,matchingDroppables=[],intersectingDroppables=[];this.downListener=function(e){var isNotRightClick=this.rightButtonCanDrag||e.which!==3&&e.button!==2;if(isNotRightClick&&this.isEnabled()&&this.canDrag()){var _f=_testFilter(e)&&_inputFilter(e,this.el,this.k);if(_f){if(!clone)dragEl=this.el;else{dragEl=this.el.cloneNode(true);dragEl.setAttribute("id",null);dragEl.style.position="absolute";// the clone node is added to the body; getOffsetRect gives us a value\n// relative to the body.\nvar b=getOffsetRect(this.el);dragEl.style.left=b.left+"px";dragEl.style.top=b.top+"px";this.params.addClass(dragEl,_classes.clonedDrag);document.body.appendChild(dragEl);}consumeStartEvent&&_consume(e);downAt=_pl(e);//\nthis.params.bind(document,"mousemove",this.moveListener);this.params.bind(document,"mouseup",this.upListener);k.markSelection(this);k.markPosses(this);this.params.addClass(document.body,css.noSelect);_dispatch("beforeStart",{el:this.el,pos:posAtDown,e:e,drag:this});}else if(this.params.consumeFilteredEvents){_consume(e);}}}.bind(this);this.moveListener=function(e){if(downAt){if(!moving){var _continue=_dispatch("start",{el:this.el,pos:posAtDown,e:e,drag:this});if(_continue!==false){if(!downAt){return;}this.mark(true);moving=true;}else{this.abort();}}// it is possible that the start event caused the drag to be aborted. So we check\n// again that we are currently dragging.\nif(downAt){intersectingDroppables.length=0;var pos=_pl(e),dx=pos[0]-downAt[0],dy=pos[1]-downAt[1],z=this.params.ignoreZoom?1:k.getZoom();dx/=z;dy/=z;this.moveBy(dx,dy,e);k.updateSelection(dx,dy,this);k.updatePosses(dx,dy,this);}}}.bind(this);this.upListener=function(e){if(downAt){downAt=null;this.params.unbind(document,"mousemove",this.moveListener);this.params.unbind(document,"mouseup",this.upListener);this.params.removeClass(document.body,css.noSelect);this.unmark(e);k.unmarkSelection(this,e);k.unmarkPosses(this,e);this.stop(e);k.notifySelectionDragStop(this,e);k.notifyPosseDragStop(this,e);moving=false;if(clone){dragEl&&dragEl.parentNode&&dragEl.parentNode.removeChild(dragEl);dragEl=null;}intersectingDroppables.length=0;if(revertFunction&&revertFunction(this.el,this.params.getPosition(this.el))===true){this.params.setPosition(this.el,posAtDown);_dispatch("revert",this.el);}}}.bind(this);this.getFilters=function(){return _filters;};this.abort=function(){if(downAt!=null)this.upListener();};this.getDragElement=function(){return dragEl||this.el;};var listeners={"start":[],"drag":[],"stop":[],"over":[],"out":[],"beforeStart":[],"revert":[]};if(params.events.start)listeners.start.push(params.events.start);if(params.events.beforeStart)listeners.beforeStart.push(params.events.beforeStart);if(params.events.stop)listeners.stop.push(params.events.stop);if(params.events.drag)listeners.drag.push(params.events.drag);if(params.events.revert)listeners.revert.push(params.events.revert);this.on=function(evt,fn){if(listeners[evt])listeners[evt].push(fn);};this.off=function(evt,fn){if(listeners[evt]){var l=[];for(var i=0;i<listeners[evt].length;i++){if(listeners[evt][i]!==fn)l.push(listeners[evt][i]);}listeners[evt]=l;}};var _dispatch=function _dispatch(evt,value){var result=null;if(listeners[evt]){for(var i=0;i<listeners[evt].length;i++){try{var v=listeners[evt][i](value);if(v!=null){result=v;}}catch(e){}}}return result;};this.notifyStart=function(e){_dispatch("start",{el:this.el,pos:this.params.getPosition(dragEl),e:e,drag:this});};this.stop=function(e,force){if(force||moving){var positions=[],sel=k.getSelection(),dPos=this.params.getPosition(dragEl);if(sel.length>1){for(var i=0;i<sel.length;i++){var p=this.params.getPosition(sel[i].el);positions.push([sel[i].el,{left:p[0],top:p[1]},sel[i]]);}}else{positions.push([dragEl,{left:dPos[0],top:dPos[1]},this]);}_dispatch("stop",{el:dragEl,pos:ghostProxyOffsets||dPos,finalPos:dPos,e:e,drag:this,selection:positions});}};this.mark=function(andNotify){posAtDown=this.params.getPosition(dragEl);pagePosAtDown=this.params.getPosition(dragEl,true);pageDelta=[pagePosAtDown[0]-posAtDown[0],pagePosAtDown[1]-posAtDown[1]];this.size=this.params.getSize(dragEl);matchingDroppables=k.getMatchingDroppables(this);_setDroppablesActive(matchingDroppables,true,false,this);this.params.addClass(dragEl,this.params.dragClass||css.drag);var cs;if(this.params.getConstrainingRectangle){cs=this.params.getConstrainingRectangle(dragEl);}else{cs=this.params.getSize(dragEl.parentNode);}constrainRect={w:cs[0],h:cs[1]};if(andNotify){k.notifySelectionDragStart(this);}};var ghostProxyOffsets;this.unmark=function(e,doNotCheckDroppables){_setDroppablesActive(matchingDroppables,false,true,this);if(isConstrained&&useGhostProxy(this.el)){ghostProxyOffsets=[dragEl.offsetLeft,dragEl.offsetTop];this.el.parentNode.removeChild(dragEl);dragEl=this.el;}else{ghostProxyOffsets=null;}this.params.removeClass(dragEl,this.params.dragClass||css.drag);matchingDroppables.length=0;isConstrained=false;if(!doNotCheckDroppables){if(intersectingDroppables.length>0&&ghostProxyOffsets){params.setPosition(this.el,ghostProxyOffsets);}intersectingDroppables.sort(_rankSort);for(var i=0;i<intersectingDroppables.length;i++){var retVal=intersectingDroppables[i].drop(this,e);if(retVal===true)break;}}};this.moveBy=function(dx,dy,e){intersectingDroppables.length=0;var desiredLoc=this.toGrid([posAtDown[0]+dx,posAtDown[1]+dy]),cPos=constrain(desiredLoc,dragEl);if(useGhostProxy(this.el)){if(desiredLoc[0]!==cPos[0]||desiredLoc[1]!==cPos[1]){if(!isConstrained){var gp=ghostProxy(this.el);params.addClass(gp,_classes.ghostProxy);this.el.parentNode.appendChild(gp);dragEl=gp;isConstrained=true;}cPos=desiredLoc;}else{if(isConstrained){this.el.parentNode.removeChild(dragEl);dragEl=this.el;isConstrained=false;}}}var rect={x:cPos[0],y:cPos[1],w:this.size[0],h:this.size[1]},pageRect={x:rect.x+pageDelta[0],y:rect.y+pageDelta[1],w:rect.w,h:rect.h},focusDropElement=null;this.params.setPosition(dragEl,cPos);for(var i=0;i<matchingDroppables.length;i++){var r2={x:matchingDroppables[i].pagePosition[0],y:matchingDroppables[i].pagePosition[1],w:matchingDroppables[i].size[0],h:matchingDroppables[i].size[1]};if(this.params.intersects(pageRect,r2)&&(_multipleDrop||focusDropElement==null||focusDropElement===matchingDroppables[i].el)&&matchingDroppables[i].canDrop(this)){if(!focusDropElement)focusDropElement=matchingDroppables[i].el;intersectingDroppables.push(matchingDroppables[i]);matchingDroppables[i].setHover(this,true,e);}else if(matchingDroppables[i].isHover()){matchingDroppables[i].setHover(this,false,e);}}_dispatch("drag",{el:this.el,pos:cPos,e:e,drag:this});/* test to see if the parent needs to be scrolled (future)\r\n             if (scroll) {\r\n             var pnsl = dragEl.parentNode.scrollLeft, pnst = dragEl.parentNode.scrollTop;\r\n             console.log("scroll!", pnsl, pnst);\r\n             }*/};this.destroy=function(){this.params.unbind(this.el,"mousedown",this.downListener);this.params.unbind(document,"mousemove",this.moveListener);this.params.unbind(document,"mouseup",this.upListener);this.downListener=null;this.upListener=null;this.moveListener=null;};// init:register mousedown, and perhaps set a filter\nthis.params.bind(this.el,"mousedown",this.downListener);// if handle provded, use that.  otherwise, try to set a filter.\n// note that a `handle` selector always results in filterExclude being set to false, ie.\n// the selector defines the handle element(s).\nif(this.params.handle)_setFilter(this.params.handle,false);else _setFilter(this.params.filter,this.params.filterExclude);};var Drop=function Drop(el,params,css,scope){this._class=css.droppable;this.params=params||{};this.rank=params.rank||0;this._activeClass=this.params.activeClass||css.active;this._hoverClass=this.params.hoverClass||css.hover;Super.apply(this,arguments);var hover=false;this.allowLoopback=this.params.allowLoopback!==false;this.setActive=function(val){this.params[val?"addClass":"removeClass"](this.el,this._activeClass);};this.updatePosition=function(){this.position=this.params.getPosition(this.el);this.pagePosition=this.params.getPosition(this.el,true);this.size=this.params.getSize(this.el);};this.canDrop=this.params.canDrop||function(drag){return true;};this.isHover=function(){return hover;};this.setHover=function(drag,val,e){// if turning off hover but this was not the drag that caused the hover, ignore.\nif(val||this.el._katavorioDragHover==null||this.el._katavorioDragHover===drag.el._katavorio){this.params[val?"addClass":"removeClass"](this.el,this._hoverClass);//this.el._katavorioDragHover = val ? drag.el._katavorio : null;\nthis.el._katavorioDragHover=val?drag.el._katavorio:null;if(hover!==val)this.params.events[val?"over":"out"]({el:this.el,e:e,drag:drag,drop:this});hover=val;}};this.drop=function(drag,event){return this.params.events["drop"]({drag:drag,e:event,drop:this});};this.destroy=function(){this._class=null;this._activeClass=null;this._hoverClass=null;//this.params = null;\nhover=null;//this.el = null;\n};};var _uuid=function _uuid(){return\'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx\'.replace(/[xy]/g,function(c){var r=Math.random()*16|0,v=c===\'x\'?r:r&0x3|0x8;return v.toString(16);});};var _rankSort=function _rankSort(a,b){return a.rank<b.rank?1:a.rank>b.rank?-1:0;};var _gel=function _gel(el){if(el==null)return null;el=typeof el==="string"||el.constructor===String?document.getElementById(el):el;if(el==null)return null;el._katavorio=el._katavorio||_uuid();return el;};root.Katavorio=function(katavorioParams){var _selection=[],_selectionMap={};this._dragsByScope={};this._dropsByScope={};var _zoom=1,_reg=function _reg(obj,map){_each(obj,function(_obj){for(var i=0;i<_obj.scopes.length;i++){map[_obj.scopes[i]]=map[_obj.scopes[i]]||[];map[_obj.scopes[i]].push(_obj);}});},_unreg=function _unreg(obj,map){var c=0;_each(obj,function(_obj){for(var i=0;i<_obj.scopes.length;i++){if(map[_obj.scopes[i]]){var idx=katavorioParams.indexOf(map[_obj.scopes[i]],_obj);if(idx!==-1){map[_obj.scopes[i]].splice(idx,1);c++;}}}});return c>0;},_getMatchingDroppables=this.getMatchingDroppables=function(drag){var dd=[],_m={};for(var i=0;i<drag.scopes.length;i++){var _dd=this._dropsByScope[drag.scopes[i]];if(_dd){for(var j=0;j<_dd.length;j++){if(_dd[j].canDrop(drag)&&!_m[_dd[j].uuid]&&(_dd[j].allowLoopback||_dd[j].el!==drag.el)){_m[_dd[j].uuid]=true;dd.push(_dd[j]);}}}}dd.sort(_rankSort);return dd;},_prepareParams=function(p){p=p||{};var _p={events:{}},i;for(i in katavorioParams){_p[i]=katavorioParams[i];}for(i in p){_p[i]=p[i];}// events\nfor(i=0;i<_events.length;i++){_p.events[_events[i]]=p[_events[i]]||_devNull;}_p.katavorio=this;return _p;}.bind(this),_mistletoe=function(existingDrag,params){for(var i=0;i<_events.length;i++){if(params[_events[i]]){existingDrag.on(_events[i],params[_events[i]]);}}}.bind(this),_css={},overrideCss=katavorioParams.css||{},_scope=katavorioParams.scope||_defaultScope;// prepare map of css classes based on defaults frst, then optional overrides\nfor(var i in _classes){_css[i]=_classes[i];}for(var i in overrideCss){_css[i]=overrideCss[i];}var inputFilterSelector=katavorioParams.inputFilterSelector||_defaultInputFilterSelector;/**\r\n         * Gets the selector identifying which input elements to filter from drag events.\r\n         * @method getInputFilterSelector\r\n         * @return {String} Current input filter selector.\r\n         */this.getInputFilterSelector=function(){return inputFilterSelector;};/**\r\n         * Sets the selector identifying which input elements to filter from drag events.\r\n         * @method setInputFilterSelector\r\n         * @param {String} selector Input filter selector to set.\r\n         * @return {Katavorio} Current instance; method may be chained.\r\n         */this.setInputFilterSelector=function(selector){inputFilterSelector=selector;return this;};this.draggable=function(el,params){var o=[];_each(el,function(_el){_el=_gel(_el);if(_el!=null){if(_el._katavorioDrag==null){var p=_prepareParams(params);_el._katavorioDrag=new Drag(_el,p,_css,_scope);_reg(_el._katavorioDrag,this._dragsByScope);o.push(_el._katavorioDrag);katavorioParams.addClass(_el,_css.draggable);}else{_mistletoe(_el._katavorioDrag,params);}}}.bind(this));return o;};this.droppable=function(el,params){var o=[];_each(el,function(_el){_el=_gel(_el);if(_el!=null){var drop=new Drop(_el,_prepareParams(params),_css,_scope);_el._katavorioDrop=_el._katavorioDrop||[];_el._katavorioDrop.push(drop);_reg(drop,this._dropsByScope);o.push(drop);katavorioParams.addClass(_el,_css.droppable);}}.bind(this));return o;};/**\r\n         * @name Katavorio#select\r\n         * @function\r\n         * @desc Adds an element to the current selection (for multiple node drag)\r\n         * @param {Element|String} DOM element - or id of the element - to add.\r\n         */this.select=function(el){_each(el,function(){var _el=_gel(this);if(_el&&_el._katavorioDrag){if(!_selectionMap[_el._katavorio]){_selection.push(_el._katavorioDrag);_selectionMap[_el._katavorio]=[_el,_selection.length-1];katavorioParams.addClass(_el,_css.selected);}}});return this;};/**\r\n         * @name Katavorio#deselect\r\n         * @function\r\n         * @desc Removes an element from the current selection (for multiple node drag)\r\n         * @param {Element|String} DOM element - or id of the element - to remove.\r\n         */this.deselect=function(el){_each(el,function(){var _el=_gel(this);if(_el&&_el._katavorio){var e=_selectionMap[_el._katavorio];if(e){var _s=[];for(var i=0;i<_selection.length;i++){if(_selection[i].el!==_el)_s.push(_selection[i]);}_selection=_s;delete _selectionMap[_el._katavorio];katavorioParams.removeClass(_el,_css.selected);}}});return this;};this.deselectAll=function(){for(var i in _selectionMap){var d=_selectionMap[i];katavorioParams.removeClass(d[0],_css.selected);}_selection.length=0;_selectionMap={};};this.markSelection=function(drag){_foreach(_selection,function(e){e.mark();},drag);};this.markPosses=function(drag){if(drag.posses){_each(drag.posses,function(p){if(drag.posseRoles[p]&&_posses[p]){_foreach(_posses[p].members,function(d){d.mark();},drag);}});}};this.unmarkSelection=function(drag,event){_foreach(_selection,function(e){e.unmark(event);},drag);};this.unmarkPosses=function(drag,event){if(drag.posses){_each(drag.posses,function(p){if(drag.posseRoles[p]&&_posses[p]){_foreach(_posses[p].members,function(d){d.unmark(event,true);},drag);}});}};this.getSelection=function(){return _selection.slice(0);};this.updateSelection=function(dx,dy,drag){_foreach(_selection,function(e){e.moveBy(dx,dy);},drag);};var _posseAction=function _posseAction(fn,drag){if(drag.posses){_each(drag.posses,function(p){if(drag.posseRoles[p]&&_posses[p]){_foreach(_posses[p].members,function(e){fn(e);},drag);}});}};this.updatePosses=function(dx,dy,drag){_posseAction(function(e){e.moveBy(dx,dy);},drag);};this.notifyPosseDragStop=function(drag,evt){_posseAction(function(e){e.stop(evt,true);},drag);};this.notifySelectionDragStop=function(drag,evt){_foreach(_selection,function(e){e.stop(evt,true);},drag);};this.notifySelectionDragStart=function(drag,evt){_foreach(_selection,function(e){e.notifyStart(evt);},drag);};this.setZoom=function(z){_zoom=z;};this.getZoom=function(){return _zoom;};// does the work of changing scopes\nvar _scopeManip=function _scopeManip(kObj,scopes,map,fn){_each(kObj,function(_kObj){_unreg(_kObj,map);// deregister existing scopes\n_kObj[fn](scopes);// set scopes\n_reg(_kObj,map);// register new ones\n});};_each(["set","add","remove","toggle"],function(v){this[v+"Scope"]=function(el,scopes){_scopeManip(el._katavorioDrag,scopes,this._dragsByScope,v+"Scope");_scopeManip(el._katavorioDrop,scopes,this._dropsByScope,v+"Scope");}.bind(this);this[v+"DragScope"]=function(el,scopes){_scopeManip(el.constructor===Drag?el:el._katavorioDrag,scopes,this._dragsByScope,v+"Scope");}.bind(this);this[v+"DropScope"]=function(el,scopes){_scopeManip(el.constructor===Drop?el:el._katavorioDrop,scopes,this._dropsByScope,v+"Scope");}.bind(this);}.bind(this));this.snapToGrid=function(x,y){for(var s in this._dragsByScope){_foreach(this._dragsByScope[s],function(d){d.snap(x,y);});}};this.getDragsForScope=function(s){return this._dragsByScope[s];};this.getDropsForScope=function(s){return this._dropsByScope[s];};var _destroy=function _destroy(el,type,map){el=_gel(el);if(el[type]){// remove from selection, if present.\nvar selIdx=_selection.indexOf(el[type]);if(selIdx>=0){_selection.splice(selIdx,1);}if(_unreg(el[type],map)){_each(el[type],function(kObj){kObj.destroy();});}delete el[type];}};var _removeListener=function _removeListener(el,type,evt,fn){el=_gel(el);if(el[type]){el[type].off(evt,fn);}};this.elementRemoved=function(el){this.destroyDraggable(el);this.destroyDroppable(el);};/**\r\n         * Either completely remove drag functionality from the given element, or remove a specific event handler. If you\r\n         * call this method with a single argument - the element - all drag functionality is removed from it. Otherwise, if\r\n         * you provide an event name and listener function, this function is de-registered (if found).\r\n         * @param el Element to update\r\n         * @param {string} [evt] Optional event name to unsubscribe\r\n         * @param {Function} [fn] Optional function to unsubscribe\r\n         */this.destroyDraggable=function(el,evt,fn){if(arguments.length===1){_destroy(el,"_katavorioDrag",this._dragsByScope);}else{_removeListener(el,"_katavorioDrag",evt,fn);}};/**\r\n         * Either completely remove drop functionality from the given element, or remove a specific event handler. If you\r\n         * call this method with a single argument - the element - all drop functionality is removed from it. Otherwise, if\r\n         * you provide an event name and listener function, this function is de-registered (if found).\r\n         * @param el Element to update\r\n         * @param {string} [evt] Optional event name to unsubscribe\r\n         * @param {Function} [fn] Optional function to unsubscribe\r\n         */this.destroyDroppable=function(el,evt,fn){if(arguments.length===1){_destroy(el,"_katavorioDrop",this._dropsByScope);}else{_removeListener(el,"_katavorioDrop",evt,fn);}};this.reset=function(){this._dragsByScope={};this._dropsByScope={};_selection=[];_selectionMap={};_posses={};};// ----- groups\nvar _posses={};var _processOneSpec=function _processOneSpec(el,_spec,dontAddExisting){var posseId=_isString(_spec)?_spec:_spec.id;var active=_isString(_spec)?true:_spec.active!==false;var posse=_posses[posseId]||function(){var g={name:posseId,members:[]};_posses[posseId]=g;return g;}();_each(el,function(_el){if(_el._katavorioDrag){if(dontAddExisting&&_el._katavorioDrag.posseRoles[posse.name]!=null)return;_suggest(posse.members,_el._katavorioDrag);_suggest(_el._katavorioDrag.posses,posse.name);_el._katavorioDrag.posseRoles[posse.name]=active;}});return posse;};/**\r\n         * Add the given element to the posse with the given id, creating the group if it at first does not exist.\r\n         * @method addToPosse\r\n         * @param {Element} el Element to add.\r\n         * @param {String...|Object...} spec Variable args parameters. Each argument can be a either a String, indicating\r\n         * the ID of a Posse to which the element should be added as an active participant, or an Object containing\r\n         * `{ id:"posseId", active:false/true}`. In the latter case, if `active` is not provided it is assumed to be\r\n         * true.\r\n         * @returns {Posse|Posse[]} The Posse(s) to which the element(s) was/were added.\r\n         */this.addToPosse=function(el,spec){var posses=[];for(var i=1;i<arguments.length;i++){posses.push(_processOneSpec(el,arguments[i]));}return posses.length===1?posses[0]:posses;};/**\r\n         * Sets the posse(s) for the element with the given id, creating those that do not yet exist, and removing from\r\n         * the element any current Posses that are not specified by this method call. This method will not change the\r\n         * active/passive state if it is given a posse in which the element is already a member.\r\n         * @method setPosse\r\n         * @param {Element} el Element to set posse(s) on.\r\n         * @param {String...|Object...} spec Variable args parameters. Each argument can be a either a String, indicating\r\n         * the ID of a Posse to which the element should be added as an active participant, or an Object containing\r\n         * `{ id:"posseId", active:false/true}`. In the latter case, if `active` is not provided it is assumed to be\r\n         * true.\r\n         * @returns {Posse|Posse[]} The Posse(s) to which the element(s) now belongs.\r\n         */this.setPosse=function(el,spec){var posses=[];for(var i=1;i<arguments.length;i++){posses.push(_processOneSpec(el,arguments[i],true).name);}_each(el,function(_el){if(_el._katavorioDrag){var diff=_difference(_el._katavorioDrag.posses,posses);var p=[];Array.prototype.push.apply(p,_el._katavorioDrag.posses);for(var i=0;i<diff.length;i++){this.removeFromPosse(_el,diff[i]);}}}.bind(this));return posses.length===1?posses[0]:posses;};/**\r\n         * Remove the given element from the given posse(s).\r\n         * @method removeFromPosse\r\n         * @param {Element} el Element to remove.\r\n         * @param {String...} posseId Varargs parameter: one value for each posse to remove the element from.\r\n         */this.removeFromPosse=function(el,posseId){if(arguments.length<2)throw new TypeError("No posse id provided for remove operation");for(var i=1;i<arguments.length;i++){posseId=arguments[i];_each(el,function(_el){if(_el._katavorioDrag&&_el._katavorioDrag.posses){var d=_el._katavorioDrag;_each(posseId,function(p){_vanquish(_posses[p].members,d);_vanquish(d.posses,p);delete d.posseRoles[p];});}});}};/**\r\n         * Remove the given element from all Posses to which it belongs.\r\n         * @method removeFromAllPosses\r\n         * @param {Element|Element[]} el Element to remove from Posses.\r\n         */this.removeFromAllPosses=function(el){_each(el,function(_el){if(_el._katavorioDrag&&_el._katavorioDrag.posses){var d=_el._katavorioDrag;_each(d.posses,function(p){_vanquish(_posses[p].members,d);});d.posses.length=0;d.posseRoles={};}});};/**\r\n         * Changes the participation state for the element in the Posse with the given ID.\r\n         * @param {Element|Element[]} el Element(s) to change state for.\r\n         * @param {String} posseId ID of the Posse to change element state for.\r\n         * @param {Boolean} state True to make active, false to make passive.\r\n         */this.setPosseState=function(el,posseId,state){var posse=_posses[posseId];if(posse){_each(el,function(_el){if(_el._katavorioDrag&&_el._katavorioDrag.posses){_el._katavorioDrag.posseRoles[posse.name]=state;}});}};};root.Katavorio.version="0.23.0";if(true){exports.Katavorio=root.Katavorio;}}).call(typeof window!==\'undefined\'?window:this);/*\r\n * This file contains utility functions that run in both browsers and headless.\r\n *\r\n * Copyright (c) 2010 - 2018 jsPlumb (hello@jsplumbtoolkit.com)\r\n *\r\n * https://jsplumbtoolkit.com\r\n * https://github.com/jsplumb/jsplumb\r\n *\r\n * Dual licensed under the MIT and GPL2 licenses.\r\n */;(function(){var _isa=function _isa(a){return Object.prototype.toString.call(a)==="[object Array]";},_isnum=function _isnum(n){return Object.prototype.toString.call(n)==="[object Number]";},_iss=function _iss(s){return typeof s==="string";},_isb=function _isb(s){return typeof s==="boolean";},_isnull=function _isnull(s){return s==null;},_iso=function _iso(o){return o==null?false:Object.prototype.toString.call(o)==="[object Object]";},_isd=function _isd(o){return Object.prototype.toString.call(o)==="[object Date]";},_isf=function _isf(o){return Object.prototype.toString.call(o)==="[object Function]";},_isNamedFunction=function _isNamedFunction(o){return _isf(o)&&o.name!=null&&o.name.length>0;},_ise=function _ise(o){for(var i in o){if(o.hasOwnProperty(i)){return false;}}return true;};var root=this;root.jsPlumbUtil={isArray:_isa,isString:_iss,isBoolean:_isb,isNull:_isnull,isObject:_iso,isDate:_isd,isFunction:_isf,isEmpty:_ise,isNumber:_isnum,clone:function clone(a){if(_iss(a)){return""+a;}else if(_isb(a)){return!!a;}else if(_isd(a)){return new Date(a.getTime());}else if(_isf(a)){return a;}else if(_isa(a)){var b=[];for(var i=0;i<a.length;i++){b.push(this.clone(a[i]));}return b;}else if(_iso(a)){var c={};for(var j in a){c[j]=this.clone(a[j]);}return c;}else{return a;}},merge:function merge(a,b,collations){// first change the collations array - if present - into a lookup table, because its faster.\nvar cMap={},ar,i;collations=collations||[];for(i=0;i<collations.length;i++){cMap[collations[i]]=true;}var c=this.clone(a);for(i in b){if(c[i]==null){c[i]=b[i];}else if(_iss(b[i])||_isb(b[i])){if(!cMap[i]){c[i]=b[i];// if we dont want to collate, just copy it in.\n}else{ar=[];// if c\'s object is also an array we can keep its values.\nar.push.apply(ar,_isa(c[i])?c[i]:[c[i]]);ar.push.apply(ar,_isa(b[i])?b[i]:[b[i]]);c[i]=ar;}}else{if(_isa(b[i])){ar=[];// if c\'s object is also an array we can keep its values.\nif(_isa(c[i])){ar.push.apply(ar,c[i]);}ar.push.apply(ar,b[i]);c[i]=ar;}else if(_iso(b[i])){// overwite c\'s value with an object if it is not already one.\nif(!_iso(c[i])){c[i]={};}for(var j in b[i]){c[i][j]=b[i][j];}}}}return c;},replace:function replace(inObj,path,value){if(inObj==null){return;}var q=inObj,t=q;path.replace(/([^\\.])+/g,function(term,lc,pos,str){var array=term.match(/([^\\[0-9]+){1}(\\[)([0-9+])/),last=pos+term.length>=str.length,_getArray=function _getArray(){return t[array[1]]||function(){t[array[1]]=[];return t[array[1]];}();};if(last){// set term = value on current t, creating term as array if necessary.\nif(array){_getArray()[array[3]]=value;}else{t[term]=value;}}else{// set to current t[term], creating t[term] if necessary.\nif(array){var a=_getArray();t=a[array[3]]||function(){a[array[3]]={};return a[array[3]];}();}else{t=t[term]||function(){t[term]={};return t[term];}();}}});return inObj;},//\n// chain a list of functions, supplied by [ object, method name, args ], and return on the first\n// one that returns the failValue. if none return the failValue, return the successValue.\n//\nfunctionChain:function functionChain(successValue,failValue,fns){for(var i=0;i<fns.length;i++){var o=fns[i][0][fns[i][1]].apply(fns[i][0],fns[i][2]);if(o===failValue){return o;}}return successValue;},// take the given model and expand out any parameters.\n// \'functionPrefix\' is optional, and if present, helps jsplumb figure out what to do if a value is a Function.\n// if you do not provide it, jsplumb will run the given values through any functions it finds, and use the function\'s\n// output as the value in the result. if you do provide the prefix, only functions that are named and have this prefix\n// will be executed; other functions will be passed as values to the output.\npopulate:function populate(model,values,functionPrefix){// for a string, see if it has parameter matches, and if so, try to make the substitutions.\nvar getValue=function getValue(fromString){var matches=fromString.match(/(\\${.*?})/g);if(matches!=null){for(var i=0;i<matches.length;i++){var val=values[matches[i].substring(2,matches[i].length-1)]||"";if(val!=null){fromString=fromString.replace(matches[i],val);}}}return fromString;},// process one entry.\n_one=function _one(d){if(d!=null){if(_iss(d)){return getValue(d);}else if(_isf(d)&&(functionPrefix==null||(d.name||"").indexOf(functionPrefix)===0)){return d(values);}else if(_isa(d)){var r=[];for(var i=0;i<d.length;i++){r.push(_one(d[i]));}return r;}else if(_iso(d)){var s={};for(var j in d){s[j]=_one(d[j]);}return s;}else{return d;}}};return _one(model);},findWithFunction:function findWithFunction(a,f){// CONVERTED\nif(a){for(var i=0;i<a.length;i++){if(f(a[i])){return i;}}}return-1;},removeWithFunction:function removeWithFunction(a,f){// CONVERTED\nvar idx=root.jsPlumbUtil.findWithFunction(a,f);if(idx>-1){a.splice(idx,1);}return idx!==-1;},remove:function remove(l,v){// CONVERTED\nvar idx=l.indexOf(v);if(idx>-1){l.splice(idx,1);}return idx!==-1;},// TODO support insert index\naddWithFunction:function addWithFunction(list,item,hashFunction){if(root.jsPlumbUtil.findWithFunction(list,hashFunction)===-1){list.push(item);}},addToList:function addToList(map,key,value,insertAtStart){var l=map[key];if(l==null){l=[];map[key]=l;}l[insertAtStart?"unshift":"push"](value);return l;},suggest:function suggest(list,item,insertAtHead){if(list.indexOf(item)===-1){if(insertAtHead){list.unshift(item);}else{list.push(item);}return true;}return false;},//\n// extends the given obj (which can be an array) with the given constructor function, prototype functions, and\n// class members, any of which may be null.\n//\nextend:function extend(child,parent,_protoFn){var i;parent=_isa(parent)?parent:[parent];for(i=0;i<parent.length;i++){for(var j in parent[i].prototype){if(parent[i].prototype.hasOwnProperty(j)){child.prototype[j]=parent[i].prototype[j];}}}var _makeFn=function _makeFn(name,protoFn){return function(){for(i=0;i<parent.length;i++){if(parent[i].prototype[name]){parent[i].prototype[name].apply(this,arguments);}}return protoFn.apply(this,arguments);};};var _oneSet=function _oneSet(fns){for(var k in fns){child.prototype[k]=_makeFn(k,fns[k]);}};if(arguments.length>2){for(i=2;i<arguments.length;i++){_oneSet(arguments[i]);}}return child;},uuid:function uuid(){return\'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx\'.replace(/[xy]/g,function(c){var r=Math.random()*16|0,v=c===\'x\'?r:r&0x3|0x8;return v.toString(16);});},logEnabled:true,log:function log(){if(root.jsPlumbUtil.logEnabled&&typeof console!=="undefined"){try{var msg=arguments[arguments.length-1];console.log(msg);}catch(e){}}},/**\r\n         * Wraps one function with another, creating a placeholder for the\r\n         * wrapped function if it was null. this is used to wrap the various\r\n         * drag/drop event functions - to allow jsPlumb to be notified of\r\n         * important lifecycle events without imposing itself on the user\'s\r\n         * drag/drop functionality.\r\n         * @method jsPlumbUtil.wrap\r\n         * @param {Function} wrappedFunction original function to wrap; may be null.\r\n         * @param {Function} newFunction function to wrap the original with.\r\n         * @param {Object} [returnOnThisValue] Optional. Indicates that the wrappedFunction should\r\n         * not be executed if the newFunction returns a value matching \'returnOnThisValue\'.\r\n         * note that this is a simple comparison and only works for primitives right now.\r\n         */wrap:function wrap(wrappedFunction,newFunction,returnOnThisValue){return function(){var r=null;try{if(newFunction!=null){r=newFunction.apply(this,arguments);}}catch(e){root.jsPlumbUtil.log("jsPlumb function failed : "+e);}if(wrappedFunction!=null&&(returnOnThisValue==null||r!==returnOnThisValue)){try{r=wrappedFunction.apply(this,arguments);}catch(e){root.jsPlumbUtil.log("wrapped function failed : "+e);}}return r;};}};root.jsPlumbUtil.EventGenerator=function(){var _listeners={},eventsSuspended=false,tick=false,// this is a list of events that should re-throw any errors that occur during their dispatch. it is current private.\neventsToDieOn={"ready":true},queue=[];this.bind=function(event,listener,insertAtStart){var _one=function _one(evt){root.jsPlumbUtil.addToList(_listeners,evt,listener,insertAtStart);listener.__jsPlumb=listener.__jsPlumb||{};listener.__jsPlumb[root.jsPlumbUtil.uuid()]=evt;};if(typeof event==="string"){_one(event);}else if(event.length!=null){for(var i=0;i<event.length;i++){_one(event[i]);}}return this;};this.fire=function(event,value,originalEvent){if(!tick){tick=true;if(!eventsSuspended&&_listeners[event]){var l=_listeners[event].length,i=0,_gone=false,ret=null;if(!this.shouldFireEvent||this.shouldFireEvent(event,value,originalEvent)){while(!_gone&&i<l&&ret!==false){// doing it this way rather than catching and then possibly re-throwing means that an error propagated by this\n// method will have the whole call stack available in the debugger.\nif(eventsToDieOn[event]){_listeners[event][i].apply(this,[value,originalEvent]);}else{try{ret=_listeners[event][i].apply(this,[value,originalEvent]);}catch(e){root.jsPlumbUtil.log("jsPlumb: fire failed for event "+event+" : "+e);}}i++;if(_listeners==null||_listeners[event]==null){_gone=true;}}}}tick=false;_drain();}else{queue.unshift(arguments);}return this;};var _drain=function(){var n=queue.pop();if(n){this.fire.apply(this,n);}}.bind(this);this.unbind=function(eventOrListener,listener){if(arguments.length===0){_listeners={};}else if(arguments.length===1){if(typeof eventOrListener==="string"){delete _listeners[eventOrListener];}else if(eventOrListener.__jsPlumb){var evt;for(var i in eventOrListener.__jsPlumb){evt=eventOrListener.__jsPlumb[i];root.jsPlumbUtil.remove(_listeners[evt]||[],eventOrListener);}}}else if(arguments.length===2){root.jsPlumbUtil.remove(_listeners[eventOrListener]||[],listener);}return this;};this.getListener=function(forEvent){return _listeners[forEvent];};this.setSuspendEvents=function(val){eventsSuspended=val;};this.isSuspendEvents=function(){return eventsSuspended;};this.silently=function(fn){this.setSuspendEvents(true);try{fn();}catch(e){root.jsPlumbUtil.log("Cannot execute silent function "+e);}this.setSuspendEvents(false);};this.cleanupListeners=function(){for(var i in _listeners){_listeners[i]=null;}};};root.jsPlumbUtil.EventGenerator.prototype={cleanup:function cleanup(){this.cleanupListeners();}};if(true){exports.jsPlumbUtil=root.jsPlumbUtil;}}).call(typeof window!==\'undefined\'?window:this);/*\r\n * This file contains utility functions that run in browsers only.\r\n *\r\n * Copyright (c) 2010 - 2018 jsPlumb (hello@jsplumbtoolkit.com)\r\n *\r\n * https://jsplumbtoolkit.com\r\n * https://github.com/jsplumb/jsplumb\r\n *\r\n * Dual licensed under the MIT and GPL2 licenses.\r\n */;(function(){"use strict";var root=this;root.jsPlumbUtil.matchesSelector=function(el,selector,ctx){ctx=ctx||el.parentNode;var possibles=ctx.querySelectorAll(selector);for(var i=0;i<possibles.length;i++){if(possibles[i]===el){return true;}}return false;};root.jsPlumbUtil.consume=function(e,doNotPreventDefault){if(e.stopPropagation){e.stopPropagation();}else{e.returnValue=false;}if(!doNotPreventDefault&&e.preventDefault){e.preventDefault();}};/*\r\n    * Function: sizeElement\r\n    * Helper to size and position an element. You would typically use\r\n    * this when writing your own Connector or Endpoint implementation.\r\n    *\r\n    * Parameters:\r\n    *  x - [int] x position for the element origin\r\n    *  y - [int] y position for the element origin\r\n    *  w - [int] width of the element\r\n    *  h - [int] height of the element\r\n    *\r\n    */root.jsPlumbUtil.sizeElement=function(el,x,y,w,h){if(el){el.style.height=h+"px";el.height=h;el.style.width=w+"px";el.width=w;el.style.left=x+"px";el.style.top=y+"px";}};}).call(typeof window!==\'undefined\'?window:this);/*\r\n * This file contains the core code.\r\n *\r\n * Copyright (c) 2010 - 2018 jsPlumb (hello@jsplumbtoolkit.com)\r\n *\r\n * https://jsplumbtoolkit.com\r\n * https://github.com/jsplumb/jsplumb\r\n *\r\n * Dual licensed under the MIT and GPL2 licenses.\r\n */;(function(){"use strict";var root=this;var _ju=root.jsPlumbUtil,/**\r\n         * creates a timestamp, using milliseconds since 1970, but as a string.\r\n         */_timestamp=function _timestamp(){return""+new Date().getTime();},// helper method to update the hover style whenever it, or paintStyle, changes.\n// we use paintStyle as the foundation and merge hoverPaintStyle over the\n// top.\n_updateHoverStyle=function _updateHoverStyle(component){if(component._jsPlumb.paintStyle&&component._jsPlumb.hoverPaintStyle){var mergedHoverStyle={};jsPlumb.extend(mergedHoverStyle,component._jsPlumb.paintStyle);jsPlumb.extend(mergedHoverStyle,component._jsPlumb.hoverPaintStyle);delete component._jsPlumb.hoverPaintStyle;// we want the fill of paintStyle to override a gradient, if possible.\nif(mergedHoverStyle.gradient&&component._jsPlumb.paintStyle.fill){delete mergedHoverStyle.gradient;}component._jsPlumb.hoverPaintStyle=mergedHoverStyle;}},events=["tap","dbltap","click","dblclick","mouseover","mouseout","mousemove","mousedown","mouseup","contextmenu"],eventFilters={"mouseout":"mouseleave","mouseexit":"mouseleave"},_updateAttachedElements=function _updateAttachedElements(component,state,timestamp,sourceElement){var affectedElements=component.getAttachedElements();if(affectedElements){for(var i=0,j=affectedElements.length;i<j;i++){if(!sourceElement||sourceElement!==affectedElements[i]){affectedElements[i].setHover(state,true,timestamp);// tell the attached elements not to inform their own attached elements.\n}}}},_splitType=function _splitType(t){return t==null?null:t.split(" ");},_mapType=function _mapType(map,obj,typeId){for(var i in obj){map[i]=typeId;}},_each=function _each(fn,obj){obj=_ju.isArray(obj)||obj.length!=null&&!_ju.isString(obj)?obj:[obj];for(var i=0;i<obj.length;i++){try{fn.apply(obj[i],[obj[i]]);}catch(e){_ju.log(".each iteration failed : "+e);}}},_applyTypes=function _applyTypes(component,params,doNotRepaint){if(component.getDefaultType){var td=component.getTypeDescriptor(),map={};var defType=component.getDefaultType();var o=_ju.merge({},defType);_mapType(map,defType,"__default");for(var i=0,j=component._jsPlumb.types.length;i<j;i++){var tid=component._jsPlumb.types[i];if(tid!=="__default"){var _t=component._jsPlumb.instance.getType(tid,td);if(_t!=null){o=_ju.merge(o,_t,["cssClass"]);_mapType(map,_t,tid);}}}if(params){o=_ju.populate(o,params,"_");}component.applyType(o,doNotRepaint,map);if(!doNotRepaint){component.repaint();}}},// ------------------------------ BEGIN jsPlumbUIComponent --------------------------------------------\njsPlumbUIComponent=root.jsPlumbUIComponent=function(params){_ju.EventGenerator.apply(this,arguments);var self=this,a=arguments,idPrefix=self.idPrefix,id=idPrefix+new Date().getTime();this._jsPlumb={instance:params._jsPlumb,parameters:params.parameters||{},paintStyle:null,hoverPaintStyle:null,paintStyleInUse:null,hover:false,beforeDetach:params.beforeDetach,beforeDrop:params.beforeDrop,overlayPlacements:[],hoverClass:params.hoverClass||params._jsPlumb.Defaults.HoverClass,types:[],typeCache:{}};this.cacheTypeItem=function(key,item,typeId){this._jsPlumb.typeCache[typeId]=this._jsPlumb.typeCache[typeId]||{};this._jsPlumb.typeCache[typeId][key]=item;};this.getCachedTypeItem=function(key,typeId){return this._jsPlumb.typeCache[typeId]?this._jsPlumb.typeCache[typeId][key]:null;};this.getId=function(){return id;};// ----------------------------- default type --------------------------------------------\nvar o=params.overlays||[],oo={};if(this.defaultOverlayKeys){for(var i=0;i<this.defaultOverlayKeys.length;i++){Array.prototype.push.apply(o,this._jsPlumb.instance.Defaults[this.defaultOverlayKeys[i]]||[]);}for(i=0;i<o.length;i++){// if a string, convert to object representation so that we can store the typeid on it.\n// also assign an id.\nvar fo=jsPlumb.convertToFullOverlaySpec(o[i]);oo[fo[1].id]=fo;}}var _defaultType={overlays:oo,parameters:params.parameters||{},scope:params.scope||this._jsPlumb.instance.getDefaultScope()};this.getDefaultType=function(){return _defaultType;};this.appendToDefaultType=function(obj){for(var i in obj){_defaultType[i]=obj[i];}};// ----------------------------- end default type --------------------------------------------\n// all components can generate events\nif(params.events){for(var evtName in params.events){self.bind(evtName,params.events[evtName]);}}// all components get this clone function.\n// TODO issue 116 showed a problem with this - it seems \'a\' that is in\n// the clone function\'s scope is shared by all invocations of it, the classic\n// JS closure problem.  for now, jsPlumb does a version of this inline where\n// it used to call clone.  but it would be nice to find some time to look\n// further at this.\nthis.clone=function(){var o=Object.create(this.constructor.prototype);this.constructor.apply(o,a);return o;}.bind(this);// user can supply a beforeDetach callback, which will be executed before a detach\n// is performed; returning false prevents the detach.\nthis.isDetachAllowed=function(connection){var r=true;if(this._jsPlumb.beforeDetach){try{r=this._jsPlumb.beforeDetach(connection);}catch(e){_ju.log("jsPlumb: beforeDetach callback failed",e);}}return r;};// user can supply a beforeDrop callback, which will be executed before a dropped\n// connection is confirmed. user can return false to reject connection.\nthis.isDropAllowed=function(sourceId,targetId,scope,connection,dropEndpoint,source,target){var r=this._jsPlumb.instance.checkCondition("beforeDrop",{sourceId:sourceId,targetId:targetId,scope:scope,connection:connection,dropEndpoint:dropEndpoint,source:source,target:target});if(this._jsPlumb.beforeDrop){try{r=this._jsPlumb.beforeDrop({sourceId:sourceId,targetId:targetId,scope:scope,connection:connection,dropEndpoint:dropEndpoint,source:source,target:target});}catch(e){_ju.log("jsPlumb: beforeDrop callback failed",e);}}return r;};var domListeners=[];// sets the component associated with listener events. for instance, an overlay delegates\n// its events back to a connector. but if the connector is swapped on the underlying connection,\n// then this component must be changed. This is called by setConnector in the Connection class.\nthis.setListenerComponent=function(c){for(var i=0;i<domListeners.length;i++){domListeners[i][3]=c;}};};var _removeTypeCssHelper=function _removeTypeCssHelper(component,typeIndex){var typeId=component._jsPlumb.types[typeIndex],type=component._jsPlumb.instance.getType(typeId,component.getTypeDescriptor());if(type!=null&&type.cssClass&&component.canvas){component._jsPlumb.instance.removeClass(component.canvas,type.cssClass);}};_ju.extend(root.jsPlumbUIComponent,_ju.EventGenerator,{getParameter:function getParameter(name){return this._jsPlumb.parameters[name];},setParameter:function setParameter(name,value){this._jsPlumb.parameters[name]=value;},getParameters:function getParameters(){return this._jsPlumb.parameters;},setParameters:function setParameters(p){this._jsPlumb.parameters=p;},getClass:function getClass(){return jsPlumb.getClass(this.canvas);},hasClass:function hasClass(clazz){return jsPlumb.hasClass(this.canvas,clazz);},addClass:function addClass(clazz){jsPlumb.addClass(this.canvas,clazz);},removeClass:function removeClass(clazz){jsPlumb.removeClass(this.canvas,clazz);},updateClasses:function updateClasses(classesToAdd,classesToRemove){jsPlumb.updateClasses(this.canvas,classesToAdd,classesToRemove);},setType:function setType(typeId,params,doNotRepaint){this.clearTypes();this._jsPlumb.types=_splitType(typeId)||[];_applyTypes(this,params,doNotRepaint);},getType:function getType(){return this._jsPlumb.types;},reapplyTypes:function reapplyTypes(params,doNotRepaint){_applyTypes(this,params,doNotRepaint);},hasType:function hasType(typeId){return this._jsPlumb.types.indexOf(typeId)!==-1;},addType:function addType(typeId,params,doNotRepaint){var t=_splitType(typeId),_cont=false;if(t!=null){for(var i=0,j=t.length;i<j;i++){if(!this.hasType(t[i])){this._jsPlumb.types.push(t[i]);_cont=true;}}if(_cont){_applyTypes(this,params,doNotRepaint);}}},removeType:function removeType(typeId,params,doNotRepaint){var t=_splitType(typeId),_cont=false,_one=function(tt){var idx=this._jsPlumb.types.indexOf(tt);if(idx!==-1){// remove css class if necessary\n_removeTypeCssHelper(this,idx);this._jsPlumb.types.splice(idx,1);return true;}return false;}.bind(this);if(t!=null){for(var i=0,j=t.length;i<j;i++){_cont=_one(t[i])||_cont;}if(_cont){_applyTypes(this,params,doNotRepaint);}}},clearTypes:function clearTypes(params,doNotRepaint){var i=this._jsPlumb.types.length;for(var j=0;j<i;j++){_removeTypeCssHelper(this,0);this._jsPlumb.types.splice(0,1);}_applyTypes(this,params,doNotRepaint);},toggleType:function toggleType(typeId,params,doNotRepaint){var t=_splitType(typeId);if(t!=null){for(var i=0,j=t.length;i<j;i++){var idx=this._jsPlumb.types.indexOf(t[i]);if(idx!==-1){_removeTypeCssHelper(this,idx);this._jsPlumb.types.splice(idx,1);}else{this._jsPlumb.types.push(t[i]);}}_applyTypes(this,params,doNotRepaint);}},applyType:function applyType(t,doNotRepaint){this.setPaintStyle(t.paintStyle,doNotRepaint);this.setHoverPaintStyle(t.hoverPaintStyle,doNotRepaint);if(t.parameters){for(var i in t.parameters){this.setParameter(i,t.parameters[i]);}}this._jsPlumb.paintStyleInUse=this.getPaintStyle();},setPaintStyle:function setPaintStyle(style,doNotRepaint){// this._jsPlumb.paintStyle = jsPlumb.extend({}, style);\n// TODO figure out if we want components to clone paintStyle so as not to share it.\nthis._jsPlumb.paintStyle=style;this._jsPlumb.paintStyleInUse=this._jsPlumb.paintStyle;_updateHoverStyle(this);if(!doNotRepaint){this.repaint();}},getPaintStyle:function getPaintStyle(){return this._jsPlumb.paintStyle;},setHoverPaintStyle:function setHoverPaintStyle(style,doNotRepaint){//this._jsPlumb.hoverPaintStyle = jsPlumb.extend({}, style);\n// TODO figure out if we want components to clone paintStyle so as not to share it.\nthis._jsPlumb.hoverPaintStyle=style;_updateHoverStyle(this);if(!doNotRepaint){this.repaint();}},getHoverPaintStyle:function getHoverPaintStyle(){return this._jsPlumb.hoverPaintStyle;},destroy:function destroy(force){if(force||this.typeId==null){this.cleanupListeners();// this is on EventGenerator\nthis.clone=null;this._jsPlumb=null;}},isHover:function isHover(){return this._jsPlumb.hover;},setHover:function setHover(hover,ignoreAttachedElements,timestamp){// while dragging, we ignore these events.  this keeps the UI from flashing and\n// swishing and whatevering.\nif(this._jsPlumb&&!this._jsPlumb.instance.currentlyDragging&&!this._jsPlumb.instance.isHoverSuspended()){this._jsPlumb.hover=hover;var method=hover?"addClass":"removeClass";if(this.canvas!=null){if(this._jsPlumb.instance.hoverClass!=null){this._jsPlumb.instance[method](this.canvas,this._jsPlumb.instance.hoverClass);}if(this._jsPlumb.hoverClass!=null){this._jsPlumb.instance[method](this.canvas,this._jsPlumb.hoverClass);}}if(this._jsPlumb.hoverPaintStyle!=null){this._jsPlumb.paintStyleInUse=hover?this._jsPlumb.hoverPaintStyle:this._jsPlumb.paintStyle;if(!this._jsPlumb.instance.isSuspendDrawing()){timestamp=timestamp||_timestamp();this.repaint({timestamp:timestamp,recalc:false});}}// get the list of other affected elements, if supported by this component.\n// for a connection, its the endpoints.  for an endpoint, its the connections! surprise.\nif(this.getAttachedElements&&!ignoreAttachedElements){_updateAttachedElements(this,hover,_timestamp(),this);}}}});// ------------------------------ END jsPlumbUIComponent --------------------------------------------\nvar _jsPlumbInstanceIndex=0,getInstanceIndex=function getInstanceIndex(){var i=_jsPlumbInstanceIndex+1;_jsPlumbInstanceIndex++;return i;};var jsPlumbInstance=root.jsPlumbInstance=function(_defaults){this.version="2.6.9";if(_defaults){jsPlumb.extend(this.Defaults,_defaults);}this.logEnabled=this.Defaults.LogEnabled;this._connectionTypes={};this._endpointTypes={};_ju.EventGenerator.apply(this);var _currentInstance=this,_instanceIndex=getInstanceIndex(),_bb=_currentInstance.bind,_initialDefaults={},_zoom=1,_info=function _info(el){if(el==null){return null;}else if(el.nodeType===3||el.nodeType===8){return{el:el,text:true};}else{var _el=_currentInstance.getElement(el);return{el:_el,id:_ju.isString(el)&&_el==null?el:_getId(_el)};}};this.getInstanceIndex=function(){return _instanceIndex;};// CONVERTED\nthis.setZoom=function(z,repaintEverything){_zoom=z;_currentInstance.fire("zoom",_zoom);if(repaintEverything){_currentInstance.repaintEverything();}return true;};// CONVERTED\nthis.getZoom=function(){return _zoom;};for(var i in this.Defaults){_initialDefaults[i]=this.Defaults[i];}var _container,_containerDelegations=[];this.unbindContainer=function(){if(_container!=null&&_containerDelegations.length>0){for(var i=0;i<_containerDelegations.length;i++){_currentInstance.off(_container,_containerDelegations[i][0],_containerDelegations[i][1]);}}};this.setContainer=function(c){this.unbindContainer();// get container as dom element.\nc=this.getElement(c);// move existing connections and endpoints, if any.\nthis.select().each(function(conn){conn.moveParent(c);});this.selectEndpoints().each(function(ep){ep.moveParent(c);});// set container.\nvar previousContainer=_container;_container=c;_containerDelegations.length=0;var eventAliases={"endpointclick":"endpointClick","endpointdblclick":"endpointDblClick"};var _oneDelegateHandler=function _oneDelegateHandler(id,e,componentType){var t=e.srcElement||e.target,jp=(t&&t.parentNode?t.parentNode._jsPlumb:null)||(t?t._jsPlumb:null)||(t&&t.parentNode&&t.parentNode.parentNode?t.parentNode.parentNode._jsPlumb:null);if(jp){jp.fire(id,jp,e);var alias=componentType?eventAliases[componentType+id]||id:id;// jsplumb also fires every event coming from components/overlays. That\'s what the test for `jp.component` is for.\n_currentInstance.fire(alias,jp.component||jp,e);}};var _addOneDelegate=function _addOneDelegate(eventId,selector,fn){_containerDelegations.push([eventId,fn]);_currentInstance.on(_container,eventId,selector,fn);};// delegate one event on the container to jsplumb elements. it might be possible to\n// abstract this out: each of endpoint, connection and overlay could register themselves with\n// jsplumb as "component types" or whatever, and provide a suitable selector. this would be\n// done by the renderer (although admittedly from 2.0 onwards we\'re not supporting vml anymore)\nvar _oneDelegate=function _oneDelegate(id){// connections.\n_addOneDelegate(id,".jtk-connector",function(e){_oneDelegateHandler(id,e);});// endpoints. note they can have an enclosing div, or not.\n_addOneDelegate(id,".jtk-endpoint",function(e){_oneDelegateHandler(id,e,"endpoint");});// overlays\n_addOneDelegate(id,".jtk-overlay",function(e){_oneDelegateHandler(id,e);});};for(var i=0;i<events.length;i++){_oneDelegate(events[i]);}// managed elements\nfor(var elId in managedElements){var el=managedElements[elId].el;if(el.parentNode===previousContainer){previousContainer.removeChild(el);_container.appendChild(el);}}};this.getContainer=function(){return _container;};this.bind=function(event,fn){if("ready"===event&&initialized){fn();}else{_bb.apply(_currentInstance,[event,fn]);}};_currentInstance.importDefaults=function(d){for(var i in d){_currentInstance.Defaults[i]=d[i];}if(d.Container){_currentInstance.setContainer(d.Container);}return _currentInstance;};_currentInstance.restoreDefaults=function(){_currentInstance.Defaults=jsPlumb.extend({},_initialDefaults);return _currentInstance;};var log=null,initialized=false,// TODO remove from window scope\nconnections=[],// map of element id -> endpoint lists. an element can have an arbitrary\n// number of endpoints on it, and not all of them have to be connected\n// to anything.\nendpointsByElement={},endpointsByUUID={},managedElements={},offsets={},offsetTimestamps={},draggableStates={},connectionBeingDragged=false,sizes=[],_suspendDrawing=false,_suspendedAt=null,DEFAULT_SCOPE=this.Defaults.Scope,_curIdStamp=1,_idstamp=function _idstamp(){return""+_curIdStamp++;},//\n// appends an element to some other element, which is calculated as follows:\n//\n// 1. if Container exists, use that element.\n// 2. if the \'parent\' parameter exists, use that.\n// 3. otherwise just use the root element.\n//\n//\n_appendElement=function(el,parent){if(_container){_container.appendChild(el);}else if(!parent){this.appendToRoot(el);}else{this.getElement(parent).appendChild(el);}}.bind(this),//\n// Draws an endpoint and its connections. this is the main entry point into drawing connections as well\n// as endpoints, since jsPlumb is endpoint-centric under the hood.\n//\n// @param element element to draw (of type library specific element object)\n// @param ui UI object from current library\'s event system. optional.\n// @param timestamp timestamp for this paint cycle. used to speed things up a little by cutting down the amount of offset calculations we do.\n// @param clearEdits defaults to false; indicates that mouse edits for connectors should be cleared\n///\n_draw=function _draw(element,ui,timestamp,clearEdits){if(!_suspendDrawing){var id=_getId(element),repaintEls,dm=_currentInstance.getDragManager();if(dm){repaintEls=dm.getElementsForDraggable(id);}if(timestamp==null){timestamp=_timestamp();}// update the offset of everything _before_ we try to draw anything.\nvar o=_updateOffset({elId:id,offset:ui,recalc:false,timestamp:timestamp});if(repaintEls&&o&&o.o){for(var i in repaintEls){_updateOffset({elId:repaintEls[i].id,offset:{left:o.o.left+repaintEls[i].offset.left,top:o.o.top+repaintEls[i].offset.top},recalc:false,timestamp:timestamp});}}_currentInstance.anchorManager.redraw(id,ui,timestamp,null,clearEdits);if(repaintEls){for(var j in repaintEls){_currentInstance.anchorManager.redraw(repaintEls[j].id,ui,timestamp,repaintEls[j].offset,clearEdits,true);}}}},//\n// gets an Endpoint by uuid.\n//\n_getEndpoint=function _getEndpoint(uuid){return endpointsByUUID[uuid];},/**\r\n             * inits a draggable if it\'s not already initialised.\r\n             * TODO: somehow abstract this to the adapter, because the concept of "draggable" has no\r\n             * place on the server.\r\n             */_initDraggableIfNecessary=function _initDraggableIfNecessary(element,isDraggable,dragOptions,id,fireEvent){// move to DragManager?\nif(!jsPlumb.headless){var _draggable=isDraggable==null?false:isDraggable;if(_draggable){if(jsPlumb.isDragSupported(element,_currentInstance)){var options=dragOptions||_currentInstance.Defaults.DragOptions;options=jsPlumb.extend({},options);// make a copy.\nif(!jsPlumb.isAlreadyDraggable(element,_currentInstance)){var dragEvent=jsPlumb.dragEvents.drag,stopEvent=jsPlumb.dragEvents.stop,startEvent=jsPlumb.dragEvents.start,_started=false;_manage(id,element);options[startEvent]=_ju.wrap(options[startEvent],function(){_currentInstance.setHoverSuspended(true);_currentInstance.select({source:element}).addClass(_currentInstance.elementDraggingClass+" "+_currentInstance.sourceElementDraggingClass,true);_currentInstance.select({target:element}).addClass(_currentInstance.elementDraggingClass+" "+_currentInstance.targetElementDraggingClass,true);_currentInstance.setConnectionBeingDragged(true);if(options.canDrag){return dragOptions.canDrag();}},false);options[dragEvent]=_ju.wrap(options[dragEvent],function(){var ui=_currentInstance.getUIPosition(arguments,_currentInstance.getZoom());if(ui!=null){_draw(element,ui,null,true);if(_started){_currentInstance.addClass(element,"jtk-dragged");}_started=true;}});options[stopEvent]=_ju.wrap(options[stopEvent],function(){var elements=arguments[0].selection,uip;var _one=function _one(_e){if(_e[1]!=null){// run the reported offset through the code that takes parent containers\n// into account, to adjust if necessary (issue 554)\nuip=_currentInstance.getUIPosition([{el:_e[2].el,pos:[_e[1].left,_e[1].top]}]);_draw(_e[2].el,uip);}_currentInstance.removeClass(_e[0],"jtk-dragged");_currentInstance.select({source:_e[2].el}).removeClass(_currentInstance.elementDraggingClass+" "+_currentInstance.sourceElementDraggingClass,true);_currentInstance.select({target:_e[2].el}).removeClass(_currentInstance.elementDraggingClass+" "+_currentInstance.targetElementDraggingClass,true);_currentInstance.getDragManager().dragEnded(_e[2].el);};for(var i=0;i<elements.length;i++){_one(elements[i]);}_started=false;_currentInstance.setHoverSuspended(false);_currentInstance.setConnectionBeingDragged(false);});var elId=_getId(element);// need ID\ndraggableStates[elId]=true;var draggable=draggableStates[elId];options.disabled=draggable==null?false:!draggable;_currentInstance.initDraggable(element,options);_currentInstance.getDragManager().register(element);if(fireEvent){_currentInstance.fire("elementDraggable",{el:element,options:options});}}else{// already draggable. attach any start, drag or stop listeners to the current Drag.\nif(dragOptions.force){_currentInstance.initDraggable(element,options);}}}}}},_scopeMatch=function _scopeMatch(e1,e2){var s1=e1.scope.split(/\\s/),s2=e2.scope.split(/\\s/);for(var i=0;i<s1.length;i++){for(var j=0;j<s2.length;j++){if(s2[j]===s1[i]){return true;}}}return false;},_mergeOverrides=function _mergeOverrides(def,values){var m=jsPlumb.extend({},def);for(var i in values){if(values[i]){m[i]=values[i];}}return m;},/*\r\n         * prepares a final params object that can be passed to _newConnection, taking into account defaults, events, etc.\r\n         */_prepareConnectionParams=function(params,referenceParams){var _p=jsPlumb.extend({},params);if(referenceParams){jsPlumb.extend(_p,referenceParams);}// hotwire endpoints passed as source or target to sourceEndpoint/targetEndpoint, respectively.\nif(_p.source){if(_p.source.endpoint){_p.sourceEndpoint=_p.source;}else{_p.source=_currentInstance.getElement(_p.source);}}if(_p.target){if(_p.target.endpoint){_p.targetEndpoint=_p.target;}else{_p.target=_currentInstance.getElement(_p.target);}}// test for endpoint uuids to connect\nif(params.uuids){_p.sourceEndpoint=_getEndpoint(params.uuids[0]);_p.targetEndpoint=_getEndpoint(params.uuids[1]);}// now ensure that if we do have Endpoints already, they\'re not full.\n// source:\nif(_p.sourceEndpoint&&_p.sourceEndpoint.isFull()){_ju.log(_currentInstance,"could not add connection; source endpoint is full");return;}// target:\nif(_p.targetEndpoint&&_p.targetEndpoint.isFull()){_ju.log(_currentInstance,"could not add connection; target endpoint is full");return;}// if source endpoint mandates connection type and nothing specified in our params, use it.\nif(!_p.type&&_p.sourceEndpoint){_p.type=_p.sourceEndpoint.connectionType;}// copy in any connectorOverlays that were specified on the source endpoint.\n// it doesnt copy target endpoint overlays.  i\'m not sure if we want it to or not.\nif(_p.sourceEndpoint&&_p.sourceEndpoint.connectorOverlays){_p.overlays=_p.overlays||[];for(var i=0,j=_p.sourceEndpoint.connectorOverlays.length;i<j;i++){_p.overlays.push(_p.sourceEndpoint.connectorOverlays[i]);}}// scope\nif(_p.sourceEndpoint&&_p.sourceEndpoint.scope){_p.scope=_p.sourceEndpoint.scope;}// pointer events\nif(!_p["pointer-events"]&&_p.sourceEndpoint&&_p.sourceEndpoint.connectorPointerEvents){_p["pointer-events"]=_p.sourceEndpoint.connectorPointerEvents;}var _addEndpoint=function _addEndpoint(el,def,idx){return _currentInstance.addEndpoint(el,_mergeOverrides(def,{anchor:_p.anchors?_p.anchors[idx]:_p.anchor,endpoint:_p.endpoints?_p.endpoints[idx]:_p.endpoint,paintStyle:_p.endpointStyles?_p.endpointStyles[idx]:_p.endpointStyle,hoverPaintStyle:_p.endpointHoverStyles?_p.endpointHoverStyles[idx]:_p.endpointHoverStyle}));};// check for makeSource/makeTarget specs.\nvar _oneElementDef=function _oneElementDef(type,idx,defs,matchType){if(_p[type]&&!_p[type].endpoint&&!_p[type+"Endpoint"]&&!_p.newConnection){var tid=_getId(_p[type]),tep=defs[tid];tep=tep?tep[matchType]:null;if(tep){// if not enabled, return.\nif(!tep.enabled){return false;}var newEndpoint=tep.endpoint!=null&&tep.endpoint._jsPlumb?tep.endpoint:_addEndpoint(_p[type],tep.def,idx);if(newEndpoint.isFull()){return false;}_p[type+"Endpoint"]=newEndpoint;if(!_p.scope&&tep.def.scope){_p.scope=tep.def.scope;}// provide scope if not already provided and endpoint def has one.\nif(tep.uniqueEndpoint){if(!tep.endpoint){tep.endpoint=newEndpoint;newEndpoint.setDeleteOnEmpty(false);}else{newEndpoint.finalEndpoint=tep.endpoint;}}else{newEndpoint.setDeleteOnEmpty(true);}//\n// copy in connector overlays if present on the source definition.\n//\nif(idx===0&&tep.def.connectorOverlays){_p.overlays=_p.overlays||[];Array.prototype.push.apply(_p.overlays,tep.def.connectorOverlays);}}}};if(_oneElementDef("source",0,this.sourceEndpointDefinitions,_p.type||"default")===false){return;}if(_oneElementDef("target",1,this.targetEndpointDefinitions,_p.type||"default")===false){return;}// last, ensure scopes match\nif(_p.sourceEndpoint&&_p.targetEndpoint){if(!_scopeMatch(_p.sourceEndpoint,_p.targetEndpoint)){_p=null;}}return _p;}.bind(_currentInstance),_newConnection=function _newConnection(params){var connectionFunc=_currentInstance.Defaults.ConnectionType||_currentInstance.getDefaultConnectionType();params._jsPlumb=_currentInstance;params.newConnection=_newConnection;params.newEndpoint=_newEndpoint;params.endpointsByUUID=endpointsByUUID;params.endpointsByElement=endpointsByElement;params.finaliseConnection=_finaliseConnection;params.id="con_"+_idstamp();var con=new connectionFunc(params);// if the connection is draggable, then maybe we need to tell the target endpoint to init the\n// dragging code. it won\'t run again if it already configured to be draggable.\nif(con.isDetachable()){con.endpoints[0].initDraggable("_jsPlumbSource");con.endpoints[1].initDraggable("_jsPlumbTarget");}return con;},//\n// adds the connection to the backing model, fires an event if necessary and then redraws\n//\n_finaliseConnection=_currentInstance.finaliseConnection=function(jpc,params,originalEvent,doInformAnchorManager){params=params||{};// add to list of connections (by scope).\nif(!jpc.suspendedEndpoint){connections.push(jpc);}jpc.pending=null;// turn off isTemporarySource on the source endpoint (only viable on first draw)\njpc.endpoints[0].isTemporarySource=false;// always inform the anchor manager\n// except that if jpc has a suspended endpoint it\'s not true to say the\n// connection is new; it has just (possibly) moved. the question is whether\n// to make that call here or in the anchor manager.  i think perhaps here.\nif(doInformAnchorManager!==false){_currentInstance.anchorManager.newConnection(jpc);}// force a paint\n_draw(jpc.source);// fire an event\nif(!params.doNotFireConnectionEvent&&params.fireEvent!==false){var eventArgs={connection:jpc,source:jpc.source,target:jpc.target,sourceId:jpc.sourceId,targetId:jpc.targetId,sourceEndpoint:jpc.endpoints[0],targetEndpoint:jpc.endpoints[1]};_currentInstance.fire("connection",eventArgs,originalEvent);}},/*\r\n         factory method to prepare a new endpoint.  this should always be used instead of creating Endpoints\r\n         manually, since this method attaches event listeners and an id.\r\n         */_newEndpoint=function _newEndpoint(params,id){var endpointFunc=_currentInstance.Defaults.EndpointType||jsPlumb.Endpoint;var _p=jsPlumb.extend({},params);_p._jsPlumb=_currentInstance;_p.newConnection=_newConnection;_p.newEndpoint=_newEndpoint;_p.endpointsByUUID=endpointsByUUID;_p.endpointsByElement=endpointsByElement;_p.fireDetachEvent=fireDetachEvent;_p.elementId=id||_getId(_p.source);var ep=new endpointFunc(_p);ep.id="ep_"+_idstamp();_manage(_p.elementId,_p.source);if(!jsPlumb.headless){_currentInstance.getDragManager().endpointAdded(_p.source,id);}return ep;},/*\r\n         * performs the given function operation on all the connections found\r\n         * for the given element id; this means we find all the endpoints for\r\n         * the given element, and then for each endpoint find the connectors\r\n         * connected to it. then we pass each connection in to the given\r\n         * function.\r\n         */_operation=function _operation(elId,func,endpointFunc){var endpoints=endpointsByElement[elId];if(endpoints&&endpoints.length){for(var i=0,ii=endpoints.length;i<ii;i++){for(var j=0,jj=endpoints[i].connections.length;j<jj;j++){var retVal=func(endpoints[i].connections[j]);// if the function passed in returns true, we exit.\n// most functions return false.\nif(retVal){return;}}if(endpointFunc){endpointFunc(endpoints[i]);}}}},_setDraggable=function _setDraggable(element,draggable){return jsPlumb.each(element,function(el){if(_currentInstance.isDragSupported(el)){draggableStates[_currentInstance.getAttribute(el,"id")]=draggable;_currentInstance.setElementDraggable(el,draggable);}});},/*\r\n         * private method to do the business of hiding/showing.\r\n         *\r\n         * @param el\r\n         *            either Id of the element in question or a library specific\r\n         *            object for the element.\r\n         * @param state\r\n         *            String specifying a value for the css \'display\' property\r\n         *            (\'block\' or \'none\').\r\n         */_setVisible=function _setVisible(el,state,alsoChangeEndpoints){state=state==="block";var endpointFunc=null;if(alsoChangeEndpoints){endpointFunc=function endpointFunc(ep){ep.setVisible(state,true,true);};}var info=_info(el);_operation(info.id,function(jpc){if(state&&alsoChangeEndpoints){// this test is necessary because this functionality is new, and i wanted to maintain backwards compatibility.\n// this block will only set a connection to be visible if the other endpoint in the connection is also visible.\nvar oidx=jpc.sourceId===info.id?1:0;if(jpc.endpoints[oidx].isVisible()){jpc.setVisible(true);}}else{// the default behaviour for show, and what always happens for hide, is to just set the visibility without getting clever.\njpc.setVisible(state);}},endpointFunc);},/*\r\n         * toggles the draggable state of the given element(s).\r\n         * el is either an id, or an element object, or a list of ids/element objects.\r\n         */_toggleDraggable=function _toggleDraggable(el){var state;jsPlumb.each(el,function(el){var elId=_currentInstance.getAttribute(el,"id");state=draggableStates[elId]==null?false:draggableStates[elId];state=!state;draggableStates[elId]=state;_currentInstance.setDraggable(el,state);return state;}.bind(this));return state;},/**\r\n             * private method to do the business of toggling hiding/showing.\r\n             */_toggleVisible=function _toggleVisible(elId,changeEndpoints){var endpointFunc=null;if(changeEndpoints){endpointFunc=function endpointFunc(ep){var state=ep.isVisible();ep.setVisible(!state);};}_operation(elId,function(jpc){var state=jpc.isVisible();jpc.setVisible(!state);},endpointFunc);},// TODO comparison performance\n_getCachedData=function _getCachedData(elId){var o=offsets[elId];if(!o){return _updateOffset({elId:elId});}else{return{o:o,s:sizes[elId]};}},/**\r\n             * gets an id for the given element, creating and setting one if\r\n             * necessary.  the id is of the form\r\n             *\r\n             *    jsPlumb_<instance index>_<index in instance>\r\n             *\r\n             * where "index in instance" is a monotonically increasing integer that starts at 0,\r\n             * for each instance.  this method is used not only to assign ids to elements that do not\r\n             * have them but also to connections and endpoints.\r\n             */_getId=function _getId(element,uuid,doNotCreateIfNotFound){if(_ju.isString(element)){return element;}if(element==null){return null;}var id=_currentInstance.getAttribute(element,"id");if(!id||id==="undefined"){// check if fixed uuid parameter is given\nif(arguments.length===2&&arguments[1]!==undefined){id=uuid;}else if(arguments.length===1||arguments.length===3&&!arguments[2]){id="jsPlumb_"+_instanceIndex+"_"+_idstamp();}if(!doNotCreateIfNotFound){_currentInstance.setAttribute(element,"id",id);}}return id;};this.setConnectionBeingDragged=function(v){connectionBeingDragged=v;};this.isConnectionBeingDragged=function(){return connectionBeingDragged;};/**\r\n         * Returns a map of all the elements this jsPlumbInstance is currently managing.\r\n         * @returns {Object} Map of [id-> {el, endpoint[], connection, position}] information.\r\n         */this.getManagedElements=function(){return managedElements;};this.connectorClass="jtk-connector";this.connectorOutlineClass="jtk-connector-outline";this.connectedClass="jtk-connected";this.hoverClass="jtk-hover";this.endpointClass="jtk-endpoint";this.endpointConnectedClass="jtk-endpoint-connected";this.endpointFullClass="jtk-endpoint-full";this.endpointDropAllowedClass="jtk-endpoint-drop-allowed";this.endpointDropForbiddenClass="jtk-endpoint-drop-forbidden";this.overlayClass="jtk-overlay";this.draggingClass="jtk-dragging";// CONVERTED\nthis.elementDraggingClass="jtk-element-dragging";// CONVERTED\nthis.sourceElementDraggingClass="jtk-source-element-dragging";// CONVERTED\nthis.targetElementDraggingClass="jtk-target-element-dragging";// CONVERTED\nthis.endpointAnchorClassPrefix="jtk-endpoint-anchor";this.hoverSourceClass="jtk-source-hover";this.hoverTargetClass="jtk-target-hover";this.dragSelectClass="jtk-drag-select";this.Anchors={};this.Connectors={"svg":{}};this.Endpoints={"svg":{}};this.Overlays={"svg":{}};this.ConnectorRenderers={};this.SVG="svg";// --------------------------- jsPlumbInstance public API ---------------------------------------------------------\nthis.addEndpoint=function(el,params,referenceParams){referenceParams=referenceParams||{};var p=jsPlumb.extend({},referenceParams);jsPlumb.extend(p,params);p.endpoint=p.endpoint||_currentInstance.Defaults.Endpoint;p.paintStyle=p.paintStyle||_currentInstance.Defaults.EndpointStyle;var results=[],inputs=_ju.isArray(el)||el.length!=null&&!_ju.isString(el)?el:[el];for(var i=0,j=inputs.length;i<j;i++){p.source=_currentInstance.getElement(inputs[i]);_ensureContainer(p.source);var id=_getId(p.source),e=_newEndpoint(p,id);// ensure element is managed.\nvar myOffset=_manage(id,p.source).info.o;_ju.addToList(endpointsByElement,id,e);if(!_suspendDrawing){e.paint({anchorLoc:e.anchor.compute({xy:[myOffset.left,myOffset.top],wh:sizes[id],element:e,timestamp:_suspendedAt}),timestamp:_suspendedAt});}results.push(e);}return results.length===1?results[0]:results;};this.addEndpoints=function(el,endpoints,referenceParams){var results=[];for(var i=0,j=endpoints.length;i<j;i++){var e=_currentInstance.addEndpoint(el,endpoints[i],referenceParams);if(_ju.isArray(e)){Array.prototype.push.apply(results,e);}else{results.push(e);}}return results;};this.animate=function(el,properties,options){if(!this.animationSupported){return false;}options=options||{};var del=_currentInstance.getElement(el),id=_getId(del),stepFunction=jsPlumb.animEvents.step,completeFunction=jsPlumb.animEvents.complete;options[stepFunction]=_ju.wrap(options[stepFunction],function(){_currentInstance.revalidate(id);});// onComplete repaints, just to make sure everything looks good at the end of the animation.\noptions[completeFunction]=_ju.wrap(options[completeFunction],function(){_currentInstance.revalidate(id);});_currentInstance.doAnimate(del,properties,options);};/**\r\n         * checks for a listener for the given condition, executing it if found, passing in the given value.\r\n         * condition listeners would have been attached using "bind" (which is, you could argue, now overloaded, since\r\n         * firing click events etc is a bit different to what this does).  i thought about adding a "bindCondition"\r\n         * or something, but decided against it, for the sake of simplicity. jsPlumb will never fire one of these\r\n         * condition events anyway.\r\n         */this.checkCondition=function(conditionName,args){var l=_currentInstance.getListener(conditionName),r=true;if(l&&l.length>0){var values=Array.prototype.slice.call(arguments,1);try{for(var i=0,j=l.length;i<j;i++){r=r&&l[i].apply(l[i],values);}}catch(e){_ju.log(_currentInstance,"cannot check condition ["+conditionName+"]"+e);}}return r;};this.connect=function(params,referenceParams){// prepare a final set of parameters to create connection with\nvar _p=_prepareConnectionParams(params,referenceParams),jpc;// TODO probably a nicer return value if the connection was not made.  _prepareConnectionParams\n// will return null (and log something) if either endpoint was full.  what would be nicer is to\n// create a dedicated \'error\' object.\nif(_p){if(_p.source==null&&_p.sourceEndpoint==null){_ju.log("Cannot establish connection - source does not exist");return;}if(_p.target==null&&_p.targetEndpoint==null){_ju.log("Cannot establish connection - target does not exist");return;}_ensureContainer(_p.source);// create the connection.  it is not yet registered\njpc=_newConnection(_p);// now add it the model, fire an event, and redraw\n_finaliseConnection(jpc,_p);}return jpc;};var stTypes=[{el:"source",elId:"sourceId",epDefs:"sourceEndpointDefinitions"},{el:"target",elId:"targetId",epDefs:"targetEndpointDefinitions"}];var _set=function(c,el,idx,doNotRepaint){var ep,_st=stTypes[idx],cId=c[_st.elId],cEl=c[_st.el],sid,sep,oldEndpoint=c.endpoints[idx];var evtParams={index:idx,originalSourceId:idx===0?cId:c.sourceId,newSourceId:c.sourceId,originalTargetId:idx===1?cId:c.targetId,newTargetId:c.targetId,connection:c};if(el.constructor===jsPlumb.Endpoint){ep=el;ep.addConnection(c);el=ep.element;}else{sid=_getId(el);sep=this[_st.epDefs][sid];if(sid===c[_st.elId]){ep=null;// dont change source/target if the element is already the one given.\n}else if(sep){for(var t in sep){if(!sep[t].enabled){return;}ep=sep[t].endpoint!=null&&sep[t].endpoint._jsPlumb?sep[t].endpoint:this.addEndpoint(el,sep[t].def);if(sep[t].uniqueEndpoint){sep[t].endpoint=ep;}ep.addConnection(c);}}else{ep=c.makeEndpoint(idx===0,el,sid);}}if(ep!=null){oldEndpoint.detachFromConnection(c);c.endpoints[idx]=ep;c[_st.el]=ep.element;c[_st.elId]=ep.elementId;evtParams[idx===0?"newSourceId":"newTargetId"]=ep.elementId;fireMoveEvent(evtParams);if(!doNotRepaint){c.repaint();}}evtParams.element=el;return evtParams;}.bind(this);this.setSource=function(connection,el,doNotRepaint){var p=_set(connection,el,0,doNotRepaint);this.anchorManager.sourceChanged(p.originalSourceId,p.newSourceId,connection,p.el);};this.setTarget=function(connection,el,doNotRepaint){var p=_set(connection,el,1,doNotRepaint);this.anchorManager.updateOtherEndpoint(p.originalSourceId,p.originalTargetId,p.newTargetId,connection);};this.deleteEndpoint=function(object,dontUpdateHover,deleteAttachedObjects){var endpoint=typeof object==="string"?endpointsByUUID[object]:object;if(endpoint){_currentInstance.deleteObject({endpoint:endpoint,dontUpdateHover:dontUpdateHover,deleteAttachedObjects:deleteAttachedObjects});}return _currentInstance;};this.deleteEveryEndpoint=function(){var _is=_currentInstance.setSuspendDrawing(true);for(var id in endpointsByElement){var endpoints=endpointsByElement[id];if(endpoints&&endpoints.length){for(var i=0,j=endpoints.length;i<j;i++){_currentInstance.deleteEndpoint(endpoints[i],true);}}}endpointsByElement={};managedElements={};endpointsByUUID={};offsets={};offsetTimestamps={};_currentInstance.anchorManager.reset();var dm=_currentInstance.getDragManager();if(dm){dm.reset();}if(!_is){_currentInstance.setSuspendDrawing(false);}return _currentInstance;};var fireDetachEvent=function fireDetachEvent(jpc,doFireEvent,originalEvent){// may have been given a connection, or in special cases, an object\nvar connType=_currentInstance.Defaults.ConnectionType||_currentInstance.getDefaultConnectionType(),argIsConnection=jpc.constructor===connType,params=argIsConnection?{connection:jpc,source:jpc.source,target:jpc.target,sourceId:jpc.sourceId,targetId:jpc.targetId,sourceEndpoint:jpc.endpoints[0],targetEndpoint:jpc.endpoints[1]}:jpc;if(doFireEvent){_currentInstance.fire("connectionDetached",params,originalEvent);}// always fire this. used by internal jsplumb stuff.\n_currentInstance.fire("internal.connectionDetached",params,originalEvent);_currentInstance.anchorManager.connectionDetached(params);};var fireMoveEvent=_currentInstance.fireMoveEvent=function(params,evt){_currentInstance.fire("connectionMoved",params,evt);};this.unregisterEndpoint=function(endpoint){if(endpoint._jsPlumb.uuid){endpointsByUUID[endpoint._jsPlumb.uuid]=null;}_currentInstance.anchorManager.deleteEndpoint(endpoint);// TODO at least replace this with a removeWithFunction call.\nfor(var e in endpointsByElement){var endpoints=endpointsByElement[e];if(endpoints){var newEndpoints=[];for(var i=0,j=endpoints.length;i<j;i++){if(endpoints[i]!==endpoint){newEndpoints.push(endpoints[i]);}}endpointsByElement[e]=newEndpoints;}if(endpointsByElement[e].length<1){delete endpointsByElement[e];}}};var IS_DETACH_ALLOWED="isDetachAllowed";var BEFORE_DETACH="beforeDetach";var CHECK_CONDITION="checkCondition";/**\r\n         * Deletes a Connection.\r\n         * @method deleteConnection\r\n         * @param connection Connection to delete\r\n         * @param {Object} [params] Optional delete parameters\r\n         * @param {Boolean} [params.doNotFireEvent=false] If true, a connection detached event will not be fired. Otherwise one will.\r\n         * @param {Boolean} [params.force=false] If true, the connection will be deleted even if a beforeDetach interceptor tries to stop the deletion.\r\n         * @returns {Boolean} True if the connection was deleted, false otherwise.\r\n         */this.deleteConnection=function(connection,params){if(connection!=null){params=params||{};if(params.force||_ju.functionChain(true,false,[[connection.endpoints[0],IS_DETACH_ALLOWED,[connection]],[connection.endpoints[1],IS_DETACH_ALLOWED,[connection]],[connection,IS_DETACH_ALLOWED,[connection]],[_currentInstance,CHECK_CONDITION,[BEFORE_DETACH,connection]]])){connection.setHover(false);fireDetachEvent(connection,!connection.pending&&params.fireEvent!==false,params.originalEvent);connection.endpoints[0].detachFromConnection(connection);connection.endpoints[1].detachFromConnection(connection);_ju.removeWithFunction(connections,function(_c){return connection.id===_c.id;});connection.cleanup();connection.destroy();return true;}}return false;};/**\r\n         * Remove all Connections from all elements, but leaves Endpoints in place ((unless a connection is set to auto delete its Endpoints).\r\n         * @method deleteEveryConnection\r\n         * @param {Object} [params] optional params object for the call\r\n         * @param {Boolean} [params.fireEvent=true] Whether or not to fire detach events\r\n         * @param {Boolean} [params.forceDetach=false] If true, this call will ignore any `beforeDetach` interceptors.\r\n         * @returns {Number} The number of connections that were deleted.\r\n         */this.deleteEveryConnection=function(params){params=params||{};var count=connections.length,deletedCount=0;_currentInstance.batch(function(){for(var i=0;i<count;i++){deletedCount+=_currentInstance.deleteConnection(connections[0],params)?1:0;}});return deletedCount;};/**\r\n         * Removes all an element\'s Connections.\r\n         * @method deleteConnectionsForElement\r\n         * @param {Object} el Either the id of the element, or a selector for the element.\r\n         * @param {Object} [params] Optional parameters.\r\n         * @param {Boolean} [params.fireEvent=true] Whether or not to fire the detach event.\r\n         * @param {Boolean} [params.forceDetach=false] If true, this call will ignore any `beforeDetach` interceptors.\r\n         * @return {jsPlumbInstance} The current jsPlumb instance.\r\n         */this.deleteConnectionsForElement=function(el,params){params=params||{};el=_currentInstance.getElement(el);var id=_getId(el),endpoints=endpointsByElement[id];if(endpoints&&endpoints.length){for(var i=0,j=endpoints.length;i<j;i++){endpoints[i].deleteEveryConnection(params);}}return _currentInstance;};/// not public.  but of course its exposed. how to change this.\nthis.deleteObject=function(params){var result={endpoints:{},connections:{},endpointCount:0,connectionCount:0},deleteAttachedObjects=params.deleteAttachedObjects!==false;var unravelConnection=function unravelConnection(connection){if(connection!=null&&result.connections[connection.id]==null){if(!params.dontUpdateHover&&connection._jsPlumb!=null){connection.setHover(false);}result.connections[connection.id]=connection;result.connectionCount++;}};var unravelEndpoint=function unravelEndpoint(endpoint){if(endpoint!=null&&result.endpoints[endpoint.id]==null){if(!params.dontUpdateHover&&endpoint._jsPlumb!=null){endpoint.setHover(false);}result.endpoints[endpoint.id]=endpoint;result.endpointCount++;if(deleteAttachedObjects){for(var i=0;i<endpoint.connections.length;i++){var c=endpoint.connections[i];unravelConnection(c);}}}};if(params.connection){unravelConnection(params.connection);}else{unravelEndpoint(params.endpoint);}// loop through connections\nfor(var i in result.connections){var c=result.connections[i];if(c._jsPlumb){_ju.removeWithFunction(connections,function(_c){return c.id===_c.id;});fireDetachEvent(c,params.fireEvent===false?false:!c.pending,params.originalEvent);var doNotCleanup=params.deleteAttachedObjects==null?null:!params.deleteAttachedObjects;c.endpoints[0].detachFromConnection(c,null,doNotCleanup);c.endpoints[1].detachFromConnection(c,null,doNotCleanup);c.cleanup(true);c.destroy(true);}}// loop through endpoints\nfor(var j in result.endpoints){var e=result.endpoints[j];if(e._jsPlumb){_currentInstance.unregisterEndpoint(e);// FIRE some endpoint deleted event?\ne.cleanup(true);e.destroy(true);}}return result;};this.draggable=function(el,options){var info;_each(function(_el){info=_info(_el);if(info.el){_initDraggableIfNecessary(info.el,true,options,info.id,true);}},el);return _currentInstance;};this.droppable=function(el,options){var info;options=options||{};options.allowLoopback=false;_each(function(_el){info=_info(_el);if(info.el){_currentInstance.initDroppable(info.el,options);}},el);return _currentInstance;};// helpers for select/selectEndpoints\nvar _setOperation=function _setOperation(list,func,args,selector){for(var i=0,j=list.length;i<j;i++){list[i][func].apply(list[i],args);}return selector(list);},_getOperation=function _getOperation(list,func,args){var out=[];for(var i=0,j=list.length;i<j;i++){out.push([list[i][func].apply(list[i],args),list[i]]);}return out;},setter=function setter(list,func,selector){return function(){return _setOperation(list,func,arguments,selector);};},getter=function getter(list,func){return function(){return _getOperation(list,func,arguments);};},prepareList=function prepareList(input,doNotGetIds){var r=[];if(input){if(typeof input===\'string\'){if(input==="*"){return input;}r.push(input);}else{if(doNotGetIds){r=input;}else{if(input.length){for(var i=0,j=input.length;i<j;i++){r.push(_info(input[i]).id);}}else{r.push(_info(input).id);}}}}return r;},filterList=function filterList(list,value,missingIsFalse){if(list==="*"){return true;}return list.length>0?list.indexOf(value)!==-1:!missingIsFalse;};// get some connections, specifying source/target/scope\nthis.getConnections=function(options,flat){if(!options){options={};}else if(options.constructor===String){options={"scope":options};}var scope=options.scope||_currentInstance.getDefaultScope(),scopes=prepareList(scope,true),sources=prepareList(options.source),targets=prepareList(options.target),results=!flat&&scopes.length>1?{}:[],_addOne=function _addOne(scope,obj){if(!flat&&scopes.length>1){var ss=results[scope];if(ss==null){ss=results[scope]=[];}ss.push(obj);}else{results.push(obj);}};for(var j=0,jj=connections.length;j<jj;j++){var c=connections[j],sourceId=c.proxies&&c.proxies[0]?c.proxies[0].originalEp.elementId:c.sourceId,targetId=c.proxies&&c.proxies[1]?c.proxies[1].originalEp.elementId:c.targetId;if(filterList(scopes,c.scope)&&filterList(sources,sourceId)&&filterList(targets,targetId)){_addOne(c.scope,c);}}return results;};var _curryEach=function _curryEach(list,executor){return function(f){for(var i=0,ii=list.length;i<ii;i++){f(list[i]);}return executor(list);};},_curryGet=function _curryGet(list){return function(idx){return list[idx];};};var _makeCommonSelectHandler=function _makeCommonSelectHandler(list,executor){var out={length:list.length,each:_curryEach(list,executor),get:_curryGet(list)},setters=["setHover","removeAllOverlays","setLabel","addClass","addOverlay","removeOverlay","removeOverlays","showOverlay","hideOverlay","showOverlays","hideOverlays","setPaintStyle","setHoverPaintStyle","setSuspendEvents","setParameter","setParameters","setVisible","repaint","addType","toggleType","removeType","removeClass","setType","bind","unbind"],getters=["getLabel","getOverlay","isHover","getParameter","getParameters","getPaintStyle","getHoverPaintStyle","isVisible","hasType","getType","isSuspendEvents"],i,ii;for(i=0,ii=setters.length;i<ii;i++){out[setters[i]]=setter(list,setters[i],executor);}for(i=0,ii=getters.length;i<ii;i++){out[getters[i]]=getter(list,getters[i]);}return out;};var _makeConnectionSelectHandler=function _makeConnectionSelectHandler(list){var common=_makeCommonSelectHandler(list,_makeConnectionSelectHandler);return jsPlumb.extend(common,{// setters\nsetDetachable:setter(list,"setDetachable",_makeConnectionSelectHandler),setReattach:setter(list,"setReattach",_makeConnectionSelectHandler),setConnector:setter(list,"setConnector",_makeConnectionSelectHandler),delete:function _delete(){for(var i=0,ii=list.length;i<ii;i++){_currentInstance.deleteConnection(list[i]);}},// getters\nisDetachable:getter(list,"isDetachable"),isReattach:getter(list,"isReattach")});};var _makeEndpointSelectHandler=function _makeEndpointSelectHandler(list){var common=_makeCommonSelectHandler(list,_makeEndpointSelectHandler);return jsPlumb.extend(common,{setEnabled:setter(list,"setEnabled",_makeEndpointSelectHandler),setAnchor:setter(list,"setAnchor",_makeEndpointSelectHandler),isEnabled:getter(list,"isEnabled"),deleteEveryConnection:function deleteEveryConnection(){for(var i=0,ii=list.length;i<ii;i++){list[i].deleteEveryConnection();}},"delete":function _delete(){for(var i=0,ii=list.length;i<ii;i++){_currentInstance.deleteEndpoint(list[i]);}}});};this.select=function(params){params=params||{};params.scope=params.scope||"*";return _makeConnectionSelectHandler(params.connections||_currentInstance.getConnections(params,true));};this.selectEndpoints=function(params){params=params||{};params.scope=params.scope||"*";var noElementFilters=!params.element&&!params.source&&!params.target,elements=noElementFilters?"*":prepareList(params.element),sources=noElementFilters?"*":prepareList(params.source),targets=noElementFilters?"*":prepareList(params.target),scopes=prepareList(params.scope,true);var ep=[];for(var el in endpointsByElement){var either=filterList(elements,el,true),source=filterList(sources,el,true),sourceMatchExact=sources!=="*",target=filterList(targets,el,true),targetMatchExact=targets!=="*";// if they requested \'either\' then just match scope. otherwise if they requested \'source\' (not as a wildcard) then we have to match only endpoints that have isSource set to to true, and the same thing with isTarget.\nif(either||source||target){inner:for(var i=0,ii=endpointsByElement[el].length;i<ii;i++){var _ep=endpointsByElement[el][i];if(filterList(scopes,_ep.scope,true)){var noMatchSource=sourceMatchExact&&sources.length>0&&!_ep.isSource,noMatchTarget=targetMatchExact&&targets.length>0&&!_ep.isTarget;if(noMatchSource||noMatchTarget){continue inner;}ep.push(_ep);}}}}return _makeEndpointSelectHandler(ep);};// get all connections managed by the instance of jsplumb.\nthis.getAllConnections=function(){return connections;};this.getDefaultScope=function(){return DEFAULT_SCOPE;};// get an endpoint by uuid.\nthis.getEndpoint=_getEndpoint;/**\r\n         * Gets the list of Endpoints for a given element.\r\n         * @method getEndpoints\r\n         * @param {String|Element|Selector} el The element to get endpoints for.\r\n         * @return {Endpoint[]} An array of Endpoints for the specified element.\r\n         */this.getEndpoints=function(el){return endpointsByElement[_info(el).id]||[];};// gets the default endpoint type. used when subclassing. see wiki.\nthis.getDefaultEndpointType=function(){return jsPlumb.Endpoint;};// gets the default connection type. used when subclassing.  see wiki.\nthis.getDefaultConnectionType=function(){return jsPlumb.Connection;};/*\r\n         * Gets an element\'s id, creating one if necessary. really only exposed\r\n         * for the lib-specific functionality to access; would be better to pass\r\n         * the current instance into the lib-specific code (even though this is\r\n         * a static call. i just don\'t want to expose it to the public API).\r\n         */this.getId=_getId;this.appendElement=_appendElement;var _hoverSuspended=false;this.isHoverSuspended=function(){return _hoverSuspended;};this.setHoverSuspended=function(s){_hoverSuspended=s;};// set an element\'s connections to be hidden\nthis.hide=function(el,changeEndpoints){_setVisible(el,"none",changeEndpoints);return _currentInstance;};// exposed for other objects to use to get a unique id.\nthis.idstamp=_idstamp;// this.connectorsInitialized = false;\n// this.registerConnectorType = function (connector, name) {\n//     connectorTypes.push([connector, name]);\n// };\n// ensure that, if the current container exists, it is a DOM element and not a selector.\n// if it does not exist and `candidate` is supplied, the offset parent of that element will be set as the Container.\n// this is used to do a better default behaviour for the case that the user has not set a container:\n// addEndpoint, makeSource, makeTarget and connect all call this method with the offsetParent of the\n// element in question (for connect it is the source element). So if no container is set, it is inferred\n// to be the offsetParent of the first element the user tries to connect.\nvar _ensureContainer=function _ensureContainer(candidate){if(!_container&&candidate){var can=_currentInstance.getElement(candidate);if(can.offsetParent){_currentInstance.setContainer(can.offsetParent);}}};var _getContainerFromDefaults=function _getContainerFromDefaults(){if(_currentInstance.Defaults.Container){_currentInstance.setContainer(_currentInstance.Defaults.Container);}};// check if a given element is managed or not. if not, add to our map. if drawing is not suspended then\n// we\'ll also stash its dimensions; otherwise we\'ll do this in a lazy way through updateOffset.\nvar _manage=_currentInstance.manage=function(id,element,_transient){if(!managedElements[id]){managedElements[id]={el:element,endpoints:[],connections:[]};managedElements[id].info=_updateOffset({elId:id,timestamp:_suspendedAt});if(!_transient){_currentInstance.fire("manageElement",{id:id,info:managedElements[id].info,el:element});}}return managedElements[id];};var _unmanage=function _unmanage(id){if(managedElements[id]){delete managedElements[id];_currentInstance.fire("unmanageElement",id);}};/**\r\n         * updates the offset and size for a given element, and stores the\r\n         * values. if \'offset\' is not null we use that (it would have been\r\n         * passed in from a drag call) because it\'s faster; but if it is null,\r\n         * or if \'recalc\' is true in order to force a recalculation, we get the current values.\r\n         */var _updateOffset=this.updateOffset=function(params){var timestamp=params.timestamp,recalc=params.recalc,offset=params.offset,elId=params.elId,s;if(_suspendDrawing&&!timestamp){timestamp=_suspendedAt;}if(!recalc){if(timestamp&&timestamp===offsetTimestamps[elId]){return{o:params.offset||offsets[elId],s:sizes[elId]};}}if(recalc||!offset&&offsets[elId]==null){// if forced repaint or no offset available, we recalculate.\n// get the current size and offset, and store them\ns=managedElements[elId]?managedElements[elId].el:null;if(s!=null){sizes[elId]=_currentInstance.getSize(s);offsets[elId]=_currentInstance.getOffset(s);offsetTimestamps[elId]=timestamp;}}else{offsets[elId]=offset||offsets[elId];if(sizes[elId]==null){s=managedElements[elId].el;if(s!=null){sizes[elId]=_currentInstance.getSize(s);}}offsetTimestamps[elId]=timestamp;}if(offsets[elId]&&!offsets[elId].right){offsets[elId].right=offsets[elId].left+sizes[elId][0];offsets[elId].bottom=offsets[elId].top+sizes[elId][1];offsets[elId].width=sizes[elId][0];offsets[elId].height=sizes[elId][1];offsets[elId].centerx=offsets[elId].left+offsets[elId].width/2;offsets[elId].centery=offsets[elId].top+offsets[elId].height/2;}return{o:offsets[elId],s:sizes[elId]};};/**\r\n         * callback from the current library to tell us to prepare ourselves (attach\r\n         * mouse listeners etc; can\'t do that until the library has provided a bind method)\r\n         */this.init=function(){if(!initialized){_getContainerFromDefaults();_currentInstance.anchorManager=new root.jsPlumb.AnchorManager({jsPlumbInstance:_currentInstance});initialized=true;_currentInstance.fire("ready",_currentInstance);}}.bind(this);this.log=log;this.jsPlumbUIComponent=jsPlumbUIComponent;/*\r\n         * Creates an anchor with the given params.\r\n         *\r\n         *\r\n         * Returns: The newly created Anchor.\r\n         * Throws: an error if a named anchor was not found.\r\n         */this.makeAnchor=function(){var pp,_a=function _a(t,p){if(root.jsPlumb.Anchors[t]){return new root.jsPlumb.Anchors[t](p);}if(!_currentInstance.Defaults.DoNotThrowErrors){throw{msg:"jsPlumb: unknown anchor type \'"+t+"\'"};}};if(arguments.length===0){return null;}var specimen=arguments[0],elementId=arguments[1],jsPlumbInstance=arguments[2],newAnchor=null;// if it appears to be an anchor already...\nif(specimen.compute&&specimen.getOrientation){return specimen;}//TODO hazy here about whether it should be added or is already added somehow.\n// is it the name of an anchor type?\nelse if(typeof specimen==="string"){newAnchor=_a(arguments[0],{elementId:elementId,jsPlumbInstance:_currentInstance});}// is it an array? it will be one of:\n// an array of [spec, params] - this defines a single anchor, which may be dynamic, but has parameters.\n// an array of arrays - this defines some dynamic anchors\n// an array of numbers - this defines a single anchor.\nelse if(_ju.isArray(specimen)){if(_ju.isArray(specimen[0])||_ju.isString(specimen[0])){// if [spec, params] format\nif(specimen.length===2&&_ju.isObject(specimen[1])){// if first arg is a string, its a named anchor with params\nif(_ju.isString(specimen[0])){pp=root.jsPlumb.extend({elementId:elementId,jsPlumbInstance:_currentInstance},specimen[1]);newAnchor=_a(specimen[0],pp);}// otherwise first arg is array, second is params. we treat as a dynamic anchor, which is fine\n// even if the first arg has only one entry. you could argue all anchors should be implicitly dynamic in fact.\nelse{pp=root.jsPlumb.extend({elementId:elementId,jsPlumbInstance:_currentInstance,anchors:specimen[0]},specimen[1]);newAnchor=new root.jsPlumb.DynamicAnchor(pp);}}else{newAnchor=new jsPlumb.DynamicAnchor({anchors:specimen,selector:null,elementId:elementId,jsPlumbInstance:_currentInstance});}}else{var anchorParams={x:specimen[0],y:specimen[1],orientation:specimen.length>=4?[specimen[2],specimen[3]]:[0,0],offsets:specimen.length>=6?[specimen[4],specimen[5]]:[0,0],elementId:elementId,jsPlumbInstance:_currentInstance,cssClass:specimen.length===7?specimen[6]:null};newAnchor=new root.jsPlumb.Anchor(anchorParams);newAnchor.clone=function(){return new root.jsPlumb.Anchor(anchorParams);};}}if(!newAnchor.id){newAnchor.id="anchor_"+_idstamp();}return newAnchor;};/**\r\n         * makes a list of anchors from the given list of types or coords, eg\r\n         * ["TopCenter", "RightMiddle", "BottomCenter", [0, 1, -1, -1] ]\r\n         */this.makeAnchors=function(types,elementId,jsPlumbInstance){var r=[];for(var i=0,ii=types.length;i<ii;i++){if(typeof types[i]==="string"){r.push(root.jsPlumb.Anchors[types[i]]({elementId:elementId,jsPlumbInstance:jsPlumbInstance}));}else if(_ju.isArray(types[i])){r.push(_currentInstance.makeAnchor(types[i],elementId,jsPlumbInstance));}}return r;};/**\r\n         * Makes a dynamic anchor from the given list of anchors (which may be in shorthand notation as strings or dimension arrays, or Anchor\r\n         * objects themselves) and the given, optional, anchorSelector function (jsPlumb uses a default if this is not provided; most people will\r\n         * not need to provide this - i think).\r\n         */this.makeDynamicAnchor=function(anchors,anchorSelector){return new root.jsPlumb.DynamicAnchor({anchors:anchors,selector:anchorSelector,elementId:null,jsPlumbInstance:_currentInstance});};// --------------------- makeSource/makeTarget ---------------------------------------------- \nthis.targetEndpointDefinitions={};this.sourceEndpointDefinitions={};var selectorFilter=function selectorFilter(evt,_el,selector,_instance,negate){var t=evt.target||evt.srcElement,ok=false,sel=_instance.getSelector(_el,selector);for(var j=0;j<sel.length;j++){if(sel[j]===t){ok=true;break;}}return negate?!ok:ok;};var _makeElementDropHandler=function _makeElementDropHandler(elInfo,p,dropOptions,isSource,isTarget){var proxyComponent=new jsPlumbUIComponent(p);var _drop=p._jsPlumb.EndpointDropHandler({jsPlumb:_currentInstance,enabled:function enabled(){return elInfo.def.enabled;},isFull:function isFull(){var targetCount=_currentInstance.select({target:elInfo.id}).length;return elInfo.def.maxConnections>0&&targetCount>=elInfo.def.maxConnections;},element:elInfo.el,elementId:elInfo.id,isSource:isSource,isTarget:isTarget,addClass:function addClass(clazz){_currentInstance.addClass(elInfo.el,clazz);},removeClass:function removeClass(clazz){_currentInstance.removeClass(elInfo.el,clazz);},onDrop:function onDrop(jpc){var source=jpc.endpoints[0];source.anchor.locked=false;},isDropAllowed:function isDropAllowed(){return proxyComponent.isDropAllowed.apply(proxyComponent,arguments);},isRedrop:function isRedrop(jpc){return jpc.suspendedElement!=null&&jpc.suspendedEndpoint!=null&&jpc.suspendedEndpoint.element===elInfo.el;},getEndpoint:function getEndpoint(jpc){// make a new Endpoint for the target, or get it from the cache if uniqueEndpoint\n// is set. if its a redrop the new endpoint will be immediately cleaned up.\nvar newEndpoint=elInfo.def.endpoint;// if no cached endpoint, or there was one but it has been cleaned up\n// (ie. detached), create a new one\nif(newEndpoint==null||newEndpoint._jsPlumb==null){var eps=_currentInstance.deriveEndpointAndAnchorSpec(jpc.getType().join(" "),true);var pp=eps.endpoints?root.jsPlumb.extend(p,{endpoint:elInfo.def.def.endpoint||eps.endpoints[1]}):p;if(eps.anchors){pp=root.jsPlumb.extend(pp,{anchor:elInfo.def.def.anchor||eps.anchors[1]});}newEndpoint=_currentInstance.addEndpoint(elInfo.el,pp);newEndpoint._mtNew=true;}if(p.uniqueEndpoint){elInfo.def.endpoint=newEndpoint;}newEndpoint.setDeleteOnEmpty(true);// if connection is detachable, init the new endpoint to be draggable, to support that happening.\nif(jpc.isDetachable()){newEndpoint.initDraggable();}// if the anchor has a \'positionFinder\' set, then delegate to that function to find\n// out where to locate the anchor.\nif(newEndpoint.anchor.positionFinder!=null){var dropPosition=_currentInstance.getUIPosition(arguments,_currentInstance.getZoom()),elPosition=_currentInstance.getOffset(elInfo.el),elSize=_currentInstance.getSize(elInfo.el),ap=dropPosition==null?[0,0]:newEndpoint.anchor.positionFinder(dropPosition,elPosition,elSize,newEndpoint.anchor.constructorParams);newEndpoint.anchor.x=ap[0];newEndpoint.anchor.y=ap[1];// now figure an orientation for it..kind of hard to know what to do actually. probably the best thing i can do is to\n// support specifying an orientation in the anchor\'s spec. if one is not supplied then i will make the orientation\n// be what will cause the most natural link to the source: it will be pointing at the source, but it needs to be\n// specified in one axis only, and so how to make that choice? i think i will use whichever axis is the one in which\n// the target is furthest away from the source.\n}return newEndpoint;},maybeCleanup:function maybeCleanup(ep){if(ep._mtNew&&ep.connections.length===0){_currentInstance.deleteObject({endpoint:ep});}else{delete ep._mtNew;}}});// wrap drop events as needed and initialise droppable\nvar dropEvent=root.jsPlumb.dragEvents.drop;dropOptions.scope=dropOptions.scope||p.scope||_currentInstance.Defaults.Scope;dropOptions[dropEvent]=_ju.wrap(dropOptions[dropEvent],_drop,true);// if target, return true from the over event. this will cause katavorio to stop setting drops to hover\n// if multipleDrop is set to false.\nif(isTarget){dropOptions[root.jsPlumb.dragEvents.over]=function(){return true;};}// vanilla jsplumb only\nif(p.allowLoopback===false){dropOptions.canDrop=function(_drag){var de=_drag.getDragElement()._jsPlumbRelatedElement;return de!==elInfo.el;};}_currentInstance.initDroppable(elInfo.el,dropOptions,"internal");return _drop;};// see API docs\nthis.makeTarget=function(el,params,referenceParams){// put jsplumb ref into params without altering the params passed in\nvar p=root.jsPlumb.extend({_jsPlumb:this},referenceParams);root.jsPlumb.extend(p,params);var maxConnections=p.maxConnections||-1,_doOne=function(el){// get the element\'s id and store the endpoint definition for it.  jsPlumb.connect calls will look for one of these,\n// and use the endpoint definition if found.\n// decode the info for this element (id and element)\nvar elInfo=_info(el),elid=elInfo.id,dropOptions=root.jsPlumb.extend({},p.dropOptions||{}),type=p.connectionType||"default";this.targetEndpointDefinitions[elid]=this.targetEndpointDefinitions[elid]||{};_ensureContainer(elid);// if this is a group and the user has not mandated a rank, set to -1 so that Nodes takes\n// precedence.\nif(elInfo.el._isJsPlumbGroup&&dropOptions.rank==null){dropOptions.rank=-1;}// store the definition\nvar _def={def:root.jsPlumb.extend({},p),uniqueEndpoint:p.uniqueEndpoint,maxConnections:maxConnections,enabled:true};if(p.createEndpoint){_def.uniqueEndpoint=true;_def.endpoint=_currentInstance.addEndpoint(el,_def.def);_def.endpoint.setDeleteOnEmpty(false);}elInfo.def=_def;this.targetEndpointDefinitions[elid][type]=_def;_makeElementDropHandler(elInfo,p,dropOptions,p.isSource===true,true);// stash the definition on the drop\nelInfo.el._katavorioDrop[elInfo.el._katavorioDrop.length-1].targetDef=_def;}.bind(this);// make an array if only given one element\nvar inputs=el.length&&el.constructor!==String?el:[el];// register each one in the list.\nfor(var i=0,ii=inputs.length;i<ii;i++){_doOne(inputs[i]);}return this;};// see api docs\nthis.unmakeTarget=function(el,doNotClearArrays){var info=_info(el);_currentInstance.destroyDroppable(info.el,"internal");if(!doNotClearArrays){delete this.targetEndpointDefinitions[info.id];}return this;};// see api docs\nthis.makeSource=function(el,params,referenceParams){var p=root.jsPlumb.extend({_jsPlumb:this},referenceParams);root.jsPlumb.extend(p,params);var type=p.connectionType||"default";var aae=_currentInstance.deriveEndpointAndAnchorSpec(type);p.endpoint=p.endpoint||aae.endpoints[0];p.anchor=p.anchor||aae.anchors[0];var maxConnections=p.maxConnections||-1,onMaxConnections=p.onMaxConnections,_doOne=function(elInfo){// get the element\'s id and store the endpoint definition for it.  jsPlumb.connect calls will look for one of these,\n// and use the endpoint definition if found.\nvar elid=elInfo.id,_del=this.getElement(elInfo.el);this.sourceEndpointDefinitions[elid]=this.sourceEndpointDefinitions[elid]||{};_ensureContainer(elid);var _def={def:root.jsPlumb.extend({},p),uniqueEndpoint:p.uniqueEndpoint,maxConnections:maxConnections,enabled:true};if(p.createEndpoint){_def.uniqueEndpoint=true;_def.endpoint=_currentInstance.addEndpoint(el,_def.def);_def.endpoint.setDeleteOnEmpty(false);}this.sourceEndpointDefinitions[elid][type]=_def;elInfo.def=_def;var stopEvent=root.jsPlumb.dragEvents.stop,dragEvent=root.jsPlumb.dragEvents.drag,dragOptions=root.jsPlumb.extend({},p.dragOptions||{}),existingDrag=dragOptions.drag,existingStop=dragOptions.stop,ep=null,endpointAddedButNoDragYet=false;// set scope if its not set in dragOptions but was passed in in params\ndragOptions.scope=dragOptions.scope||p.scope;dragOptions[dragEvent]=_ju.wrap(dragOptions[dragEvent],function(){if(existingDrag){existingDrag.apply(this,arguments);}endpointAddedButNoDragYet=false;});dragOptions[stopEvent]=_ju.wrap(dragOptions[stopEvent],function(){if(existingStop){existingStop.apply(this,arguments);}this.currentlyDragging=false;if(ep._jsPlumb!=null){// if not cleaned up...\n// reset the anchor to the anchor that was initially provided. the one we were using to drag\n// the connection was just a placeholder that was located at the place the user pressed the\n// mouse button to initiate the drag.\nvar anchorDef=p.anchor||this.Defaults.Anchor,oldAnchor=ep.anchor,oldConnection=ep.connections[0];var newAnchor=this.makeAnchor(anchorDef,elid,this),_el=ep.element;// if the anchor has a \'positionFinder\' set, then delegate to that function to find\n// out where to locate the anchor. issue 117.\nif(newAnchor.positionFinder!=null){var elPosition=_currentInstance.getOffset(_el),elSize=this.getSize(_el),dropPosition={left:elPosition.left+oldAnchor.x*elSize[0],top:elPosition.top+oldAnchor.y*elSize[1]},ap=newAnchor.positionFinder(dropPosition,elPosition,elSize,newAnchor.constructorParams);newAnchor.x=ap[0];newAnchor.y=ap[1];}ep.setAnchor(newAnchor,true);ep.repaint();this.repaint(ep.elementId);if(oldConnection!=null){this.repaint(oldConnection.targetId);}}}.bind(this));// when the user presses the mouse, add an Endpoint, if we are enabled.\nvar mouseDownListener=function(e){// on right mouse button, abort.\nif(e.which===3||e.button===2){return;}// TODO store def on element.\nvar def=this.sourceEndpointDefinitions[elid][type];// if disabled, return.\nif(!def.enabled){return;}elid=this.getId(this.getElement(elInfo.el));// elid might have changed since this method was called to configure the element.\n// if a filter was given, run it, and return if it says no.\nif(p.filter){var r=_ju.isString(p.filter)?selectorFilter(e,elInfo.el,p.filter,this,p.filterExclude):p.filter(e,elInfo.el);if(r===false){return;}}// if maxConnections reached\nvar sourceCount=this.select({source:elid}).length;if(def.maxConnections>=0&&sourceCount>=def.maxConnections){if(onMaxConnections){onMaxConnections({element:elInfo.el,maxConnections:maxConnections},e);}return false;}// find the position on the element at which the mouse was pressed; this is where the endpoint\n// will be located.\nvar elxy=root.jsPlumb.getPositionOnElement(e,_del,_zoom);// we need to override the anchor in here, and force \'isSource\', but we don\'t want to mess with\n// the params passed in, because after a connection is established we\'re going to reset the endpoint\n// to have the anchor we were given.\nvar tempEndpointParams={};root.jsPlumb.extend(tempEndpointParams,p);tempEndpointParams.isTemporarySource=true;tempEndpointParams.anchor=[elxy[0],elxy[1],0,0];tempEndpointParams.dragOptions=dragOptions;if(def.def.scope){tempEndpointParams.scope=def.def.scope;}ep=this.addEndpoint(elid,tempEndpointParams);endpointAddedButNoDragYet=true;ep.setDeleteOnEmpty(true);// if unique endpoint and it\'s already been created, push it onto the endpoint we create. at the end\n// of a successful connection we\'ll switch to that endpoint.\n// TODO this is the same code as the programmatic endpoints create on line 1050 ish\nif(def.uniqueEndpoint){if(!def.endpoint){def.endpoint=ep;ep.setDeleteOnEmpty(false);}else{ep.finalEndpoint=def.endpoint;}}var _delTempEndpoint=function _delTempEndpoint(){// this mouseup event is fired only if no dragging occurred, by jquery and yui, but for mootools\n// it is fired even if dragging has occurred, in which case we would blow away a perfectly\n// legitimate endpoint, were it not for this check.  the flag is set after adding an\n// endpoint and cleared in a drag listener we set in the dragOptions above.\n_currentInstance.off(ep.canvas,"mouseup",_delTempEndpoint);_currentInstance.off(elInfo.el,"mouseup",_delTempEndpoint);if(endpointAddedButNoDragYet){endpointAddedButNoDragYet=false;_currentInstance.deleteEndpoint(ep);}};_currentInstance.on(ep.canvas,"mouseup",_delTempEndpoint);_currentInstance.on(elInfo.el,"mouseup",_delTempEndpoint);// optionally check for attributes to extract from the source element\nvar payload={};if(def.def.extract){for(var att in def.def.extract){var v=(e.srcElement||e.target).getAttribute(att);if(v){payload[def.def.extract[att]]=v;}}}// and then trigger its mousedown event, which will kick off a drag, which will start dragging\n// a new connection from this endpoint.\n_currentInstance.trigger(ep.canvas,"mousedown",e,payload);_ju.consume(e);}.bind(this);this.on(elInfo.el,"mousedown",mouseDownListener);_def.trigger=mouseDownListener;// if a filter was provided, set it as a dragFilter on the element,\n// to prevent the element drag function from kicking in when we want to\n// drag a new connection\nif(p.filter&&(_ju.isString(p.filter)||_ju.isFunction(p.filter))){_currentInstance.setDragFilter(elInfo.el,p.filter);}var dropOptions=root.jsPlumb.extend({},p.dropOptions||{});_makeElementDropHandler(elInfo,p,dropOptions,true,p.isTarget===true);}.bind(this);var inputs=el.length&&el.constructor!==String?el:[el];for(var i=0,ii=inputs.length;i<ii;i++){_doOne(_info(inputs[i]));}return this;};// see api docs\nthis.unmakeSource=function(el,connectionType,doNotClearArrays){var info=_info(el);_currentInstance.destroyDroppable(info.el,"internal");var eldefs=this.sourceEndpointDefinitions[info.id];if(eldefs){for(var def in eldefs){if(connectionType==null||connectionType===def){var mouseDownListener=eldefs[def].trigger;if(mouseDownListener){_currentInstance.off(info.el,"mousedown",mouseDownListener);}if(!doNotClearArrays){delete this.sourceEndpointDefinitions[info.id][def];}}}}return this;};// see api docs\nthis.unmakeEverySource=function(){for(var i in this.sourceEndpointDefinitions){_currentInstance.unmakeSource(i,null,true);}this.sourceEndpointDefinitions={};return this;};var _getScope=function(el,types,connectionType){types=_ju.isArray(types)?types:[types];var id=_getId(el);connectionType=connectionType||"default";for(var i=0;i<types.length;i++){var eldefs=this[types[i]][id];if(eldefs&&eldefs[connectionType]){return eldefs[connectionType].def.scope||this.Defaults.Scope;}}}.bind(this);var _setScope=function(el,scope,types,connectionType){types=_ju.isArray(types)?types:[types];var id=_getId(el);connectionType=connectionType||"default";for(var i=0;i<types.length;i++){var eldefs=this[types[i]][id];if(eldefs&&eldefs[connectionType]){eldefs[connectionType].def.scope=scope;}}}.bind(this);this.getScope=function(el,scope){return _getScope(el,["sourceEndpointDefinitions","targetEndpointDefinitions"]);};this.getSourceScope=function(el){return _getScope(el,"sourceEndpointDefinitions");};this.getTargetScope=function(el){return _getScope(el,"targetEndpointDefinitions");};this.setScope=function(el,scope,connectionType){this.setSourceScope(el,scope,connectionType);this.setTargetScope(el,scope,connectionType);};this.setSourceScope=function(el,scope,connectionType){_setScope(el,scope,"sourceEndpointDefinitions",connectionType);// we get the source scope during the mousedown event, but we also want to set this.\nthis.setDragScope(el,scope);};this.setTargetScope=function(el,scope,connectionType){_setScope(el,scope,"targetEndpointDefinitions",connectionType);this.setDropScope(el,scope);};// see api docs\nthis.unmakeEveryTarget=function(){for(var i in this.targetEndpointDefinitions){_currentInstance.unmakeTarget(i,true);}this.targetEndpointDefinitions={};return this;};// does the work of setting a source enabled or disabled.\nvar _setEnabled=function(type,el,state,toggle,connectionType){var a=type==="source"?this.sourceEndpointDefinitions:this.targetEndpointDefinitions,originalState,info,newState;connectionType=connectionType||"default";// a selector or an array\nif(el.length&&!_ju.isString(el)){originalState=[];for(var i=0,ii=el.length;i<ii;i++){info=_info(el[i]);if(a[info.id]&&a[info.id][connectionType]){originalState[i]=a[info.id][connectionType].enabled;newState=toggle?!originalState[i]:state;a[info.id][connectionType].enabled=newState;_currentInstance[newState?"removeClass":"addClass"](info.el,"jtk-"+type+"-disabled");}}}// otherwise a DOM element or a String ID.\nelse{info=_info(el);var id=info.id;if(a[id]&&a[id][connectionType]){originalState=a[id][connectionType].enabled;newState=toggle?!originalState:state;a[id][connectionType].enabled=newState;_currentInstance[newState?"removeClass":"addClass"](info.el,"jtk-"+type+"-disabled");}}return originalState;}.bind(this);var _first=function(el,fn){if(_ju.isString(el)||!el.length){return fn.apply(this,[el]);}else if(el.length){return fn.apply(this,[el[0]]);}}.bind(this);this.toggleSourceEnabled=function(el,connectionType){_setEnabled("source",el,null,true,connectionType);return this.isSourceEnabled(el,connectionType);};this.setSourceEnabled=function(el,state,connectionType){return _setEnabled("source",el,state,null,connectionType);};this.isSource=function(el,connectionType){connectionType=connectionType||"default";return _first(el,function(_el){var eldefs=this.sourceEndpointDefinitions[_info(_el).id];return eldefs!=null&&eldefs[connectionType]!=null;}.bind(this));};this.isSourceEnabled=function(el,connectionType){connectionType=connectionType||"default";return _first(el,function(_el){var sep=this.sourceEndpointDefinitions[_info(_el).id];return sep&&sep[connectionType]&&sep[connectionType].enabled===true;}.bind(this));};this.toggleTargetEnabled=function(el,connectionType){_setEnabled("target",el,null,true,connectionType);return this.isTargetEnabled(el,connectionType);};this.isTarget=function(el,connectionType){connectionType=connectionType||"default";return _first(el,function(_el){var eldefs=this.targetEndpointDefinitions[_info(_el).id];return eldefs!=null&&eldefs[connectionType]!=null;}.bind(this));};this.isTargetEnabled=function(el,connectionType){connectionType=connectionType||"default";return _first(el,function(_el){var tep=this.targetEndpointDefinitions[_info(_el).id];return tep&&tep[connectionType]&&tep[connectionType].enabled===true;}.bind(this));};this.setTargetEnabled=function(el,state,connectionType){return _setEnabled("target",el,state,null,connectionType);};// --------------------- end makeSource/makeTarget ----------------------------------------------\nthis.ready=function(fn){_currentInstance.bind("ready",fn);};var _elEach=function _elEach(el,fn){// support both lists...\nif((typeof el==="undefined"?"undefined":_typeof(el))===\'object\'&&el.length){for(var i=0,ii=el.length;i<ii;i++){fn(el[i]);}}else{// ...and single strings or elements.\nfn(el);}return _currentInstance;};// repaint some element\'s endpoints and connections\nthis.repaint=function(el,ui,timestamp){return _elEach(el,function(_el){_draw(_el,ui,timestamp);});};this.revalidate=function(el,timestamp,isIdAlready){return _elEach(el,function(_el){var elId=isIdAlready?_el:_currentInstance.getId(_el);_currentInstance.updateOffset({elId:elId,recalc:true,timestamp:timestamp});var dm=_currentInstance.getDragManager();if(dm){dm.updateOffsets(elId);}_currentInstance.repaint(_el);});};// repaint every endpoint and connection.\nthis.repaintEverything=function(){// TODO this timestamp causes continuous anchors to not repaint properly.\n// fix this. do not just take out the timestamp. it runs a lot faster with\n// the timestamp included.\nvar timestamp=_timestamp(),elId;for(elId in endpointsByElement){_currentInstance.updateOffset({elId:elId,recalc:true,timestamp:timestamp});}for(elId in endpointsByElement){_draw(elId,null,timestamp);}return this;};this.removeAllEndpoints=function(el,recurse,affectedElements){affectedElements=affectedElements||[];var _one=function _one(_el){var info=_info(_el),ebe=endpointsByElement[info.id],i,ii;if(ebe){affectedElements.push(info);for(i=0,ii=ebe.length;i<ii;i++){_currentInstance.deleteEndpoint(ebe[i],false);}}delete endpointsByElement[info.id];if(recurse){if(info.el&&info.el.nodeType!==3&&info.el.nodeType!==8){for(i=0,ii=info.el.childNodes.length;i<ii;i++){_one(info.el.childNodes[i]);}}}};_one(el);return this;};var _doRemove=function _doRemove(info,affectedElements){_currentInstance.removeAllEndpoints(info.id,true,affectedElements);var dm=_currentInstance.getDragManager();var _one=function _one(_info){if(dm){dm.elementRemoved(_info.id);}_currentInstance.anchorManager.clearFor(_info.id);_currentInstance.anchorManager.removeFloatingConnection(_info.id);if(_currentInstance.isSource(_info.el)){_currentInstance.unmakeSource(_info.el);}if(_currentInstance.isTarget(_info.el)){_currentInstance.unmakeTarget(_info.el);}_currentInstance.destroyDraggable(_info.el);_currentInstance.destroyDroppable(_info.el);delete _currentInstance.floatingConnections[_info.id];delete managedElements[_info.id];delete offsets[_info.id];if(_info.el){_currentInstance.removeElement(_info.el);_info.el._jsPlumb=null;}};// remove all affected child elements\nfor(var ae=1;ae<affectedElements.length;ae++){_one(affectedElements[ae]);}// and always remove the requested one from the dom.\n_one(info);};/**\r\n         * Remove the given element, including cleaning up all endpoints registered for it.\r\n         * This is exposed in the public API but also used internally by jsPlumb when removing the\r\n         * element associated with a connection drag.\r\n         */this.remove=function(el,doNotRepaint){var info=_info(el),affectedElements=[];if(info.text){info.el.parentNode.removeChild(info.el);}else if(info.id){_currentInstance.batch(function(){_doRemove(info,affectedElements);},doNotRepaint===false);}return _currentInstance;};this.empty=function(el,doNotRepaint){var affectedElements=[];var _one=function _one(el,dontRemoveFocus){var info=_info(el);if(info.text){info.el.parentNode.removeChild(info.el);}else if(info.el){while(info.el.childNodes.length>0){_one(info.el.childNodes[0]);}if(!dontRemoveFocus){_doRemove(info,affectedElements);}}};_currentInstance.batch(function(){_one(el,true);},doNotRepaint===false);return _currentInstance;};this.reset=function(doNotUnbindInstanceEventListeners){_currentInstance.silently(function(){_hoverSuspended=false;_currentInstance.removeAllGroups();_currentInstance.removeGroupManager();_currentInstance.deleteEveryEndpoint();if(!doNotUnbindInstanceEventListeners){_currentInstance.unbind();}this.targetEndpointDefinitions={};this.sourceEndpointDefinitions={};connections.length=0;if(this.doReset){this.doReset();}}.bind(this));};var _clearObject=function _clearObject(obj){if(obj.canvas&&obj.canvas.parentNode){obj.canvas.parentNode.removeChild(obj.canvas);}obj.cleanup();obj.destroy();};this.clear=function(){_currentInstance.select().each(_clearObject);_currentInstance.selectEndpoints().each(_clearObject);endpointsByElement={};endpointsByUUID={};};this.setDefaultScope=function(scope){DEFAULT_SCOPE=scope;return _currentInstance;};// sets whether or not some element should be currently draggable.\nthis.setDraggable=_setDraggable;this.deriveEndpointAndAnchorSpec=function(type,dontPrependDefault){var bits=((dontPrependDefault?"":"default ")+type).split(/[\\s]/),eps=null,ep=null,a=null,as=null;for(var i=0;i<bits.length;i++){var _t=_currentInstance.getType(bits[i],"connection");if(_t){if(_t.endpoints){eps=_t.endpoints;}if(_t.endpoint){ep=_t.endpoint;}if(_t.anchors){as=_t.anchors;}if(_t.anchor){a=_t.anchor;}}}return{endpoints:eps?eps:[ep,ep],anchors:as?as:[a,a]};};// sets the id of some element, changing whatever we need to to keep track.\nthis.setId=function(el,newId,doNotSetAttribute){//\nvar id;if(_ju.isString(el)){id=el;}else{el=this.getElement(el);id=this.getId(el);}var sConns=this.getConnections({source:id,scope:\'*\'},true),tConns=this.getConnections({target:id,scope:\'*\'},true);newId=""+newId;if(!doNotSetAttribute){el=this.getElement(id);this.setAttribute(el,"id",newId);}else{el=this.getElement(newId);}endpointsByElement[newId]=endpointsByElement[id]||[];for(var i=0,ii=endpointsByElement[newId].length;i<ii;i++){endpointsByElement[newId][i].setElementId(newId);endpointsByElement[newId][i].setReferenceElement(el);}delete endpointsByElement[id];this.sourceEndpointDefinitions[newId]=this.sourceEndpointDefinitions[id];delete this.sourceEndpointDefinitions[id];this.targetEndpointDefinitions[newId]=this.targetEndpointDefinitions[id];delete this.targetEndpointDefinitions[id];this.anchorManager.changeId(id,newId);var dm=this.getDragManager();if(dm){dm.changeId(id,newId);}managedElements[newId]=managedElements[id];delete managedElements[id];var _conns=function _conns(list,epIdx,type){for(var i=0,ii=list.length;i<ii;i++){list[i].endpoints[epIdx].setElementId(newId);list[i].endpoints[epIdx].setReferenceElement(el);list[i][type+"Id"]=newId;list[i][type]=el;}};_conns(sConns,0,"source");_conns(tConns,1,"target");this.repaint(newId);};this.setDebugLog=function(debugLog){log=debugLog;};this.setSuspendDrawing=function(val,repaintAfterwards){var curVal=_suspendDrawing;_suspendDrawing=val;if(val){_suspendedAt=new Date().getTime();}else{_suspendedAt=null;}if(repaintAfterwards){this.repaintEverything();}return curVal;};// returns whether or not drawing is currently suspended.\nthis.isSuspendDrawing=function(){return _suspendDrawing;};// return timestamp for when drawing was suspended.\nthis.getSuspendedAt=function(){return _suspendedAt;};this.batch=function(fn,doNotRepaintAfterwards){var _wasSuspended=this.isSuspendDrawing();if(!_wasSuspended){this.setSuspendDrawing(true);}try{fn();}catch(e){_ju.log("Function run while suspended failed",e);}if(!_wasSuspended){this.setSuspendDrawing(false,!doNotRepaintAfterwards);}};this.doWhileSuspended=this.batch;this.getCachedData=_getCachedData;this.timestamp=_timestamp;this.show=function(el,changeEndpoints){_setVisible(el,"block",changeEndpoints);return _currentInstance;};// TODO: update this method to return the current state.\nthis.toggleVisible=_toggleVisible;this.toggleDraggable=_toggleDraggable;this.addListener=this.bind;var floatingConnections=[];this.registerFloatingConnection=function(info,conn,ep){floatingConnections[info.id]=conn;// only register for the target endpoint; we will not be dragging the source at any time\n// before this connection is either discarded or made into a permanent connection.\n_ju.addToList(endpointsByElement,info.id,ep);};this.getFloatingConnectionFor=function(id){return floatingConnections[id];};};_ju.extend(root.jsPlumbInstance,_ju.EventGenerator,{setAttribute:function setAttribute(el,a,v){this.setAttribute(el,a,v);},getAttribute:function getAttribute(el,a){return this.getAttribute(root.jsPlumb.getElement(el),a);},convertToFullOverlaySpec:function convertToFullOverlaySpec(spec){if(_ju.isString(spec)){spec=[spec,{}];}spec[1].id=spec[1].id||_ju.uuid();return spec;},registerConnectionType:function registerConnectionType(id,type){this._connectionTypes[id]=root.jsPlumb.extend({},type);if(type.overlays){var to={};for(var i=0;i<type.overlays.length;i++){// if a string, convert to object representation so that we can store the typeid on it.\n// also assign an id.\nvar fo=this.convertToFullOverlaySpec(type.overlays[i]);to[fo[1].id]=fo;}this._connectionTypes[id].overlays=to;}},registerConnectionTypes:function registerConnectionTypes(types){for(var i in types){this.registerConnectionType(i,types[i]);}},registerEndpointType:function registerEndpointType(id,type){this._endpointTypes[id]=root.jsPlumb.extend({},type);if(type.overlays){var to={};for(var i=0;i<type.overlays.length;i++){// if a string, convert to object representation so that we can store the typeid on it.\n// also assign an id.\nvar fo=this.convertToFullOverlaySpec(type.overlays[i]);to[fo[1].id]=fo;}this._endpointTypes[id].overlays=to;}},registerEndpointTypes:function registerEndpointTypes(types){for(var i in types){this.registerEndpointType(i,types[i]);}},getType:function getType(id,typeDescriptor){return typeDescriptor==="connection"?this._connectionTypes[id]:this._endpointTypes[id];},setIdChanged:function setIdChanged(oldId,newId){this.setId(oldId,newId,true);},// set parent: change the parent for some node and update all the registrations we need to.\nsetParent:function setParent(el,newParent){var _dom=this.getElement(el),_id=this.getId(_dom),_pdom=this.getElement(newParent),_pid=this.getId(_pdom),dm=this.getDragManager();_dom.parentNode.removeChild(_dom);_pdom.appendChild(_dom);if(dm){dm.setParent(_dom,_id,_pdom,_pid);}},extend:function extend(o1,o2,names){var i;if(names){for(i=0;i<names.length;i++){o1[names[i]]=o2[names[i]];}}else{for(i in o2){o1[i]=o2[i];}}return o1;},floatingConnections:{},getFloatingAnchorIndex:function getFloatingAnchorIndex(jpc){return jpc.endpoints[0].isFloating()?0:jpc.endpoints[1].isFloating()?1:-1;}});jsPlumbInstance.prototype.Defaults={Anchor:"Bottom",Anchors:[null,null],ConnectionsDetachable:true,ConnectionOverlays:[],Connector:"Bezier",Container:null,DoNotThrowErrors:false,DragOptions:{},DropOptions:{},Endpoint:"Dot",EndpointOverlays:[],Endpoints:[null,null],EndpointStyle:{fill:"#456"},EndpointStyles:[null,null],EndpointHoverStyle:null,EndpointHoverStyles:[null,null],HoverPaintStyle:null,LabelStyle:{color:"black"},LogEnabled:false,Overlays:[],MaxConnections:1,PaintStyle:{"stroke-width":4,stroke:"#456"},ReattachConnections:false,RenderMode:"svg",Scope:"jsPlumb_DefaultScope"};// --------------------- static instance + module registration -------------------------------------------\n// create static instance and assign to window if window exists.\t\nvar jsPlumb=new jsPlumbInstance();// register on \'root\' (lets us run on server or browser)\nroot.jsPlumb=jsPlumb;// add \'getInstance\' method to static instance\njsPlumb.getInstance=function(_defaults,overrideFns){var j=new jsPlumbInstance(_defaults);if(overrideFns){for(var ovf in overrideFns){j[ovf]=overrideFns[ovf];}}j.init();return j;};jsPlumb.each=function(spec,fn){if(spec==null){return;}if(typeof spec==="string"){fn(jsPlumb.getElement(spec));}else if(spec.length!=null){for(var i=0;i<spec.length;i++){fn(jsPlumb.getElement(spec[i]));}}else{fn(spec);}// assume it\'s an element.\n};// CommonJS\nif(true){exports.jsPlumb=jsPlumb;}// --------------------- end static instance + AMD registration -------------------------------------------\t\t\n}).call(typeof window!==\'undefined\'?window:this);/*\r\n * This file contains the base functionality for DOM type adapters.\r\n *\r\n * Copyright (c) 2010 - 2018 jsPlumb (hello@jsplumbtoolkit.com)\r\n *\r\n * https://jsplumbtoolkit.com\r\n * https://github.com/jsplumb/jsplumb\r\n *\r\n * Dual licensed under the MIT and GPL2 licenses.\r\n */;(function(){var root=this,_ju=root.jsPlumbUtil;var _genLoc=function _genLoc(prefix,e){if(e==null){return[0,0];}var ts=_touches(e),t=_getTouch(ts,0);return[t[prefix+"X"],t[prefix+"Y"]];},_pageLocation=_genLoc.bind(this,"page"),_screenLocation=_genLoc.bind(this,"screen"),_clientLocation=_genLoc.bind(this,"client"),_getTouch=function _getTouch(touches,idx){return touches.item?touches.item(idx):touches[idx];},_touches=function _touches(e){return e.touches&&e.touches.length>0?e.touches:e.changedTouches&&e.changedTouches.length>0?e.changedTouches:e.targetTouches&&e.targetTouches.length>0?e.targetTouches:[e];};/**\r\n     Manages dragging for some instance of jsPlumb.\r\n\r\n     TODO instead of this being accessed directly, it should subscribe to events on the jsPlumb instance: every method\r\n     in here is called directly by jsPlumb. But what should happen is that we have unpublished events that this listens\r\n     to.  The only trick is getting one of these instantiated with every jsPlumb instance: it needs to have a hook somehow.\r\n     Basically the general idea is to pull ALL the drag code out (prototype method registrations plus this) into a\r\n     dedicated drag script), that does not necessarily need to be included.\r\n\r\n\r\n     */var DragManager=function DragManager(_currentInstance){var _draggables={},_dlist=[],_delements={},_elementsWithEndpoints={},// elementids mapped to the draggable to which they belong.\n_draggablesForElements={};/**\r\n         register some element as draggable.  right now the drag init stuff is done elsewhere, and it is\r\n         possible that will continue to be the case.\r\n         */this.register=function(el){var id=_currentInstance.getId(el),parentOffset=_currentInstance.getOffset(el);if(!_draggables[id]){_draggables[id]=el;_dlist.push(el);_delements[id]={};}// look for child elements that have endpoints and register them against this draggable.\nvar _oneLevel=function _oneLevel(p){if(p){for(var i=0;i<p.childNodes.length;i++){if(p.childNodes[i].nodeType!==3&&p.childNodes[i].nodeType!==8){var cEl=jsPlumb.getElement(p.childNodes[i]),cid=_currentInstance.getId(p.childNodes[i],null,true);if(cid&&_elementsWithEndpoints[cid]&&_elementsWithEndpoints[cid]>0){var cOff=_currentInstance.getOffset(cEl);_delements[id][cid]={id:cid,offset:{left:cOff.left-parentOffset.left,top:cOff.top-parentOffset.top}};_draggablesForElements[cid]=id;}_oneLevel(p.childNodes[i]);}}}};_oneLevel(el);};// refresh the offsets for child elements of this element.\nthis.updateOffsets=function(elId,childOffsetOverrides){if(elId!=null){childOffsetOverrides=childOffsetOverrides||{};var domEl=jsPlumb.getElement(elId),id=_currentInstance.getId(domEl),children=_delements[id],parentOffset=_currentInstance.getOffset(domEl);if(children){for(var i in children){if(children.hasOwnProperty(i)){var cel=jsPlumb.getElement(i),cOff=childOffsetOverrides[i]||_currentInstance.getOffset(cel);// do not update if we have a value already and we\'d just be writing 0,0\nif(cel.offsetParent==null&&_delements[id][i]!=null){continue;}_delements[id][i]={id:i,offset:{left:cOff.left-parentOffset.left,top:cOff.top-parentOffset.top}};_draggablesForElements[i]=id;}}}}};/**\r\n         notification that an endpoint was added to the given el.  we go up from that el\'s parent\r\n         node, looking for a parent that has been registered as a draggable. if we find one, we add this\r\n         el to that parent\'s list of elements to update on drag (if it is not there already)\r\n         */this.endpointAdded=function(el,id){id=id||_currentInstance.getId(el);var b=document.body,p=el.parentNode;_elementsWithEndpoints[id]=_elementsWithEndpoints[id]?_elementsWithEndpoints[id]+1:1;while(p!=null&&p!==b){var pid=_currentInstance.getId(p,null,true);if(pid&&_draggables[pid]){var pLoc=_currentInstance.getOffset(p);if(_delements[pid][id]==null){var cLoc=_currentInstance.getOffset(el);_delements[pid][id]={id:id,offset:{left:cLoc.left-pLoc.left,top:cLoc.top-pLoc.top}};_draggablesForElements[id]=pid;}break;}p=p.parentNode;}};this.endpointDeleted=function(endpoint){if(_elementsWithEndpoints[endpoint.elementId]){_elementsWithEndpoints[endpoint.elementId]--;if(_elementsWithEndpoints[endpoint.elementId]<=0){for(var i in _delements){if(_delements.hasOwnProperty(i)&&_delements[i]){delete _delements[i][endpoint.elementId];delete _draggablesForElements[endpoint.elementId];}}}}};this.changeId=function(oldId,newId){_delements[newId]=_delements[oldId];_delements[oldId]={};_draggablesForElements[newId]=_draggablesForElements[oldId];_draggablesForElements[oldId]=null;};this.getElementsForDraggable=function(id){return _delements[id];};this.elementRemoved=function(elementId){var elId=_draggablesForElements[elementId];if(elId){delete _delements[elId][elementId];delete _draggablesForElements[elementId];}};this.reset=function(){_draggables={};_dlist=[];_delements={};_elementsWithEndpoints={};};//\n// notification drag ended. We check automatically if need to update some\n// ancestor\'s offsets.\n//\nthis.dragEnded=function(el){if(el.offsetParent!=null){var id=_currentInstance.getId(el),ancestor=_draggablesForElements[id];if(ancestor){this.updateOffsets(ancestor);}}};this.setParent=function(el,elId,p,pId,currentChildLocation){var current=_draggablesForElements[elId];if(!_delements[pId]){_delements[pId]={};}var pLoc=_currentInstance.getOffset(p),cLoc=currentChildLocation||_currentInstance.getOffset(el);if(current&&_delements[current]){delete _delements[current][elId];}_delements[pId][elId]={id:elId,offset:{left:cLoc.left-pLoc.left,top:cLoc.top-pLoc.top}};_draggablesForElements[elId]=pId;};this.clearParent=function(el,elId){var current=_draggablesForElements[elId];if(current){delete _delements[current][elId];delete _draggablesForElements[elId];}};this.revalidateParent=function(el,elId,childOffset){var current=_draggablesForElements[elId];if(current){var co={};co[elId]=childOffset;this.updateOffsets(current,co);_currentInstance.revalidate(current);}};this.getDragAncestor=function(el){var de=jsPlumb.getElement(el),id=_currentInstance.getId(de),aid=_draggablesForElements[id];if(aid){return jsPlumb.getElement(aid);}else{return null;}};};var trim=function trim(str){return str==null?null:str.replace(/^\\s\\s*/,\'\').replace(/\\s\\s*$/,\'\');},_setClassName=function _setClassName(el,cn,classList){cn=trim(cn);if(typeof el.className.baseVal!=="undefined"){el.className.baseVal=cn;}else{el.className=cn;}// recent (i currently have  61.0.3163.100) version of chrome do not update classList when you set the base val\n// of an svg element\'s className. in the long run we\'d like to move to just using classList anyway\ntry{var cl=el.classList;while(cl.length>0){cl.remove(cl.item(0));}for(var i=0;i<classList.length;i++){if(classList[i]){cl.add(classList[i]);}}}catch(e){// not fatal\nconsole.log("JSPLUMB: cannot set class list",e);}},_getClassName=function _getClassName(el){return typeof el.className.baseVal==="undefined"?el.className:el.className.baseVal;},_classManip=function _classManip(el,classesToAdd,classesToRemove){classesToAdd=classesToAdd==null?[]:_ju.isArray(classesToAdd)?classesToAdd:classesToAdd.split(/\\s+/);classesToRemove=classesToRemove==null?[]:_ju.isArray(classesToRemove)?classesToRemove:classesToRemove.split(/\\s+/);var className=_getClassName(el),curClasses=className.split(/\\s+/);var _oneSet=function _oneSet(add,classes){for(var i=0;i<classes.length;i++){if(add){if(curClasses.indexOf(classes[i])===-1){curClasses.push(classes[i]);}}else{var idx=curClasses.indexOf(classes[i]);if(idx!==-1){curClasses.splice(idx,1);}}}};_oneSet(true,classesToAdd);_oneSet(false,classesToRemove);_setClassName(el,curClasses.join(" "),curClasses);};root.jsPlumb.extend(root.jsPlumbInstance.prototype,{headless:false,pageLocation:_pageLocation,screenLocation:_screenLocation,clientLocation:_clientLocation,getDragManager:function getDragManager(){if(this.dragManager==null){this.dragManager=new DragManager(this);}return this.dragManager;},// NEVER CALLED IN THE CURRENT JS\nrecalculateOffsets:function recalculateOffsets(elId){this.getDragManager().updateOffsets(elId);},// CONVERTED\ncreateElement:function createElement(tag,style,clazz,atts){return this.createElementNS(null,tag,style,clazz,atts);},// CONVERTED\ncreateElementNS:function createElementNS(ns,tag,style,clazz,atts){var e=ns==null?document.createElement(tag):document.createElementNS(ns,tag);var i;style=style||{};for(i in style){e.style[i]=style[i];}if(clazz){e.className=clazz;}atts=atts||{};for(i in atts){e.setAttribute(i,""+atts[i]);}return e;},// CONVERTED\ngetAttribute:function getAttribute(el,attName){return el.getAttribute!=null?el.getAttribute(attName):null;},// CONVERTED\nsetAttribute:function setAttribute(el,a,v){if(el.setAttribute!=null){el.setAttribute(a,v);}},// CONVERTED\nsetAttributes:function setAttributes(el,atts){for(var i in atts){if(atts.hasOwnProperty(i)){el.setAttribute(i,atts[i]);}}},appendToRoot:function appendToRoot(node){document.body.appendChild(node);},// NOT CONVERTING\ngetRenderModes:function getRenderModes(){return["svg"];},// CONVERTED\ngetClass:_getClassName,// CONVERTED\naddClass:function addClass(el,clazz){jsPlumb.each(el,function(e){_classManip(e,clazz);});},// CONVERTED\nhasClass:function hasClass(el,clazz){el=jsPlumb.getElement(el);if(el.classList){return el.classList.contains(clazz);}else{return _getClassName(el).indexOf(clazz)!==-1;}},// CONVERTED\nremoveClass:function removeClass(el,clazz){jsPlumb.each(el,function(e){_classManip(e,null,clazz);});},// CONVERTED\nupdateClasses:function updateClasses(el,toAdd,toRemove){jsPlumb.each(el,function(e){_classManip(e,toAdd,toRemove);});},// CONVERTED\nsetClass:function setClass(el,clazz){if(clazz!=null){jsPlumb.each(el,function(e){_setClassName(e,clazz,clazz.split(/\\s+/));});}},// CONVERTED\nsetPosition:function setPosition(el,p){el.style.left=p.left+"px";el.style.top=p.top+"px";},// CONVERTED\ngetPosition:function getPosition(el){var _one=function _one(prop){var v=el.style[prop];return v?v.substring(0,v.length-2):0;};return{left:_one("left"),top:_one("top")};},// CONVERTED\ngetStyle:function getStyle(el,prop){if(typeof window.getComputedStyle!==\'undefined\'){return getComputedStyle(el,null).getPropertyValue(prop);}else{return el.currentStyle[prop];}},// CONVERTED\ngetSelector:function getSelector(ctx,spec){var sel=null;if(arguments.length===1){sel=ctx.nodeType!=null?ctx:document.querySelectorAll(ctx);}else{sel=ctx.querySelectorAll(spec);}return sel;},// CONVERTED\ngetOffset:function getOffset(el,relativeToRoot,container){el=jsPlumb.getElement(el);container=container||this.getContainer();var out={left:el.offsetLeft,top:el.offsetTop},op=relativeToRoot||container!=null&&el!==container&&el.offsetParent!==container?el.offsetParent:null,_maybeAdjustScroll=function(offsetParent){if(offsetParent!=null&&offsetParent!==document.body&&(offsetParent.scrollTop>0||offsetParent.scrollLeft>0)){out.left-=offsetParent.scrollLeft;out.top-=offsetParent.scrollTop;}}.bind(this);while(op!=null){out.left+=op.offsetLeft;out.top+=op.offsetTop;_maybeAdjustScroll(op);op=relativeToRoot?op.offsetParent:op.offsetParent===container?null:op.offsetParent;}// if container is scrolled and the element (or its offset parent) is not absolute or fixed, adjust accordingly.\nif(container!=null&&!relativeToRoot&&(container.scrollTop>0||container.scrollLeft>0)){var pp=el.offsetParent!=null?this.getStyle(el.offsetParent,"position"):"static",p=this.getStyle(el,"position");if(p!=="absolute"&&p!=="fixed"&&pp!=="absolute"&&pp!=="fixed"){out.left-=container.scrollLeft;out.top-=container.scrollTop;}}return out;},//\n// return x+y proportion of the given element\'s size corresponding to the location of the given event.\n//\ngetPositionOnElement:function getPositionOnElement(evt,el,zoom){var box=typeof el.getBoundingClientRect!=="undefined"?el.getBoundingClientRect():{left:0,top:0,width:0,height:0},body=document.body,docElem=document.documentElement,scrollTop=window.pageYOffset||docElem.scrollTop||body.scrollTop,scrollLeft=window.pageXOffset||docElem.scrollLeft||body.scrollLeft,clientTop=docElem.clientTop||body.clientTop||0,clientLeft=docElem.clientLeft||body.clientLeft||0,pst=0,psl=0,top=box.top+scrollTop-clientTop+pst*zoom,left=box.left+scrollLeft-clientLeft+psl*zoom,cl=jsPlumb.pageLocation(evt),w=box.width||el.offsetWidth*zoom,h=box.height||el.offsetHeight*zoom,x=(cl[0]-left)/w,y=(cl[1]-top)/h;return[x,y];},/**\r\n         * Gets the absolute position of some element as read from the left/top properties in its style.\r\n         * @method getAbsolutePosition\r\n         * @param {Element} el The element to retrieve the absolute coordinates from. **Note** this is a DOM element, not a selector from the underlying library.\r\n         * @return {Number[]} [left, top] pixel values.\r\n         */getAbsolutePosition:function getAbsolutePosition(el){var _one=function _one(s){var ss=el.style[s];if(ss){return parseFloat(ss.substring(0,ss.length-2));}};return[_one("left"),_one("top")];},/**\r\n         * Sets the absolute position of some element by setting the left/top properties in its style.\r\n         * @method setAbsolutePosition\r\n         * @param {Element} el The element to set the absolute coordinates on. **Note** this is a DOM element, not a selector from the underlying library.\r\n         * @param {Number[]} xy x and y coordinates\r\n         * @param {Number[]} [animateFrom] Optional previous xy to animate from.\r\n         * @param {Object} [animateOptions] Options for the animation.\r\n         */setAbsolutePosition:function setAbsolutePosition(el,xy,animateFrom,animateOptions){if(animateFrom){this.animate(el,{left:"+="+(xy[0]-animateFrom[0]),top:"+="+(xy[1]-animateFrom[1])},animateOptions);}else{el.style.left=xy[0]+"px";el.style.top=xy[1]+"px";}},/**\r\n         * gets the size for the element, in an array : [ width, height ].\r\n         */// CONVERTED\ngetSize:function getSize(el){return[el.offsetWidth,el.offsetHeight];},// CONVERTED\ngetWidth:function getWidth(el){return el.offsetWidth;},// CONVERTED\ngetHeight:function getHeight(el){return el.offsetHeight;},getRenderMode:function getRenderMode(){return"svg";}});}).call(typeof window!==\'undefined\'?window:this);/*\r\n * 2010 - 2018 jsPlumb (hello@jsplumbtoolkit.com)\r\n *\r\n * https://jsplumbtoolkit.com\r\n * https://github.com/jsplumb/jsplumb\r\n *\r\n * Dual licensed under the MIT and GPL2 licenses.\r\n */;(function(){"use strict";var root=this,_jp=root.jsPlumb,_ju=root.jsPlumbUtil;// ------------------------------ BEGIN OverlayCapablejsPlumbUIComponent --------------------------------------------\nvar _internalLabelOverlayId="__label",// this is a shortcut helper method to let people add a label as\n// overlay.\n_makeLabelOverlay=function _makeLabelOverlay(component,params){var _params={cssClass:params.cssClass,labelStyle:component.labelStyle,id:_internalLabelOverlayId,component:component,_jsPlumb:component._jsPlumb.instance// TODO not necessary, since the instance can be accessed through the component.\n},mergedParams=_jp.extend(_params,params);return new _jp.Overlays[component._jsPlumb.instance.getRenderMode()].Label(mergedParams);},_processOverlay=function _processOverlay(component,o){var _newOverlay=null;if(_ju.isArray(o)){// this is for the shorthand ["Arrow", { width:50 }] syntax\n// there\'s also a three arg version:\n// ["Arrow", { width:50 }, {location:0.7}]\n// which merges the 3rd arg into the 2nd.\nvar type=o[0],// make a copy of the object so as not to mess up anyone else\'s reference...\np=_jp.extend({component:component,_jsPlumb:component._jsPlumb.instance},o[1]);if(o.length===3){_jp.extend(p,o[2]);}_newOverlay=new _jp.Overlays[component._jsPlumb.instance.getRenderMode()][type](p);}else if(o.constructor===String){_newOverlay=new _jp.Overlays[component._jsPlumb.instance.getRenderMode()][o]({component:component,_jsPlumb:component._jsPlumb.instance});}else{_newOverlay=o;}_newOverlay.id=_newOverlay.id||_ju.uuid();component.cacheTypeItem("overlay",_newOverlay,_newOverlay.id);component._jsPlumb.overlays[_newOverlay.id]=_newOverlay;return _newOverlay;};_jp.OverlayCapableJsPlumbUIComponent=function(params){root.jsPlumbUIComponent.apply(this,arguments);this._jsPlumb.overlays={};this._jsPlumb.overlayPositions={};if(params.label){this.getDefaultType().overlays[_internalLabelOverlayId]=["Label",{label:params.label,location:params.labelLocation||this.defaultLabelLocation||0.5,labelStyle:params.labelStyle||this._jsPlumb.instance.Defaults.LabelStyle,id:_internalLabelOverlayId}];}this.setListenerComponent=function(c){if(this._jsPlumb){for(var i in this._jsPlumb.overlays){this._jsPlumb.overlays[i].setListenerComponent(c);}}};};_jp.OverlayCapableJsPlumbUIComponent.applyType=function(component,t){if(t.overlays){// loop through the ones in the type. if already present on the component,\n// dont remove or re-add.\nvar keep={},i;for(i in t.overlays){var existing=component._jsPlumb.overlays[t.overlays[i][1].id];if(existing){// maybe update from data, if there were parameterised values for instance.\nexisting.updateFrom(t.overlays[i][1]);keep[t.overlays[i][1].id]=true;}else{var c=component.getCachedTypeItem("overlay",t.overlays[i][1].id);if(c!=null){c.reattach(component._jsPlumb.instance,component);c.setVisible(true);// maybe update from data, if there were parameterised values for instance.\nc.updateFrom(t.overlays[i][1]);component._jsPlumb.overlays[c.id]=c;}else{c=component.addOverlay(t.overlays[i],true);}keep[c.id]=true;}}// now loop through the full overlays and remove those that we dont want to keep\nfor(i in component._jsPlumb.overlays){if(keep[component._jsPlumb.overlays[i].id]==null){component.removeOverlay(component._jsPlumb.overlays[i].id,true);// remove overlay but dont clean it up.\n// that would remove event listeners etc; overlays are never discarded by the types stuff, they are\n// just detached/reattached.\n}}}};_ju.extend(_jp.OverlayCapableJsPlumbUIComponent,root.jsPlumbUIComponent,{setHover:function setHover(hover,ignoreAttachedElements){if(this._jsPlumb&&!this._jsPlumb.instance.isConnectionBeingDragged()){for(var i in this._jsPlumb.overlays){this._jsPlumb.overlays[i][hover?"addClass":"removeClass"](this._jsPlumb.instance.hoverClass);}}},addOverlay:function addOverlay(overlay,doNotRepaint){var o=_processOverlay(this,overlay);if(!doNotRepaint){this.repaint();}return o;},getOverlay:function getOverlay(id){return this._jsPlumb.overlays[id];},getOverlays:function getOverlays(){return this._jsPlumb.overlays;},hideOverlay:function hideOverlay(id){var o=this.getOverlay(id);if(o){o.hide();}},hideOverlays:function hideOverlays(){for(var i in this._jsPlumb.overlays){this._jsPlumb.overlays[i].hide();}},showOverlay:function showOverlay(id){var o=this.getOverlay(id);if(o){o.show();}},showOverlays:function showOverlays(){for(var i in this._jsPlumb.overlays){this._jsPlumb.overlays[i].show();}},removeAllOverlays:function removeAllOverlays(doNotRepaint){for(var i in this._jsPlumb.overlays){if(this._jsPlumb.overlays[i].cleanup){this._jsPlumb.overlays[i].cleanup();}}this._jsPlumb.overlays={};this._jsPlumb.overlayPositions=null;if(!doNotRepaint){this.repaint();}},removeOverlay:function removeOverlay(overlayId,dontCleanup){var o=this._jsPlumb.overlays[overlayId];if(o){o.setVisible(false);if(!dontCleanup&&o.cleanup){o.cleanup();}delete this._jsPlumb.overlays[overlayId];if(this._jsPlumb.overlayPositions){delete this._jsPlumb.overlayPositions[overlayId];}}},removeOverlays:function removeOverlays(){for(var i=0,j=arguments.length;i<j;i++){this.removeOverlay(arguments[i]);}},moveParent:function moveParent(newParent){if(this.bgCanvas){this.bgCanvas.parentNode.removeChild(this.bgCanvas);newParent.appendChild(this.bgCanvas);}if(this.canvas&&this.canvas.parentNode){this.canvas.parentNode.removeChild(this.canvas);newParent.appendChild(this.canvas);for(var i in this._jsPlumb.overlays){if(this._jsPlumb.overlays[i].isAppendedAtTopLevel){var el=this._jsPlumb.overlays[i].getElement();el.parentNode.removeChild(el);newParent.appendChild(el);}}}},getLabel:function getLabel(){var lo=this.getOverlay(_internalLabelOverlayId);return lo!=null?lo.getLabel():null;},getLabelOverlay:function getLabelOverlay(){return this.getOverlay(_internalLabelOverlayId);},setLabel:function setLabel(l){var lo=this.getOverlay(_internalLabelOverlayId);if(!lo){var params=l.constructor===String||l.constructor===Function?{label:l}:l;lo=_makeLabelOverlay(this,params);this._jsPlumb.overlays[_internalLabelOverlayId]=lo;}else{if(l.constructor===String||l.constructor===Function){lo.setLabel(l);}else{if(l.label){lo.setLabel(l.label);}if(l.location){lo.setLocation(l.location);}}}if(!this._jsPlumb.instance.isSuspendDrawing()){this.repaint();}},cleanup:function cleanup(force){for(var i in this._jsPlumb.overlays){this._jsPlumb.overlays[i].cleanup(force);this._jsPlumb.overlays[i].destroy(force);}if(force){this._jsPlumb.overlays={};this._jsPlumb.overlayPositions=null;}},setVisible:function setVisible(v){this[v?"showOverlays":"hideOverlays"]();},setAbsoluteOverlayPosition:function setAbsoluteOverlayPosition(overlay,xy){this._jsPlumb.overlayPositions[overlay.id]=xy;},getAbsoluteOverlayPosition:function getAbsoluteOverlayPosition(overlay){return this._jsPlumb.overlayPositions?this._jsPlumb.overlayPositions[overlay.id]:null;},_clazzManip:function _clazzManip(action,clazz,dontUpdateOverlays){if(!dontUpdateOverlays){for(var i in this._jsPlumb.overlays){this._jsPlumb.overlays[i][action+"Class"](clazz);}}},addClass:function addClass(clazz,dontUpdateOverlays){this._clazzManip("add",clazz,dontUpdateOverlays);},removeClass:function removeClass(clazz,dontUpdateOverlays){this._clazzManip("remove",clazz,dontUpdateOverlays);}});// ------------------------------ END OverlayCapablejsPlumbUIComponent --------------------------------------------\n}).call(typeof window!==\'undefined\'?window:this);/*\r\n * This file contains the code for Endpoints.\r\n *\r\n * Copyright (c) 2010 - 2018 jsPlumb (hello@jsplumbtoolkit.com)\r\n * \r\n * https://jsplumbtoolkit.com\r\n * https://github.com/jsplumb/jsplumb\r\n * \r\n * Dual licensed under the MIT and GPL2 licenses.\r\n */;(function(){"use strict";var root=this,_jp=root.jsPlumb,_ju=root.jsPlumbUtil;// create the drag handler for a connection\nvar _makeConnectionDragHandler=function _makeConnectionDragHandler(endpoint,placeholder,_jsPlumb){var stopped=false;return{drag:function drag(){if(stopped){stopped=false;return true;}if(placeholder.element){var _ui=_jsPlumb.getUIPosition(arguments,_jsPlumb.getZoom());if(_ui!=null){_jsPlumb.setPosition(placeholder.element,_ui);}_jsPlumb.repaint(placeholder.element,_ui);// always repaint the source endpoint, because only continuous/dynamic anchors cause the endpoint\n// to be repainted, so static anchors need to be told (or the endpoint gets dragged around)\nendpoint.paint({anchorPoint:endpoint.anchor.getCurrentLocation({element:endpoint})});}},stopDrag:function stopDrag(){stopped=true;}};};// creates a placeholder div for dragging purposes, adds it, and pre-computes its offset.\nvar _makeDraggablePlaceholder=function _makeDraggablePlaceholder(placeholder,_jsPlumb,ipco,ips){var n=_jsPlumb.createElement("div",{position:"absolute"});_jsPlumb.appendElement(n);var id=_jsPlumb.getId(n);_jsPlumb.setPosition(n,ipco);n.style.width=ips[0]+"px";n.style.height=ips[1]+"px";_jsPlumb.manage(id,n,true);// TRANSIENT MANAGE\n// create and assign an id, and initialize the offset.\nplaceholder.id=id;placeholder.element=n;};// create a floating endpoint (for drag connections)\nvar _makeFloatingEndpoint=function _makeFloatingEndpoint(paintStyle,referenceAnchor,endpoint,referenceCanvas,sourceElement,_jsPlumb,_newEndpoint,scope){var floatingAnchor=new _jp.FloatingAnchor({reference:referenceAnchor,referenceCanvas:referenceCanvas,jsPlumbInstance:_jsPlumb});//setting the scope here should not be the way to fix that mootools issue.  it should be fixed by not\n// adding the floating endpoint as a droppable.  that makes more sense anyway!\n// TRANSIENT MANAGE\nreturn _newEndpoint({paintStyle:paintStyle,endpoint:endpoint,anchor:floatingAnchor,source:sourceElement,scope:scope});};var typeParameters=["connectorStyle","connectorHoverStyle","connectorOverlays","connector","connectionType","connectorClass","connectorHoverClass"];// a helper function that tries to find a connection to the given element, and returns it if so. if elementWithPrecedence is null,\n// or no connection to it is found, we return the first connection in our list.\nvar findConnectionToUseForDynamicAnchor=function findConnectionToUseForDynamicAnchor(ep,elementWithPrecedence){var idx=0;if(elementWithPrecedence!=null){for(var i=0;i<ep.connections.length;i++){if(ep.connections[i].sourceId===elementWithPrecedence||ep.connections[i].targetId===elementWithPrecedence){idx=i;break;}}}return ep.connections[idx];};_jp.Endpoint=function(params){var _jsPlumb=params._jsPlumb,_newConnection=params.newConnection,_newEndpoint=params.newEndpoint;this.idPrefix="_jsplumb_e_";this.defaultLabelLocation=[0.5,0.5];this.defaultOverlayKeys=["Overlays","EndpointOverlays"];_jp.OverlayCapableJsPlumbUIComponent.apply(this,arguments);// TYPE\nthis.appendToDefaultType({connectionType:params.connectionType,maxConnections:params.maxConnections==null?this._jsPlumb.instance.Defaults.MaxConnections:params.maxConnections,// maximum number of connections this endpoint can be the source of.,\npaintStyle:params.endpointStyle||params.paintStyle||params.style||this._jsPlumb.instance.Defaults.EndpointStyle||_jp.Defaults.EndpointStyle,hoverPaintStyle:params.endpointHoverStyle||params.hoverPaintStyle||this._jsPlumb.instance.Defaults.EndpointHoverStyle||_jp.Defaults.EndpointHoverStyle,connectorStyle:params.connectorStyle,connectorHoverStyle:params.connectorHoverStyle,connectorClass:params.connectorClass,connectorHoverClass:params.connectorHoverClass,connectorOverlays:params.connectorOverlays,connector:params.connector,connectorTooltip:params.connectorTooltip});// END TYPE\nthis._jsPlumb.enabled=!(params.enabled===false);this._jsPlumb.visible=true;this.element=_jp.getElement(params.source);this._jsPlumb.uuid=params.uuid;this._jsPlumb.floatingEndpoint=null;var inPlaceCopy=null;if(this._jsPlumb.uuid){params.endpointsByUUID[this._jsPlumb.uuid]=this;}this.elementId=params.elementId;this.dragProxy=params.dragProxy;this._jsPlumb.connectionCost=params.connectionCost;this._jsPlumb.connectionsDirected=params.connectionsDirected;this._jsPlumb.currentAnchorClass="";this._jsPlumb.events={};var deleteOnEmpty=params.deleteOnEmpty===true;this.setDeleteOnEmpty=function(d){deleteOnEmpty=d;};var _updateAnchorClass=function(){// stash old, get new\nvar oldAnchorClass=_jsPlumb.endpointAnchorClassPrefix+"-"+this._jsPlumb.currentAnchorClass;this._jsPlumb.currentAnchorClass=this.anchor.getCssClass();var anchorClass=_jsPlumb.endpointAnchorClassPrefix+(this._jsPlumb.currentAnchorClass?"-"+this._jsPlumb.currentAnchorClass:"");this.removeClass(oldAnchorClass);this.addClass(anchorClass);// add and remove at the same time to reduce the number of reflows.\n_jp.updateClasses(this.element,anchorClass,oldAnchorClass);}.bind(this);this.prepareAnchor=function(anchorParams){var a=this._jsPlumb.instance.makeAnchor(anchorParams,this.elementId,_jsPlumb);a.bind("anchorChanged",function(currentAnchor){this.fire("anchorChanged",{endpoint:this,anchor:currentAnchor});_updateAnchorClass();}.bind(this));return a;};this.setPreparedAnchor=function(anchor,doNotRepaint){this._jsPlumb.instance.continuousAnchorFactory.clear(this.elementId);this.anchor=anchor;_updateAnchorClass();if(!doNotRepaint){this._jsPlumb.instance.repaint(this.elementId);}return this;};this.setAnchor=function(anchorParams,doNotRepaint){var a=this.prepareAnchor(anchorParams);this.setPreparedAnchor(a,doNotRepaint);return this;};var internalHover=function(state){if(this.connections.length>0){for(var i=0;i<this.connections.length;i++){this.connections[i].setHover(state,false);}}else{this.setHover(state);}}.bind(this);this.bind("mouseover",function(){internalHover(true);});this.bind("mouseout",function(){internalHover(false);});// ANCHOR MANAGER\nif(!params._transient){// in place copies, for example, are transient.  they will never need to be retrieved during a paint cycle, because they dont move, and then they are deleted.\nthis._jsPlumb.instance.anchorManager.add(this,this.elementId);}this.prepareEndpoint=function(ep,typeId){var _e=function _e(t,p){var rm=_jsPlumb.getRenderMode();if(_jp.Endpoints[rm][t]){return new _jp.Endpoints[rm][t](p);}if(!_jsPlumb.Defaults.DoNotThrowErrors){throw{msg:"jsPlumb: unknown endpoint type \'"+t+"\'"};}};var endpointArgs={_jsPlumb:this._jsPlumb.instance,cssClass:params.cssClass,container:params.container,tooltip:params.tooltip,connectorTooltip:params.connectorTooltip,endpoint:this};var endpoint;if(_ju.isString(ep)){endpoint=_e(ep,endpointArgs);}else if(_ju.isArray(ep)){endpointArgs=_ju.merge(ep[1],endpointArgs);endpoint=_e(ep[0],endpointArgs);}else{endpoint=ep.clone();}// assign a clone function using a copy of endpointArgs. this is used when a drag starts: the endpoint that was dragged is cloned,\n// and the clone is left in its place while the original one goes off on a magical journey.\n// the copy is to get around a closure problem, in which endpointArgs ends up getting shared by\n// the whole world.\n//var argsForClone = jsPlumb.extend({}, endpointArgs);\nendpoint.clone=function(){// TODO this, and the code above, can be refactored to be more dry.\nif(_ju.isString(ep)){return _e(ep,endpointArgs);}else if(_ju.isArray(ep)){endpointArgs=_ju.merge(ep[1],endpointArgs);return _e(ep[0],endpointArgs);}}.bind(this);endpoint.typeId=typeId;return endpoint;};this.setEndpoint=function(ep,doNotRepaint){var _ep=this.prepareEndpoint(ep);this.setPreparedEndpoint(_ep,true);};this.setPreparedEndpoint=function(ep,doNotRepaint){if(this.endpoint!=null){this.endpoint.cleanup();this.endpoint.destroy();}this.endpoint=ep;this.type=this.endpoint.type;this.canvas=this.endpoint.canvas;};_jp.extend(this,params,typeParameters);this.isSource=params.isSource||false;this.isTemporarySource=params.isTemporarySource||false;this.isTarget=params.isTarget||false;this.connections=params.connections||[];this.connectorPointerEvents=params["connector-pointer-events"];this.scope=params.scope||_jsPlumb.getDefaultScope();this.timestamp=null;this.reattachConnections=params.reattach||_jsPlumb.Defaults.ReattachConnections;this.connectionsDetachable=_jsPlumb.Defaults.ConnectionsDetachable;if(params.connectionsDetachable===false||params.detachable===false){this.connectionsDetachable=false;}this.dragAllowedWhenFull=params.dragAllowedWhenFull!==false;if(params.onMaxConnections){this.bind("maxConnections",params.onMaxConnections);}//\n// add a connection. not part of public API.\n//\nthis.addConnection=function(connection){this.connections.push(connection);this[(this.connections.length>0?"add":"remove")+"Class"](_jsPlumb.endpointConnectedClass);this[(this.isFull()?"add":"remove")+"Class"](_jsPlumb.endpointFullClass);};this.detachFromConnection=function(connection,idx,doNotCleanup){idx=idx==null?this.connections.indexOf(connection):idx;if(idx>=0){this.connections.splice(idx,1);this[(this.connections.length>0?"add":"remove")+"Class"](_jsPlumb.endpointConnectedClass);this[(this.isFull()?"add":"remove")+"Class"](_jsPlumb.endpointFullClass);}if(!doNotCleanup&&deleteOnEmpty&&this.connections.length===0){_jsPlumb.deleteObject({endpoint:this,fireEvent:false,deleteAttachedObjects:doNotCleanup!==true});}};this.deleteEveryConnection=function(params){var c=this.connections.length;for(var i=0;i<c;i++){_jsPlumb.deleteConnection(this.connections[0],params);}};this.detachFrom=function(targetEndpoint,fireEvent,originalEvent){var c=[];for(var i=0;i<this.connections.length;i++){if(this.connections[i].endpoints[1]===targetEndpoint||this.connections[i].endpoints[0]===targetEndpoint){c.push(this.connections[i]);}}for(var j=0,count=c.length;j<count;j++){_jsPlumb.deleteConnection(c[0]);}return this;};this.getElement=function(){return this.element;};this.setElement=function(el){var parentId=this._jsPlumb.instance.getId(el),curId=this.elementId;// remove the endpoint from the list for the current endpoint\'s element\n_ju.removeWithFunction(params.endpointsByElement[this.elementId],function(e){return e.id===this.id;}.bind(this));this.element=_jp.getElement(el);this.elementId=_jsPlumb.getId(this.element);_jsPlumb.anchorManager.rehomeEndpoint(this,curId,this.element);_jsPlumb.dragManager.endpointAdded(this.element);_ju.addToList(params.endpointsByElement,parentId,this);return this;};/**\r\n         * private but must be exposed.\r\n         */this.makeInPlaceCopy=function(){var loc=this.anchor.getCurrentLocation({element:this}),o=this.anchor.getOrientation(this),acc=this.anchor.getCssClass(),inPlaceAnchor={bind:function bind(){},compute:function compute(){return[loc[0],loc[1]];},getCurrentLocation:function getCurrentLocation(){return[loc[0],loc[1]];},getOrientation:function getOrientation(){return o;},getCssClass:function getCssClass(){return acc;}};return _newEndpoint({dropOptions:params.dropOptions,anchor:inPlaceAnchor,source:this.element,paintStyle:this.getPaintStyle(),endpoint:params.hideOnDrag?"Blank":this.endpoint,_transient:true,scope:this.scope,reference:this});};/**\r\n         * returns a connection from the pool; used when dragging starts.  just gets the head of the array if it can.\r\n         */this.connectorSelector=function(){return this.connections[0];};this.setStyle=this.setPaintStyle;this.paint=function(params){params=params||{};var timestamp=params.timestamp,recalc=!(params.recalc===false);if(!timestamp||this.timestamp!==timestamp){var info=_jsPlumb.updateOffset({elId:this.elementId,timestamp:timestamp});var xy=params.offset?params.offset.o:info.o;if(xy!=null){var ap=params.anchorPoint,connectorPaintStyle=params.connectorPaintStyle;if(ap==null){var wh=params.dimensions||info.s,anchorParams={xy:[xy.left,xy.top],wh:wh,element:this,timestamp:timestamp};if(recalc&&this.anchor.isDynamic&&this.connections.length>0){var c=findConnectionToUseForDynamicAnchor(this,params.elementWithPrecedence),oIdx=c.endpoints[0]===this?1:0,oId=oIdx===0?c.sourceId:c.targetId,oInfo=_jsPlumb.getCachedData(oId),oOffset=oInfo.o,oWH=oInfo.s;anchorParams.index=oIdx===0?1:0;anchorParams.connection=c;anchorParams.txy=[oOffset.left,oOffset.top];anchorParams.twh=oWH;anchorParams.tElement=c.endpoints[oIdx];}else if(this.connections.length>0){anchorParams.connection=this.connections[0];}ap=this.anchor.compute(anchorParams);}this.endpoint.compute(ap,this.anchor.getOrientation(this),this._jsPlumb.paintStyleInUse,connectorPaintStyle||this.paintStyleInUse);this.endpoint.paint(this._jsPlumb.paintStyleInUse,this.anchor);this.timestamp=timestamp;// paint overlays\nfor(var i in this._jsPlumb.overlays){if(this._jsPlumb.overlays.hasOwnProperty(i)){var o=this._jsPlumb.overlays[i];if(o.isVisible()){this._jsPlumb.overlayPlacements[i]=o.draw(this.endpoint,this._jsPlumb.paintStyleInUse);o.paint(this._jsPlumb.overlayPlacements[i]);}}}}}};this.getTypeDescriptor=function(){return"endpoint";};this.isVisible=function(){return this._jsPlumb.visible;};this.repaint=this.paint;var draggingInitialised=false;this.initDraggable=function(){// is this a connection source? we make it draggable and have the\n// drag listener maintain a connection with a floating endpoint.\nif(!draggingInitialised&&_jp.isDragSupported(this.element)){var placeholderInfo={id:null,element:null},jpc=null,existingJpc=false,existingJpcParams=null,_dragHandler=_makeConnectionDragHandler(this,placeholderInfo,_jsPlumb),dragOptions=params.dragOptions||{},defaultOpts={},startEvent=_jp.dragEvents.start,stopEvent=_jp.dragEvents.stop,dragEvent=_jp.dragEvents.drag,beforeStartEvent=_jp.dragEvents.beforeStart,payload;// respond to beforeStart from katavorio; this will have, optionally, a payload of attribute values\n// that were placed there by the makeSource mousedown listener.\nvar beforeStart=function beforeStart(beforeStartParams){payload=beforeStartParams.e.payload||{};};var start=function(startParams){// -------------   first, get a connection to drag. this may be null, in which case we are dragging a new one.\njpc=this.connectorSelector();// -------------------------------- now a bunch of tests about whether or not to proceed -------------------------\nvar _continue=true;// if not enabled, return\nif(!this.isEnabled()){_continue=false;}// if no connection and we\'re not a source - or temporarily a source, as is the case with makeSource - return.\nif(jpc==null&&!this.isSource&&!this.isTemporarySource){_continue=false;}// otherwise if we\'re full and not allowed to drag, also return false.\nif(this.isSource&&this.isFull()&&!(jpc!=null&&this.dragAllowedWhenFull)){_continue=false;}// if the connection was setup as not detachable or one of its endpoints\n// was setup as connectionsDetachable = false, or Defaults.ConnectionsDetachable\n// is set to false...\nif(jpc!=null&&!jpc.isDetachable(this)){_continue=false;}var beforeDrag=_jsPlumb.checkCondition(jpc==null?"beforeDrag":"beforeStartDetach",{endpoint:this,source:this.element,sourceId:this.elementId,connection:jpc});if(beforeDrag===false){_continue=false;}// else we might have been given some data. we\'ll pass it in to a new connection as \'data\'.\n// here we also merge in the optional payload we were given on mousedown.\nelse if((typeof beforeDrag==="undefined"?"undefined":_typeof(beforeDrag))==="object"){_jp.extend(beforeDrag,payload||{});}else{// or if no beforeDrag data, maybe use the payload on its own.\nbeforeDrag=payload||{};}if(_continue===false){// this is for mootools and yui. returning false from this causes jquery to stop drag.\n// the events are wrapped in both mootools and yui anyway, but i don\'t think returning\n// false from the start callback would stop a drag.\nif(_jsPlumb.stopDrag){_jsPlumb.stopDrag(this.canvas);}_dragHandler.stopDrag();return false;}// ---------------------------------------------------------------------------------------------------------------------\n// ok to proceed.\n// clear hover for all connections for this endpoint before continuing.\nfor(var i=0;i<this.connections.length;i++){this.connections[i].setHover(false);}this.addClass("endpointDrag");_jsPlumb.setConnectionBeingDragged(true);// if we\'re not full but there was a connection, make it null. we\'ll create a new one.\nif(jpc&&!this.isFull()&&this.isSource){jpc=null;}_jsPlumb.updateOffset({elId:this.elementId});// ----------------    make the element we will drag around, and position it -----------------------------\nvar ipco=this._jsPlumb.instance.getOffset(this.canvas),canvasElement=this.canvas,ips=this._jsPlumb.instance.getSize(this.canvas);_makeDraggablePlaceholder(placeholderInfo,_jsPlumb,ipco,ips);// store the id of the dragging div and the source element. the drop function will pick these up.                   \n_jsPlumb.setAttributes(this.canvas,{"dragId":placeholderInfo.id,"elId":this.elementId});// ------------------- create an endpoint that will be our floating endpoint ------------------------------------\nvar endpointToFloat=this.dragProxy||this.endpoint;if(this.dragProxy==null&&this.connectionType!=null){var aae=this._jsPlumb.instance.deriveEndpointAndAnchorSpec(this.connectionType);if(aae.endpoints[1]){endpointToFloat=aae.endpoints[1];}}var centerAnchor=this._jsPlumb.instance.makeAnchor("Center");centerAnchor.isFloating=true;this._jsPlumb.floatingEndpoint=_makeFloatingEndpoint(this.getPaintStyle(),centerAnchor,endpointToFloat,this.canvas,placeholderInfo.element,_jsPlumb,_newEndpoint,this.scope);var _savedAnchor=this._jsPlumb.floatingEndpoint.anchor;if(jpc==null){this.setHover(false,false);// create a connection. one end is this endpoint, the other is a floating endpoint.                    \njpc=_newConnection({sourceEndpoint:this,targetEndpoint:this._jsPlumb.floatingEndpoint,source:this.element,// for makeSource with parent option.  ensure source element is represented correctly.\ntarget:placeholderInfo.element,anchors:[this.anchor,this._jsPlumb.floatingEndpoint.anchor],paintStyle:params.connectorStyle,// this can be null. Connection will use the default.\nhoverPaintStyle:params.connectorHoverStyle,connector:params.connector,// this can also be null. Connection will use the default.\noverlays:params.connectorOverlays,type:this.connectionType,cssClass:this.connectorClass,hoverClass:this.connectorHoverClass,scope:params.scope,data:beforeDrag});jpc.pending=true;jpc.addClass(_jsPlumb.draggingClass);this._jsPlumb.floatingEndpoint.addClass(_jsPlumb.draggingClass);this._jsPlumb.floatingEndpoint.anchor=_savedAnchor;// fire an event that informs that a connection is being dragged\n_jsPlumb.fire("connectionDrag",jpc);// register the new connection on the drag manager. This connection, at this point, is \'pending\',\n// and has as its target a temporary element (the \'placeholder\'). If the connection subsequently\n// becomes established, the anchor manager is informed that the target of the connection has\n// changed.\n_jsPlumb.anchorManager.newConnection(jpc);}else{existingJpc=true;jpc.setHover(false);// new anchor idx\nvar anchorIdx=jpc.endpoints[0].id===this.id?0:1;this.detachFromConnection(jpc,null,true);// detach from the connection while dragging is occurring. but dont cleanup automatically.\n// store the original scope (issue 57)\nvar dragScope=_jsPlumb.getDragScope(canvasElement);_jsPlumb.setAttribute(this.canvas,"originalScope",dragScope);// fire an event that informs that a connection is being dragged. we do this before\n// replacing the original target with the floating element info.\n_jsPlumb.fire("connectionDrag",jpc);// now we replace ourselves with the temporary div we created above:\nif(anchorIdx===0){existingJpcParams=[jpc.source,jpc.sourceId,canvasElement,dragScope];_jsPlumb.anchorManager.sourceChanged(jpc.endpoints[anchorIdx].elementId,placeholderInfo.id,jpc,placeholderInfo.element);}else{existingJpcParams=[jpc.target,jpc.targetId,canvasElement,dragScope];jpc.target=placeholderInfo.element;jpc.targetId=placeholderInfo.id;_jsPlumb.anchorManager.updateOtherEndpoint(jpc.sourceId,jpc.endpoints[anchorIdx].elementId,jpc.targetId,jpc);}// store the original endpoint and assign the new floating endpoint for the drag.\njpc.suspendedEndpoint=jpc.endpoints[anchorIdx];// PROVIDE THE SUSPENDED ELEMENT, BE IT A SOURCE OR TARGET (ISSUE 39)\njpc.suspendedElement=jpc.endpoints[anchorIdx].getElement();jpc.suspendedElementId=jpc.endpoints[anchorIdx].elementId;jpc.suspendedElementType=anchorIdx===0?"source":"target";jpc.suspendedEndpoint.setHover(false);this._jsPlumb.floatingEndpoint.referenceEndpoint=jpc.suspendedEndpoint;jpc.endpoints[anchorIdx]=this._jsPlumb.floatingEndpoint;jpc.addClass(_jsPlumb.draggingClass);this._jsPlumb.floatingEndpoint.addClass(_jsPlumb.draggingClass);}_jsPlumb.registerFloatingConnection(placeholderInfo,jpc,this._jsPlumb.floatingEndpoint);// // register it and register connection on it.\n// _jsPlumb.floatingConnections[placeholderInfo.id] = jpc;\n//\n// // only register for the target endpoint; we will not be dragging the source at any time\n// // before this connection is either discarded or made into a permanent connection.\n// _ju.addToList(params.endpointsByElement, placeholderInfo.id, this._jsPlumb.floatingEndpoint);\n// tell jsplumb about it\n_jsPlumb.currentlyDragging=true;}.bind(this);var stop=function(){_jsPlumb.setConnectionBeingDragged(false);if(jpc&&jpc.endpoints!=null){// get the actual drop event (decode from library args to stop function)\nvar originalEvent=_jsPlumb.getDropEvent(arguments);// unlock the other endpoint (if it is dynamic, it would have been locked at drag start)\nvar idx=_jsPlumb.getFloatingAnchorIndex(jpc);jpc.endpoints[idx===0?1:0].anchor.locked=false;// TODO: Dont want to know about css classes inside jsplumb, ideally.\njpc.removeClass(_jsPlumb.draggingClass);// if we have the floating endpoint then the connection has not been dropped\n// on another endpoint.  If it is a new connection we throw it away. If it is an\n// existing connection we check to see if we should reattach it, throwing it away\n// if not.\nif(this._jsPlumb&&(jpc.deleteConnectionNow||jpc.endpoints[idx]===this._jsPlumb.floatingEndpoint)){// 6a. if the connection was an existing one...\nif(existingJpc&&jpc.suspendedEndpoint){// fix for issue35, thanks Sylvain Gizard: when firing the detach event make sure the\n// floating endpoint has been replaced.\nif(idx===0){jpc.floatingElement=jpc.source;jpc.floatingId=jpc.sourceId;jpc.floatingEndpoint=jpc.endpoints[0];jpc.floatingIndex=0;jpc.source=existingJpcParams[0];jpc.sourceId=existingJpcParams[1];}else{// keep a copy of the floating element; the anchor manager will want to clean up.\njpc.floatingElement=jpc.target;jpc.floatingId=jpc.targetId;jpc.floatingEndpoint=jpc.endpoints[1];jpc.floatingIndex=1;jpc.target=existingJpcParams[0];jpc.targetId=existingJpcParams[1];}var fe=this._jsPlumb.floatingEndpoint;// store for later removal.\n// restore the original scope (issue 57)\n_jsPlumb.setDragScope(existingJpcParams[2],existingJpcParams[3]);jpc.endpoints[idx]=jpc.suspendedEndpoint;// if the connection should be reattached, or the other endpoint refuses detach, then\n// reset the connection to its original state\nif(jpc.isReattach()||jpc._forceReattach||jpc._forceDetach||!_jsPlumb.deleteConnection(jpc,{originalEvent:originalEvent})){jpc.setHover(false);jpc._forceDetach=null;jpc._forceReattach=null;this._jsPlumb.floatingEndpoint.detachFromConnection(jpc);jpc.suspendedEndpoint.addConnection(jpc);// TODO this code is duplicated in lots of places...and there is nothing external\n// in the code; it all refers to the connection itself. we could add a\n// `checkSanity(connection)` method to anchorManager that did this.\nif(idx===1){_jsPlumb.anchorManager.updateOtherEndpoint(jpc.sourceId,jpc.floatingId,jpc.targetId,jpc);}else{_jsPlumb.anchorManager.sourceChanged(jpc.floatingId,jpc.sourceId,jpc,jpc.source);}_jsPlumb.repaint(existingJpcParams[1]);}else{_jsPlumb.deleteObject({endpoint:fe});}}}// makeTargets sets this flag, to tell us we have been replaced and should delete this object.\nif(this.deleteAfterDragStop){_jsPlumb.deleteObject({endpoint:this});}else{if(this._jsPlumb){this.paint({recalc:false});}}// although the connection is no longer valid, there are use cases where this is useful.\n_jsPlumb.fire("connectionDragStop",jpc,originalEvent);// fire this event to give people more fine-grained control (connectionDragStop fires a lot)\nif(jpc.pending){_jsPlumb.fire("connectionAborted",jpc,originalEvent);}// tell jsplumb that dragging is finished.\n_jsPlumb.currentlyDragging=false;jpc.suspendedElement=null;jpc.suspendedEndpoint=null;jpc=null;}// if no endpoints, jpc already cleaned up. but still we want to ensure we\'re reset properly.\n// remove the element associated with the floating endpoint\n// (and its associated floating endpoint and visual artefacts)\nif(placeholderInfo&&placeholderInfo.element){_jsPlumb.remove(placeholderInfo.element,false,false);}// remove the inplace copy\nif(inPlaceCopy){_jsPlumb.deleteObject({endpoint:inPlaceCopy});}if(this._jsPlumb){// make our canvas visible (TODO: hand off to library; we should not know about DOM)\nthis.canvas.style.visibility="visible";// unlock our anchor\nthis.anchor.locked=false;// clear floating anchor.\nthis._jsPlumb.floatingEndpoint=null;}}.bind(this);dragOptions=_jp.extend(defaultOpts,dragOptions);dragOptions.scope=this.scope||dragOptions.scope;dragOptions[beforeStartEvent]=_ju.wrap(dragOptions[beforeStartEvent],beforeStart,false);dragOptions[startEvent]=_ju.wrap(dragOptions[startEvent],start,false);// extracted drag handler function so can be used by makeSource\ndragOptions[dragEvent]=_ju.wrap(dragOptions[dragEvent],_dragHandler.drag);dragOptions[stopEvent]=_ju.wrap(dragOptions[stopEvent],stop);dragOptions.multipleDrop=false;dragOptions.canDrag=function(){return this.isSource||this.isTemporarySource||/*(this.isTarget && */this.connections.length>0/*)*/;}.bind(this);_jsPlumb.initDraggable(this.canvas,dragOptions,"internal");this.canvas._jsPlumbRelatedElement=this.element;draggingInitialised=true;}};var ep=params.endpoint||this._jsPlumb.instance.Defaults.Endpoint||_jp.Defaults.Endpoint;this.setEndpoint(ep,true);var anchorParamsToUse=params.anchor?params.anchor:params.anchors?params.anchors:_jsPlumb.Defaults.Anchor||"Top";this.setAnchor(anchorParamsToUse,true);// finally, set type if it was provided\nvar type=["default",params.type||""].join(" ");this.addType(type,params.data,true);this.canvas=this.endpoint.canvas;this.canvas._jsPlumb=this;this.initDraggable();// pulled this out into a function so we can reuse it for the inPlaceCopy canvas; you can now drop detached connections\n// back onto the endpoint you detached it from.\nvar _initDropTarget=function(canvas,isTransient,endpoint,referenceEndpoint){if(_jp.isDropSupported(this.element)){var dropOptions=params.dropOptions||_jsPlumb.Defaults.DropOptions||_jp.Defaults.DropOptions;dropOptions=_jp.extend({},dropOptions);dropOptions.scope=dropOptions.scope||this.scope;var dropEvent=_jp.dragEvents.drop,overEvent=_jp.dragEvents.over,outEvent=_jp.dragEvents.out,_ep=this,drop=_jsPlumb.EndpointDropHandler({getEndpoint:function getEndpoint(){return _ep;},jsPlumb:_jsPlumb,enabled:function enabled(){return endpoint!=null?endpoint.isEnabled():true;},isFull:function isFull(){return endpoint.isFull();},element:this.element,elementId:this.elementId,isSource:this.isSource,isTarget:this.isTarget,addClass:function addClass(clazz){_ep.addClass(clazz);},removeClass:function removeClass(clazz){_ep.removeClass(clazz);},isDropAllowed:function isDropAllowed(){return _ep.isDropAllowed.apply(_ep,arguments);},reference:referenceEndpoint,isRedrop:function isRedrop(jpc,dhParams){return jpc.suspendedEndpoint&&dhParams.reference&&jpc.suspendedEndpoint.id===dhParams.reference.id;}});dropOptions[dropEvent]=_ju.wrap(dropOptions[dropEvent],drop,true);dropOptions[overEvent]=_ju.wrap(dropOptions[overEvent],function(){var draggable=_jp.getDragObject(arguments),id=_jsPlumb.getAttribute(_jp.getElement(draggable),"dragId"),_jpc=_jsPlumb.getFloatingConnectionFor(id);//_jsPlumb.floatingConnections[id];\nif(_jpc!=null){var idx=_jsPlumb.getFloatingAnchorIndex(_jpc);// here we should fire the \'over\' event if we are a target and this is a new connection,\n// or we are the same as the floating endpoint.\nvar _cont=this.isTarget&&idx!==0||_jpc.suspendedEndpoint&&this.referenceEndpoint&&this.referenceEndpoint.id===_jpc.suspendedEndpoint.id;if(_cont){var bb=_jsPlumb.checkCondition("checkDropAllowed",{sourceEndpoint:_jpc.endpoints[idx],targetEndpoint:this,connection:_jpc});this[(bb?"add":"remove")+"Class"](_jsPlumb.endpointDropAllowedClass);this[(bb?"remove":"add")+"Class"](_jsPlumb.endpointDropForbiddenClass);_jpc.endpoints[idx].anchor.over(this.anchor,this);}}}.bind(this));dropOptions[outEvent]=_ju.wrap(dropOptions[outEvent],function(){var draggable=_jp.getDragObject(arguments),id=draggable==null?null:_jsPlumb.getAttribute(_jp.getElement(draggable),"dragId"),_jpc=id?_jsPlumb.getFloatingConnectionFor(id):null;if(_jpc!=null){var idx=_jsPlumb.getFloatingAnchorIndex(_jpc);var _cont=this.isTarget&&idx!==0||_jpc.suspendedEndpoint&&this.referenceEndpoint&&this.referenceEndpoint.id===_jpc.suspendedEndpoint.id;if(_cont){this.removeClass(_jsPlumb.endpointDropAllowedClass);this.removeClass(_jsPlumb.endpointDropForbiddenClass);_jpc.endpoints[idx].anchor.out();}}}.bind(this));_jsPlumb.initDroppable(canvas,dropOptions,"internal",isTransient);}}.bind(this);// Initialise the endpoint\'s canvas as a drop target. The drop handler will take care of the logic of whether\n// something can actually be dropped.\nif(!this.anchor.isFloating){_initDropTarget(this.canvas,!(params._transient||this.anchor.isFloating),this,params.reference);}return this;};_ju.extend(_jp.Endpoint,_jp.OverlayCapableJsPlumbUIComponent,{setVisible:function setVisible(v,doNotChangeConnections,doNotNotifyOtherEndpoint){this._jsPlumb.visible=v;if(this.canvas){this.canvas.style.display=v?"block":"none";}this[v?"showOverlays":"hideOverlays"]();if(!doNotChangeConnections){for(var i=0;i<this.connections.length;i++){this.connections[i].setVisible(v);if(!doNotNotifyOtherEndpoint){var oIdx=this===this.connections[i].endpoints[0]?1:0;// only change the other endpoint if this is its only connection.\nif(this.connections[i].endpoints[oIdx].connections.length===1){this.connections[i].endpoints[oIdx].setVisible(v,true,true);}}}}},getAttachedElements:function getAttachedElements(){return this.connections;},applyType:function applyType(t,doNotRepaint){this.setPaintStyle(t.endpointStyle||t.paintStyle,doNotRepaint);this.setHoverPaintStyle(t.endpointHoverStyle||t.hoverPaintStyle,doNotRepaint);if(t.maxConnections!=null){this._jsPlumb.maxConnections=t.maxConnections;}if(t.scope){this.scope=t.scope;}_jp.extend(this,t,typeParameters);if(t.cssClass!=null&&this.canvas){this._jsPlumb.instance.addClass(this.canvas,t.cssClass);}_jp.OverlayCapableJsPlumbUIComponent.applyType(this,t);},isEnabled:function isEnabled(){return this._jsPlumb.enabled;},setEnabled:function setEnabled(e){this._jsPlumb.enabled=e;},cleanup:function cleanup(){var anchorClass=this._jsPlumb.instance.endpointAnchorClassPrefix+(this._jsPlumb.currentAnchorClass?"-"+this._jsPlumb.currentAnchorClass:"");_jp.removeClass(this.element,anchorClass);this.anchor=null;this.endpoint.cleanup(true);this.endpoint.destroy();this.endpoint=null;// drag/drop\nthis._jsPlumb.instance.destroyDraggable(this.canvas,"internal");this._jsPlumb.instance.destroyDroppable(this.canvas,"internal");},setHover:function setHover(h){if(this.endpoint&&this._jsPlumb&&!this._jsPlumb.instance.isConnectionBeingDragged()){this.endpoint.setHover(h);}},isFull:function isFull(){return this._jsPlumb.maxConnections===0?true:!(this.isFloating()||this._jsPlumb.maxConnections<0||this.connections.length<this._jsPlumb.maxConnections);},/**\r\n         * private but needs to be exposed.\r\n         */isFloating:function isFloating(){return this.anchor!=null&&this.anchor.isFloating;},isConnectedTo:function isConnectedTo(endpoint){var found=false;if(endpoint){for(var i=0;i<this.connections.length;i++){if(this.connections[i].endpoints[1]===endpoint||this.connections[i].endpoints[0]===endpoint){found=true;break;}}}return found;},getConnectionCost:function getConnectionCost(){return this._jsPlumb.connectionCost;},setConnectionCost:function setConnectionCost(c){this._jsPlumb.connectionCost=c;},areConnectionsDirected:function areConnectionsDirected(){return this._jsPlumb.connectionsDirected;},setConnectionsDirected:function setConnectionsDirected(b){this._jsPlumb.connectionsDirected=b;},setElementId:function setElementId(_elId){this.elementId=_elId;this.anchor.elementId=_elId;},setReferenceElement:function setReferenceElement(_el){this.element=_jp.getElement(_el);},setDragAllowedWhenFull:function setDragAllowedWhenFull(allowed){this.dragAllowedWhenFull=allowed;},equals:function equals(endpoint){return this.anchor.equals(endpoint.anchor);},getUuid:function getUuid(){return this._jsPlumb.uuid;},computeAnchor:function computeAnchor(params){return this.anchor.compute(params);}});root.jsPlumbInstance.prototype.EndpointDropHandler=function(dhParams){return function(e){var _jsPlumb=dhParams.jsPlumb;// remove the classes that are added dynamically. drop is neither forbidden nor allowed now that\n// the drop is finishing.\ndhParams.removeClass(_jsPlumb.endpointDropAllowedClass);dhParams.removeClass(_jsPlumb.endpointDropForbiddenClass);var originalEvent=_jsPlumb.getDropEvent(arguments),draggable=_jsPlumb.getDragObject(arguments),id=_jsPlumb.getAttribute(draggable,"dragId"),elId=_jsPlumb.getAttribute(draggable,"elId"),scope=_jsPlumb.getAttribute(draggable,"originalScope"),jpc=_jsPlumb.getFloatingConnectionFor(id);// if no active connection, bail.\nif(jpc==null){return;}// calculate if this is an existing connection.\nvar existingConnection=jpc.suspendedEndpoint!=null;// if suspended endpoint exists but has been cleaned up, bail. This means it\'s an existing connection\n// that has been detached and will shortly be discarded.\nif(existingConnection&&jpc.suspendedEndpoint._jsPlumb==null){return;}// get the drop endpoint. for a normal connection this is just the one that would replace the currently\n// floating endpoint. for a makeTarget this is a new endpoint that is created on drop. But we leave that to\n// the handler to figure out.\nvar _ep=dhParams.getEndpoint(jpc);// If we\'re not given an endpoint to use, bail.\nif(_ep==null){return;}// if this is a drop back where the connection came from, mark it force reattach and\n// return; the stop handler will reattach. without firing an event.\nif(dhParams.isRedrop(jpc,dhParams)){jpc._forceReattach=true;jpc.setHover(false);if(dhParams.maybeCleanup){dhParams.maybeCleanup(_ep);}return;}// ensure we dont bother trying to drop sources on non-source eps, and same for target.\nvar idx=_jsPlumb.getFloatingAnchorIndex(jpc);if(idx===0&&!dhParams.isSource||idx===1&&!dhParams.isTarget){if(dhParams.maybeCleanup){dhParams.maybeCleanup(_ep);}return;}if(dhParams.onDrop){dhParams.onDrop(jpc);}// restore the original scope if necessary (issue 57)\nif(scope){_jsPlumb.setDragScope(draggable,scope);}// if the target of the drop is full, fire an event (we abort below)\n// makeTarget: keep.\nvar isFull=dhParams.isFull(e);if(isFull){_ep.fire("maxConnections",{endpoint:this,connection:jpc,maxConnections:_ep._jsPlumb.maxConnections},originalEvent);}//\n// if endpoint enabled, not full, and matches the index of the floating endpoint...\nif(!isFull&&dhParams.enabled()){var _doContinue=true;// before testing for beforeDrop, reset the connection\'s source/target to be the actual DOM elements\n// involved (that is, stash any temporary stuff used for dragging. but we need to keep it around in\n// order that the anchor manager can clean things up properly).\nif(idx===0){jpc.floatingElement=jpc.source;jpc.floatingId=jpc.sourceId;jpc.floatingEndpoint=jpc.endpoints[0];jpc.floatingIndex=0;jpc.source=dhParams.element;jpc.sourceId=dhParams.elementId;}else{jpc.floatingElement=jpc.target;jpc.floatingId=jpc.targetId;jpc.floatingEndpoint=jpc.endpoints[1];jpc.floatingIndex=1;jpc.target=dhParams.element;jpc.targetId=dhParams.elementId;}// if this is an existing connection and detach is not allowed we won\'t continue. The connection\'s\n// endpoints have been reinstated; everything is back to how it was.\nif(existingConnection&&jpc.suspendedEndpoint.id!==_ep.id){if(!jpc.isDetachAllowed(jpc)||!jpc.endpoints[idx].isDetachAllowed(jpc)||!jpc.suspendedEndpoint.isDetachAllowed(jpc)||!_jsPlumb.checkCondition("beforeDetach",jpc)){_doContinue=false;}}// ------------ wrap the execution path in a function so we can support asynchronous beforeDrop\nvar continueFunction=function(optionalData){// remove this jpc from the current endpoint, which is a floating endpoint that we will\n// subsequently discard.\njpc.endpoints[idx].detachFromConnection(jpc);// if there\'s a suspended endpoint, detach it from the connection.\nif(jpc.suspendedEndpoint){jpc.suspendedEndpoint.detachFromConnection(jpc);}jpc.endpoints[idx]=_ep;_ep.addConnection(jpc);// copy our parameters in to the connection:\nvar params=_ep.getParameters();for(var aParam in params){jpc.setParameter(aParam,params[aParam]);}if(!existingConnection){// if not an existing connection and\nif(params.draggable){_jsPlumb.initDraggable(this.element,dhParams.dragOptions,"internal",_jsPlumb);}}else{var suspendedElementId=jpc.suspendedEndpoint.elementId;_jsPlumb.fireMoveEvent({index:idx,originalSourceId:idx===0?suspendedElementId:jpc.sourceId,newSourceId:idx===0?_ep.elementId:jpc.sourceId,originalTargetId:idx===1?suspendedElementId:jpc.targetId,newTargetId:idx===1?_ep.elementId:jpc.targetId,originalSourceEndpoint:idx===0?jpc.suspendedEndpoint:jpc.endpoints[0],newSourceEndpoint:idx===0?_ep:jpc.endpoints[0],originalTargetEndpoint:idx===1?jpc.suspendedEndpoint:jpc.endpoints[1],newTargetEndpoint:idx===1?_ep:jpc.endpoints[1],connection:jpc},originalEvent);}if(idx===1){_jsPlumb.anchorManager.updateOtherEndpoint(jpc.sourceId,jpc.floatingId,jpc.targetId,jpc);}else{_jsPlumb.anchorManager.sourceChanged(jpc.floatingId,jpc.sourceId,jpc,jpc.source);}// when makeSource has uniqueEndpoint:true, we want to create connections with new endpoints\n// that are subsequently deleted. So makeSource sets `finalEndpoint`, which is the Endpoint to\n// which the connection should be attached. The `detachFromConnection` call below results in the\n// temporary endpoint being cleaned up.\nif(jpc.endpoints[0].finalEndpoint){var _toDelete=jpc.endpoints[0];_toDelete.detachFromConnection(jpc);jpc.endpoints[0]=jpc.endpoints[0].finalEndpoint;jpc.endpoints[0].addConnection(jpc);}// if optionalData was given, merge it onto the connection\'s data.\nif(_ju.isObject(optionalData)){jpc.mergeData(optionalData);}// finalise will inform the anchor manager and also add to\n// connectionsByScope if necessary.\n_jsPlumb.finaliseConnection(jpc,null,originalEvent,false);jpc.setHover(false);}.bind(this);var dontContinueFunction=function dontContinueFunction(){// otherwise just put it back on the endpoint it was on before the drag.\nif(jpc.suspendedEndpoint){jpc.endpoints[idx]=jpc.suspendedEndpoint;jpc.setHover(false);jpc._forceDetach=true;if(idx===0){jpc.source=jpc.suspendedEndpoint.element;jpc.sourceId=jpc.suspendedEndpoint.elementId;}else{jpc.target=jpc.suspendedEndpoint.element;jpc.targetId=jpc.suspendedEndpoint.elementId;}jpc.suspendedEndpoint.addConnection(jpc);// TODO checkSanity\nif(idx===1){_jsPlumb.anchorManager.updateOtherEndpoint(jpc.sourceId,jpc.floatingId,jpc.targetId,jpc);}else{_jsPlumb.anchorManager.sourceChanged(jpc.floatingId,jpc.sourceId,jpc,jpc.source);}_jsPlumb.repaint(jpc.sourceId);jpc._forceDetach=false;}};// --------------------------------------\n// now check beforeDrop.  this will be available only on Endpoints that are setup to\n// have a beforeDrop condition (although, secretly, under the hood all Endpoints and\n// the Connection have them, because they are on jsPlumbUIComponent.  shhh!), because\n// it only makes sense to have it on a target endpoint.\n_doContinue=_doContinue&&dhParams.isDropAllowed(jpc.sourceId,jpc.targetId,jpc.scope,jpc,_ep);// && jpc.pending;\nif(_doContinue){continueFunction(_doContinue);return true;}else{dontContinueFunction();}}if(dhParams.maybeCleanup){dhParams.maybeCleanup(_ep);}_jsPlumb.currentlyDragging=false;};};}).call(typeof window!==\'undefined\'?window:this);/*\r\n * This file contains the code for Connections.\r\n *\r\n * Copyright (c) 2010 - 2018 jsPlumb (hello@jsplumbtoolkit.com)\r\n *\r\n * https://jsplumbtoolkit.com\r\n * https://github.com/jsplumb/jsplumb\r\n *\r\n * Dual licensed under the MIT and GPL2 licenses.\r\n */;(function(){"use strict";var root=this,_jp=root.jsPlumb,_ju=root.jsPlumbUtil;var makeConnector=function makeConnector(_jsPlumb,renderMode,connectorName,connectorArgs,forComponent){if(!_jsPlumb.Defaults.DoNotThrowErrors&&_jp.Connectors[renderMode][connectorName]==null){throw{msg:"jsPlumb: unknown connector type \'"+connectorName+"\'"};}return new _jp.Connectors[renderMode][connectorName](connectorArgs,forComponent);},_makeAnchor=function _makeAnchor(anchorParams,elementId,_jsPlumb){return anchorParams?_jsPlumb.makeAnchor(anchorParams,elementId,_jsPlumb):null;},_updateConnectedClass=function _updateConnectedClass(conn,element,_jsPlumb,remove){if(element!=null){element._jsPlumbConnections=element._jsPlumbConnections||{};if(remove){delete element._jsPlumbConnections[conn.id];}else{element._jsPlumbConnections[conn.id]=true;}if(_ju.isEmpty(element._jsPlumbConnections)){_jsPlumb.removeClass(element,_jsPlumb.connectedClass);}else{_jsPlumb.addClass(element,_jsPlumb.connectedClass);}}};_jp.Connection=function(params){var _newEndpoint=params.newEndpoint;this.id=params.id;this.connector=null;this.idPrefix="_jsplumb_c_";this.defaultLabelLocation=0.5;this.defaultOverlayKeys=["Overlays","ConnectionOverlays"];// if a new connection is the result of moving some existing connection, params.previousConnection\n// will have that Connection in it. listeners for the jsPlumbConnection event can look for that\n// member and take action if they need to.\nthis.previousConnection=params.previousConnection;this.source=_jp.getElement(params.source);this.target=_jp.getElement(params.target);_jp.OverlayCapableJsPlumbUIComponent.apply(this,arguments);// sourceEndpoint and targetEndpoint override source/target, if they are present. but \n// source is not overridden if the Endpoint has declared it is not the final target of a connection;\n// instead we use the source that the Endpoint declares will be the final source element.\nif(params.sourceEndpoint){this.source=params.sourceEndpoint.getElement();this.sourceId=params.sourceEndpoint.elementId;}else{this.sourceId=this._jsPlumb.instance.getId(this.source);}if(params.targetEndpoint){this.target=params.targetEndpoint.getElement();this.targetId=params.targetEndpoint.elementId;}else{this.targetId=this._jsPlumb.instance.getId(this.target);}this.scope=params.scope;// scope may have been passed in to the connect call. if it wasn\'t, we will pull it from the source endpoint, after having initialised the endpoints.            \nthis.endpoints=[];this.endpointStyles=[];var _jsPlumb=this._jsPlumb.instance;_jsPlumb.manage(this.sourceId,this.source);_jsPlumb.manage(this.targetId,this.target);this._jsPlumb.visible=true;this._jsPlumb.params={cssClass:params.cssClass,container:params.container,"pointer-events":params["pointer-events"],editorParams:params.editorParams,overlays:params.overlays};this._jsPlumb.lastPaintedAt=null;// listen to mouseover and mouseout events passed from the container delegate.\nthis.bind("mouseover",function(){this.setHover(true);}.bind(this));this.bind("mouseout",function(){this.setHover(false);}.bind(this));// INITIALISATION CODE\nthis.makeEndpoint=function(isSource,el,elId,ep){elId=elId||this._jsPlumb.instance.getId(el);return this.prepareEndpoint(_jsPlumb,_newEndpoint,this,ep,isSource?0:1,params,el,elId);};// if type given, get the endpoint definitions mapping to that type from the jsplumb instance, and use those.\n// we apply types at the end of this constructor but endpoints are only honoured in a type definition at\n// create time.\nif(params.type){params.endpoints=params.endpoints||this._jsPlumb.instance.deriveEndpointAndAnchorSpec(params.type).endpoints;}var eS=this.makeEndpoint(true,this.source,this.sourceId,params.sourceEndpoint),eT=this.makeEndpoint(false,this.target,this.targetId,params.targetEndpoint);if(eS){_ju.addToList(params.endpointsByElement,this.sourceId,eS);}if(eT){_ju.addToList(params.endpointsByElement,this.targetId,eT);}// if scope not set, set it to be the scope for the source endpoint.\nif(!this.scope){this.scope=this.endpoints[0].scope;}// if explicitly told to (or not to) delete endpoints when empty, override endpoint\'s preferences\nif(params.deleteEndpointsOnEmpty!=null){this.endpoints[0].setDeleteOnEmpty(params.deleteEndpointsOnEmpty);this.endpoints[1].setDeleteOnEmpty(params.deleteEndpointsOnEmpty);}// -------------------------- DEFAULT TYPE ---------------------------------------------\n// DETACHABLE\nvar _detachable=_jsPlumb.Defaults.ConnectionsDetachable;if(params.detachable===false){_detachable=false;}if(this.endpoints[0].connectionsDetachable===false){_detachable=false;}if(this.endpoints[1].connectionsDetachable===false){_detachable=false;}// REATTACH\nvar _reattach=params.reattach||this.endpoints[0].reattachConnections||this.endpoints[1].reattachConnections||_jsPlumb.Defaults.ReattachConnections;this.appendToDefaultType({detachable:_detachable,reattach:_reattach,paintStyle:this.endpoints[0].connectorStyle||this.endpoints[1].connectorStyle||params.paintStyle||_jsPlumb.Defaults.PaintStyle||_jp.Defaults.PaintStyle,hoverPaintStyle:this.endpoints[0].connectorHoverStyle||this.endpoints[1].connectorHoverStyle||params.hoverPaintStyle||_jsPlumb.Defaults.HoverPaintStyle||_jp.Defaults.HoverPaintStyle});var _suspendedAt=_jsPlumb.getSuspendedAt();if(!_jsPlumb.isSuspendDrawing()){// paint the endpoints\nvar myInfo=_jsPlumb.getCachedData(this.sourceId),myOffset=myInfo.o,myWH=myInfo.s,otherInfo=_jsPlumb.getCachedData(this.targetId),otherOffset=otherInfo.o,otherWH=otherInfo.s,initialTimestamp=_suspendedAt||_jsPlumb.timestamp(),anchorLoc=this.endpoints[0].anchor.compute({xy:[myOffset.left,myOffset.top],wh:myWH,element:this.endpoints[0],elementId:this.endpoints[0].elementId,txy:[otherOffset.left,otherOffset.top],twh:otherWH,tElement:this.endpoints[1],timestamp:initialTimestamp});this.endpoints[0].paint({anchorLoc:anchorLoc,timestamp:initialTimestamp});anchorLoc=this.endpoints[1].anchor.compute({xy:[otherOffset.left,otherOffset.top],wh:otherWH,element:this.endpoints[1],elementId:this.endpoints[1].elementId,txy:[myOffset.left,myOffset.top],twh:myWH,tElement:this.endpoints[0],timestamp:initialTimestamp});this.endpoints[1].paint({anchorLoc:anchorLoc,timestamp:initialTimestamp});}this.getTypeDescriptor=function(){return"connection";};this.getAttachedElements=function(){return this.endpoints;};this.isDetachable=function(){return this._jsPlumb.detachable===true;};this.setDetachable=function(detachable){this._jsPlumb.detachable=detachable===true;};this.isReattach=function(){return this._jsPlumb.reattach===true||this.endpoints[0].reattachConnections===true||this.endpoints[1].reattachConnections===true;};this.setReattach=function(reattach){this._jsPlumb.reattach=reattach===true;};// END INITIALISATION CODE\n// COST + DIRECTIONALITY\n// if cost not supplied, try to inherit from source endpoint\nthis._jsPlumb.cost=params.cost||this.endpoints[0].getConnectionCost();this._jsPlumb.directed=params.directed;// inherit directed flag if set no source endpoint\nif(params.directed==null){this._jsPlumb.directed=this.endpoints[0].areConnectionsDirected();}// END COST + DIRECTIONALITY\n// PARAMETERS\n// merge all the parameters objects into the connection.  parameters set\n// on the connection take precedence; then source endpoint params, then\n// finally target endpoint params.\nvar _p=_jp.extend({},this.endpoints[1].getParameters());_jp.extend(_p,this.endpoints[0].getParameters());_jp.extend(_p,this.getParameters());this.setParameters(_p);// END PARAMETERS\n// PAINTING\nthis.setConnector(this.endpoints[0].connector||this.endpoints[1].connector||params.connector||_jsPlumb.Defaults.Connector||_jp.Defaults.Connector,true);var data=params.data==null||!_ju.isObject(params.data)?{}:params.data;this.getData=function(){return data;};this.setData=function(d){data=d||{};};this.mergeData=function(d){data=_jp.extend(data,d);};// the very last thing we do is apply types, if there are any.\nvar _types=["default",this.endpoints[0].connectionType,this.endpoints[1].connectionType,params.type].join(" ");if(/[^\\s]/.test(_types)){this.addType(_types,params.data,true);}this.updateConnectedClass();// END PAINTING    \n};_ju.extend(_jp.Connection,_jp.OverlayCapableJsPlumbUIComponent,{applyType:function applyType(t,doNotRepaint,typeMap){var _connector=null;if(t.connector!=null){_connector=this.getCachedTypeItem("connector",typeMap.connector);if(_connector==null){_connector=this.prepareConnector(t.connector,typeMap.connector);this.cacheTypeItem("connector",_connector,typeMap.connector);}this.setPreparedConnector(_connector);}// none of these things result in the creation of objects so can be ignored.\nif(t.detachable!=null){this.setDetachable(t.detachable);}if(t.reattach!=null){this.setReattach(t.reattach);}if(t.scope){this.scope=t.scope;}if(t.cssClass!=null&&this.canvas){this._jsPlumb.instance.addClass(this.canvas,t.cssClass);}var _anchors=null;// this also results in the creation of objects.\nif(t.anchor){// note that even if the param was anchor, we store `anchors`.\n_anchors=this.getCachedTypeItem("anchors",typeMap.anchor);if(_anchors==null){_anchors=[this._jsPlumb.instance.makeAnchor(t.anchor),this._jsPlumb.instance.makeAnchor(t.anchor)];this.cacheTypeItem("anchors",_anchors,typeMap.anchor);}}else if(t.anchors){_anchors=this.getCachedTypeItem("anchors",typeMap.anchors);if(_anchors==null){_anchors=[this._jsPlumb.instance.makeAnchor(t.anchors[0]),this._jsPlumb.instance.makeAnchor(t.anchors[1])];this.cacheTypeItem("anchors",_anchors,typeMap.anchors);}}if(_anchors!=null){this.endpoints[0].anchor=_anchors[0];this.endpoints[1].anchor=_anchors[1];if(this.endpoints[1].anchor.isDynamic){this._jsPlumb.instance.repaint(this.endpoints[1].elementId);}}_jp.OverlayCapableJsPlumbUIComponent.applyType(this,t);},addClass:function addClass(c,informEndpoints){if(informEndpoints){this.endpoints[0].addClass(c);this.endpoints[1].addClass(c);if(this.suspendedEndpoint){this.suspendedEndpoint.addClass(c);}}if(this.connector){this.connector.addClass(c);}},removeClass:function removeClass(c,informEndpoints){if(informEndpoints){this.endpoints[0].removeClass(c);this.endpoints[1].removeClass(c);if(this.suspendedEndpoint){this.suspendedEndpoint.removeClass(c);}}if(this.connector){this.connector.removeClass(c);}},isVisible:function isVisible(){return this._jsPlumb.visible;},setVisible:function setVisible(v){this._jsPlumb.visible=v;if(this.connector){this.connector.setVisible(v);}this.repaint();},cleanup:function cleanup(){this.updateConnectedClass(true);this.endpoints=null;this.source=null;this.target=null;if(this.connector!=null){this.connector.cleanup(true);this.connector.destroy(true);}this.connector=null;},updateConnectedClass:function updateConnectedClass(remove){if(this._jsPlumb){_updateConnectedClass(this,this.source,this._jsPlumb.instance,remove);_updateConnectedClass(this,this.target,this._jsPlumb.instance,remove);}},setHover:function setHover(state){if(this.connector&&this._jsPlumb&&!this._jsPlumb.instance.isConnectionBeingDragged()){this.connector.setHover(state);root.jsPlumb[state?"addClass":"removeClass"](this.source,this._jsPlumb.instance.hoverSourceClass);root.jsPlumb[state?"addClass":"removeClass"](this.target,this._jsPlumb.instance.hoverTargetClass);}},getUuids:function getUuids(){return[this.endpoints[0].getUuid(),this.endpoints[1].getUuid()];},getCost:function getCost(){return this._jsPlumb?this._jsPlumb.cost:-Infinity;},setCost:function setCost(c){this._jsPlumb.cost=c;},isDirected:function isDirected(){return this._jsPlumb.directed;},getConnector:function getConnector(){return this.connector;},prepareConnector:function prepareConnector(connectorSpec,typeId){var connectorArgs={_jsPlumb:this._jsPlumb.instance,cssClass:this._jsPlumb.params.cssClass||"",container:this._jsPlumb.params.container,"pointer-events":this._jsPlumb.params["pointer-events"]},renderMode=this._jsPlumb.instance.getRenderMode(),connector;if(_ju.isString(connectorSpec)){connector=makeConnector(this._jsPlumb.instance,renderMode,connectorSpec,connectorArgs,this);}// lets you use a string as shorthand.\nelse if(_ju.isArray(connectorSpec)){if(connectorSpec.length===1){connector=makeConnector(this._jsPlumb.instance,renderMode,connectorSpec[0],connectorArgs,this);}else{connector=makeConnector(this._jsPlumb.instance,renderMode,connectorSpec[0],_ju.merge(connectorSpec[1],connectorArgs),this);}}if(typeId!=null){connector.typeId=typeId;}return connector;},setPreparedConnector:function setPreparedConnector(connector,doNotRepaint,doNotChangeListenerComponent,typeId){if(this.connector!==connector){var previous,previousClasses="";// the connector will not be cleaned up if it was set as part of a type, because `typeId` will be set on it\n// and we havent passed in `true` for "force" here.\nif(this.connector!=null){previous=this.connector;previousClasses=previous.getClass();this.connector.cleanup();this.connector.destroy();}this.connector=connector;if(typeId){this.cacheTypeItem("connector",connector,typeId);}this.canvas=this.connector.canvas;this.bgCanvas=this.connector.bgCanvas;// put classes from prior connector onto the canvas\nthis.addClass(previousClasses);// new: instead of binding listeners per connector, we now just have one delegate on the container.\n// so for that handler we set the connection as the \'_jsPlumb\' member of the canvas element, and\n// bgCanvas, if it exists, which it does right now in the VML renderer, so it won\'t from v 2.0.0 onwards.\nif(this.canvas){this.canvas._jsPlumb=this;}if(this.bgCanvas){this.bgCanvas._jsPlumb=this;}if(previous!=null){var o=this.getOverlays();for(var i=0;i<o.length;i++){if(o[i].transfer){o[i].transfer(this.connector);}}}if(!doNotChangeListenerComponent){this.setListenerComponent(this.connector);}if(!doNotRepaint){this.repaint();}}},setConnector:function setConnector(connectorSpec,doNotRepaint,doNotChangeListenerComponent,typeId){var connector=this.prepareConnector(connectorSpec,typeId);this.setPreparedConnector(connector,doNotRepaint,doNotChangeListenerComponent,typeId);},paint:function paint(params){if(!this._jsPlumb.instance.isSuspendDrawing()&&this._jsPlumb.visible){params=params||{};var timestamp=params.timestamp,// if the moving object is not the source we must transpose the two references.\nswap=false,tId=swap?this.sourceId:this.targetId,sId=swap?this.targetId:this.sourceId,tIdx=swap?0:1,sIdx=swap?1:0;if(timestamp==null||timestamp!==this._jsPlumb.lastPaintedAt){var sourceInfo=this._jsPlumb.instance.updateOffset({elId:sId}).o,targetInfo=this._jsPlumb.instance.updateOffset({elId:tId}).o,sE=this.endpoints[sIdx],tE=this.endpoints[tIdx];var sAnchorP=sE.anchor.getCurrentLocation({xy:[sourceInfo.left,sourceInfo.top],wh:[sourceInfo.width,sourceInfo.height],element:sE,timestamp:timestamp}),tAnchorP=tE.anchor.getCurrentLocation({xy:[targetInfo.left,targetInfo.top],wh:[targetInfo.width,targetInfo.height],element:tE,timestamp:timestamp});this.connector.resetBounds();this.connector.compute({sourcePos:sAnchorP,targetPos:tAnchorP,sourceEndpoint:this.endpoints[sIdx],targetEndpoint:this.endpoints[tIdx],"stroke-width":this._jsPlumb.paintStyleInUse.strokeWidth,sourceInfo:sourceInfo,targetInfo:targetInfo});var overlayExtents={minX:Infinity,minY:Infinity,maxX:-Infinity,maxY:-Infinity};// compute overlays. we do this first so we can get their placements, and adjust the\n// container if needs be (if an overlay would be clipped)\nfor(var i in this._jsPlumb.overlays){if(this._jsPlumb.overlays.hasOwnProperty(i)){var o=this._jsPlumb.overlays[i];if(o.isVisible()){this._jsPlumb.overlayPlacements[i]=o.draw(this.connector,this._jsPlumb.paintStyleInUse,this.getAbsoluteOverlayPosition(o));overlayExtents.minX=Math.min(overlayExtents.minX,this._jsPlumb.overlayPlacements[i].minX);overlayExtents.maxX=Math.max(overlayExtents.maxX,this._jsPlumb.overlayPlacements[i].maxX);overlayExtents.minY=Math.min(overlayExtents.minY,this._jsPlumb.overlayPlacements[i].minY);overlayExtents.maxY=Math.max(overlayExtents.maxY,this._jsPlumb.overlayPlacements[i].maxY);}}}var lineWidth=parseFloat(this._jsPlumb.paintStyleInUse.strokeWidth||1)/2,outlineWidth=parseFloat(this._jsPlumb.paintStyleInUse.strokeWidth||0),extents={xmin:Math.min(this.connector.bounds.minX-(lineWidth+outlineWidth),overlayExtents.minX),ymin:Math.min(this.connector.bounds.minY-(lineWidth+outlineWidth),overlayExtents.minY),xmax:Math.max(this.connector.bounds.maxX+(lineWidth+outlineWidth),overlayExtents.maxX),ymax:Math.max(this.connector.bounds.maxY+(lineWidth+outlineWidth),overlayExtents.maxY)};// paint the connector.\nthis.connector.paint(this._jsPlumb.paintStyleInUse,null,extents);// and then the overlays\nfor(var j in this._jsPlumb.overlays){if(this._jsPlumb.overlays.hasOwnProperty(j)){var p=this._jsPlumb.overlays[j];if(p.isVisible()){p.paint(this._jsPlumb.overlayPlacements[j],extents);}}}}this._jsPlumb.lastPaintedAt=timestamp;}},repaint:function repaint(params){params=params||{};this.paint({elId:this.sourceId,recalc:!(params.recalc===false),timestamp:params.timestamp});},prepareEndpoint:function prepareEndpoint(_jsPlumb,_newEndpoint,conn,existing,index,params,element,elementId){var e;if(existing){conn.endpoints[index]=existing;existing.addConnection(conn);}else{if(!params.endpoints){params.endpoints=[null,null];}var ep=params.endpoints[index]||params.endpoint||_jsPlumb.Defaults.Endpoints[index]||_jp.Defaults.Endpoints[index]||_jsPlumb.Defaults.Endpoint||_jp.Defaults.Endpoint;if(!params.endpointStyles){params.endpointStyles=[null,null];}if(!params.endpointHoverStyles){params.endpointHoverStyles=[null,null];}var es=params.endpointStyles[index]||params.endpointStyle||_jsPlumb.Defaults.EndpointStyles[index]||_jp.Defaults.EndpointStyles[index]||_jsPlumb.Defaults.EndpointStyle||_jp.Defaults.EndpointStyle;// Endpoints derive their fill from the connector\'s stroke, if no fill was specified.\nif(es.fill==null&&params.paintStyle!=null){es.fill=params.paintStyle.stroke;}if(es.outlineStroke==null&&params.paintStyle!=null){es.outlineStroke=params.paintStyle.outlineStroke;}if(es.outlineWidth==null&&params.paintStyle!=null){es.outlineWidth=params.paintStyle.outlineWidth;}var ehs=params.endpointHoverStyles[index]||params.endpointHoverStyle||_jsPlumb.Defaults.EndpointHoverStyles[index]||_jp.Defaults.EndpointHoverStyles[index]||_jsPlumb.Defaults.EndpointHoverStyle||_jp.Defaults.EndpointHoverStyle;// endpoint hover fill style is derived from connector\'s hover stroke style\nif(params.hoverPaintStyle!=null){if(ehs==null){ehs={};}if(ehs.fill==null){ehs.fill=params.hoverPaintStyle.stroke;}}var a=params.anchors?params.anchors[index]:params.anchor?params.anchor:_makeAnchor(_jsPlumb.Defaults.Anchors[index],elementId,_jsPlumb)||_makeAnchor(_jp.Defaults.Anchors[index],elementId,_jsPlumb)||_makeAnchor(_jsPlumb.Defaults.Anchor,elementId,_jsPlumb)||_makeAnchor(_jp.Defaults.Anchor,elementId,_jsPlumb),u=params.uuids?params.uuids[index]:null;e=_newEndpoint({paintStyle:es,hoverPaintStyle:ehs,endpoint:ep,connections:[conn],uuid:u,anchor:a,source:element,scope:params.scope,reattach:params.reattach||_jsPlumb.Defaults.ReattachConnections,detachable:params.detachable||_jsPlumb.Defaults.ConnectionsDetachable});if(existing==null){e.setDeleteOnEmpty(true);}conn.endpoints[index]=e;if(params.drawEndpoints===false){e.setVisible(false,true,true);}}return e;}});// END Connection class            \n}).call(typeof window!==\'undefined\'?window:this);/*\r\n * This file contains the code for creating and manipulating anchors.\r\n *\r\n * Copyright (c) 2010 - 2018 jsPlumb (hello@jsplumbtoolkit.com)\r\n *\r\n * https://jsplumbtoolkit.com\r\n * https://github.com/jsplumb/jsplumb\r\n *\r\n * Dual licensed under the MIT and GPL2 licenses.\r\n */;(function(){"use strict";var root=this,_ju=root.jsPlumbUtil,_jp=root.jsPlumb;//\n// manages anchors for all elements.\n//\n_jp.AnchorManager=function(params){var _amEndpoints={},continuousAnchorLocations={},userDefinedContinuousAnchorLocations={},continuousAnchorOrientations={},Orientation={HORIZONTAL:"horizontal",VERTICAL:"vertical",DIAGONAL:"diagonal",IDENTITY:"identity"},axes=["left","top","right","bottom"],connectionsByElementId={},self=this,anchorLists={},jsPlumbInstance=params.jsPlumbInstance,floatingConnections={},calculateOrientation=function calculateOrientation(sourceId,targetId,sd,td,sourceAnchor,targetAnchor){if(sourceId===targetId){return{orientation:Orientation.IDENTITY,a:["top","top"]};}var theta=Math.atan2(td.centery-sd.centery,td.centerx-sd.centerx),theta2=Math.atan2(sd.centery-td.centery,sd.centerx-td.centerx);// --------------------------------------------------------------------------------------\n// improved face calculation. get midpoints of each face for source and target, then put in an array with all combinations of\n// source/target faces. sort this array by distance between midpoints. the entry at index 0 is our preferred option. we can\n// go through the array one by one until we find an entry in which each requested face is supported.\nvar candidates=[],midpoints={};(function(types,dim){for(var i=0;i<types.length;i++){midpoints[types[i]]={"left":[dim[i].left,dim[i].centery],"right":[dim[i].right,dim[i].centery],"top":[dim[i].centerx,dim[i].top],"bottom":[dim[i].centerx,dim[i].bottom]};}})(["source","target"],[sd,td]);for(var sf=0;sf<axes.length;sf++){for(var tf=0;tf<axes.length;tf++){candidates.push({source:axes[sf],target:axes[tf],dist:Biltong.lineLength(midpoints.source[axes[sf]],midpoints.target[axes[tf]])});}}candidates.sort(function(a,b){return a.dist<b.dist?-1:a.dist>b.dist?1:0;});// now go through this list and try to get an entry that satisfies both (there will be one, unless one of the anchors\n// declares no available faces)\nvar sourceEdge=candidates[0].source,targetEdge=candidates[0].target;for(var i=0;i<candidates.length;i++){if(!sourceAnchor.isContinuous||sourceAnchor.isEdgeSupported(candidates[i].source)){sourceEdge=candidates[i].source;}else{sourceEdge=null;}if(!targetAnchor.isContinuous||targetAnchor.isEdgeSupported(candidates[i].target)){targetEdge=candidates[i].target;}else{targetEdge=null;}if(sourceEdge!=null&&targetEdge!=null){break;}}if(sourceAnchor.isContinuous){sourceAnchor.setCurrentFace(sourceEdge);}if(targetAnchor.isContinuous){targetAnchor.setCurrentFace(targetEdge);}// --------------------------------------------------------------------------------------\nreturn{a:[sourceEdge,targetEdge],theta:theta,theta2:theta2};},// used by placeAnchors function\nplaceAnchorsOnLine=function placeAnchorsOnLine(desc,elementDimensions,elementPosition,connections,horizontal,otherMultiplier,reverse){var a=[],step=elementDimensions[horizontal?0:1]/(connections.length+1);for(var i=0;i<connections.length;i++){var val=(i+1)*step,other=otherMultiplier*elementDimensions[horizontal?1:0];if(reverse){val=elementDimensions[horizontal?0:1]-val;}var dx=horizontal?val:other,x=elementPosition[0]+dx,xp=dx/elementDimensions[0],dy=horizontal?other:val,y=elementPosition[1]+dy,yp=dy/elementDimensions[1];a.push([x,y,xp,yp,connections[i][1],connections[i][2]]);}return a;},// used by edgeSortFunctions\ncurrySort=function currySort(reverseAngles){return function(a,b){var r=true;if(reverseAngles){r=a[0][0]<b[0][0];}else{r=a[0][0]>b[0][0];}return r===false?-1:1;};},// used by edgeSortFunctions\nleftSort=function leftSort(a,b){// first get adjusted values\nvar p1=a[0][0]<0?-Math.PI-a[0][0]:Math.PI-a[0][0],p2=b[0][0]<0?-Math.PI-b[0][0]:Math.PI-b[0][0];if(p1>p2){return 1;}else{return-1;}},// used by placeAnchors\nedgeSortFunctions={"top":function top(a,b){return a[0]>b[0]?1:-1;},"right":currySort(true),"bottom":currySort(true),"left":leftSort},// used by placeAnchors\n_sortHelper=function _sortHelper(_array,_fn){return _array.sort(_fn);},// used by AnchorManager.redraw\nplaceAnchors=function placeAnchors(elementId,_anchorLists){var cd=jsPlumbInstance.getCachedData(elementId),sS=cd.s,sO=cd.o,placeSomeAnchors=function placeSomeAnchors(desc,elementDimensions,elementPosition,unsortedConnections,isHorizontal,otherMultiplier,orientation){if(unsortedConnections.length>0){var sc=_sortHelper(unsortedConnections,edgeSortFunctions[desc]),// puts them in order based on the target element\'s pos on screen\nreverse=desc==="right"||desc==="top",anchors=placeAnchorsOnLine(desc,elementDimensions,elementPosition,sc,isHorizontal,otherMultiplier,reverse);// takes a computed anchor position and adjusts it for parent offset and scroll, then stores it.\nvar _setAnchorLocation=function _setAnchorLocation(endpoint,anchorPos){continuousAnchorLocations[endpoint.id]=[anchorPos[0],anchorPos[1],anchorPos[2],anchorPos[3]];continuousAnchorOrientations[endpoint.id]=orientation;};for(var i=0;i<anchors.length;i++){var c=anchors[i][4],weAreSource=c.endpoints[0].elementId===elementId,weAreTarget=c.endpoints[1].elementId===elementId;if(weAreSource){_setAnchorLocation(c.endpoints[0],anchors[i]);}if(weAreTarget){_setAnchorLocation(c.endpoints[1],anchors[i]);}}}};placeSomeAnchors("bottom",sS,[sO.left,sO.top],_anchorLists.bottom,true,1,[0,1]);placeSomeAnchors("top",sS,[sO.left,sO.top],_anchorLists.top,true,0,[0,-1]);placeSomeAnchors("left",sS,[sO.left,sO.top],_anchorLists.left,false,0,[-1,0]);placeSomeAnchors("right",sS,[sO.left,sO.top],_anchorLists.right,false,1,[1,0]);};this.reset=function(){_amEndpoints={};connectionsByElementId={};anchorLists={};};this.addFloatingConnection=function(key,conn){floatingConnections[key]=conn;};this.removeFloatingConnection=function(key){delete floatingConnections[key];};this.newConnection=function(conn){var sourceId=conn.sourceId,targetId=conn.targetId,ep=conn.endpoints,doRegisterTarget=true,registerConnection=function registerConnection(otherIndex,otherEndpoint,otherAnchor,elId,c){if(sourceId===targetId&&otherAnchor.isContinuous){// remove the target endpoint\'s canvas.  we dont need it.\nconn._jsPlumb.instance.removeElement(ep[1].canvas);doRegisterTarget=false;}_ju.addToList(connectionsByElementId,elId,[c,otherEndpoint,otherAnchor.constructor===_jp.DynamicAnchor]);};registerConnection(0,ep[0],ep[0].anchor,targetId,conn);if(doRegisterTarget){registerConnection(1,ep[1],ep[1].anchor,sourceId,conn);}};var removeEndpointFromAnchorLists=function removeEndpointFromAnchorLists(endpoint){(function(list,eId){if(list){// transient anchors dont get entries in this list.\nvar f=function f(e){return e[4]===eId;};_ju.removeWithFunction(list.top,f);_ju.removeWithFunction(list.left,f);_ju.removeWithFunction(list.bottom,f);_ju.removeWithFunction(list.right,f);}})(anchorLists[endpoint.elementId],endpoint.id);};this.connectionDetached=function(connInfo,doNotRedraw){var connection=connInfo.connection||connInfo,sourceId=connInfo.sourceId,targetId=connInfo.targetId,ep=connection.endpoints,removeConnection=function removeConnection(otherIndex,otherEndpoint,otherAnchor,elId,c){_ju.removeWithFunction(connectionsByElementId[elId],function(_c){return _c[0].id===c.id;});};removeConnection(1,ep[1],ep[1].anchor,sourceId,connection);removeConnection(0,ep[0],ep[0].anchor,targetId,connection);if(connection.floatingId){removeConnection(connection.floatingIndex,connection.floatingEndpoint,connection.floatingEndpoint.anchor,connection.floatingId,connection);removeEndpointFromAnchorLists(connection.floatingEndpoint);}// remove from anchorLists            \nremoveEndpointFromAnchorLists(connection.endpoints[0]);removeEndpointFromAnchorLists(connection.endpoints[1]);if(!doNotRedraw){self.redraw(connection.sourceId);if(connection.targetId!==connection.sourceId){self.redraw(connection.targetId);}}};this.add=function(endpoint,elementId){_ju.addToList(_amEndpoints,elementId,endpoint);};this.changeId=function(oldId,newId){connectionsByElementId[newId]=connectionsByElementId[oldId];_amEndpoints[newId]=_amEndpoints[oldId];delete connectionsByElementId[oldId];delete _amEndpoints[oldId];};this.getConnectionsFor=function(elementId){return connectionsByElementId[elementId]||[];};this.getEndpointsFor=function(elementId){return _amEndpoints[elementId]||[];};this.deleteEndpoint=function(endpoint){_ju.removeWithFunction(_amEndpoints[endpoint.elementId],function(e){return e.id===endpoint.id;});removeEndpointFromAnchorLists(endpoint);};this.clearFor=function(elementId){delete _amEndpoints[elementId];_amEndpoints[elementId]=[];};// updates the given anchor list by either updating an existing anchor\'s info, or adding it. this function\n// also removes the anchor from its previous list, if the edge it is on has changed.\n// all connections found along the way (those that are connected to one of the faces this function\n// operates on) are added to the connsToPaint list, as are their endpoints. in this way we know to repaint\n// them wthout having to calculate anything else about them.\nvar _updateAnchorList=function _updateAnchorList(lists,theta,order,conn,aBoolean,otherElId,idx,reverse,edgeId,elId,connsToPaint,endpointsToPaint){// first try to find the exact match, but keep track of the first index of a matching element id along the way.s\nvar exactIdx=-1,firstMatchingElIdx=-1,endpoint=conn.endpoints[idx],endpointId=endpoint.id,oIdx=[1,0][idx],values=[[theta,order],conn,aBoolean,otherElId,endpointId],listToAddTo=lists[edgeId],listToRemoveFrom=endpoint._continuousAnchorEdge?lists[endpoint._continuousAnchorEdge]:null,i,candidate;if(listToRemoveFrom){var rIdx=_ju.findWithFunction(listToRemoveFrom,function(e){return e[4]===endpointId;});if(rIdx!==-1){listToRemoveFrom.splice(rIdx,1);// get all connections from this list\nfor(i=0;i<listToRemoveFrom.length;i++){candidate=listToRemoveFrom[i][1];_ju.addWithFunction(connsToPaint,candidate,function(c){return c.id===candidate.id;});_ju.addWithFunction(endpointsToPaint,listToRemoveFrom[i][1].endpoints[idx],function(e){return e.id===candidate.endpoints[idx].id;});_ju.addWithFunction(endpointsToPaint,listToRemoveFrom[i][1].endpoints[oIdx],function(e){return e.id===candidate.endpoints[oIdx].id;});}}}for(i=0;i<listToAddTo.length;i++){candidate=listToAddTo[i][1];if(params.idx===1&&listToAddTo[i][3]===otherElId&&firstMatchingElIdx===-1){firstMatchingElIdx=i;}_ju.addWithFunction(connsToPaint,candidate,function(c){return c.id===candidate.id;});_ju.addWithFunction(endpointsToPaint,listToAddTo[i][1].endpoints[idx],function(e){return e.id===candidate.endpoints[idx].id;});_ju.addWithFunction(endpointsToPaint,listToAddTo[i][1].endpoints[oIdx],function(e){return e.id===candidate.endpoints[oIdx].id;});}if(exactIdx!==-1){listToAddTo[exactIdx]=values;}else{var insertIdx=reverse?firstMatchingElIdx!==-1?firstMatchingElIdx:0:listToAddTo.length;// of course we will get this from having looked through the array shortly.\nlistToAddTo.splice(insertIdx,0,values);}// store this for next time.\nendpoint._continuousAnchorEdge=edgeId;};//\n// find the entry in an endpoint\'s list for this connection and update its target endpoint\n// with the current target in the connection.\n// This method and sourceChanged need to be folder into one.\n//\nthis.updateOtherEndpoint=function(sourceElId,oldTargetId,newTargetId,connection){var sIndex=_ju.findWithFunction(connectionsByElementId[sourceElId],function(i){return i[0].id===connection.id;}),tIndex=_ju.findWithFunction(connectionsByElementId[oldTargetId],function(i){return i[0].id===connection.id;});// update or add data for source\nif(sIndex!==-1){connectionsByElementId[sourceElId][sIndex][0]=connection;connectionsByElementId[sourceElId][sIndex][1]=connection.endpoints[1];connectionsByElementId[sourceElId][sIndex][2]=connection.endpoints[1].anchor.constructor===_jp.DynamicAnchor;}// remove entry for previous target (if there)\nif(tIndex>-1){connectionsByElementId[oldTargetId].splice(tIndex,1);// add entry for new target\n_ju.addToList(connectionsByElementId,newTargetId,[connection,connection.endpoints[0],connection.endpoints[0].anchor.constructor===_jp.DynamicAnchor]);}connection.updateConnectedClass();};//\n// notification that the connection given has changed source from the originalId to the newId.\n// This involves:\n// 1. removing the connection from the list of connections stored for the originalId\n// 2. updating the source information for the target of the connection\n// 3. re-registering the connection in connectionsByElementId with the newId\n//\nthis.sourceChanged=function(originalId,newId,connection,newElement){if(originalId!==newId){connection.sourceId=newId;connection.source=newElement;// remove the entry that points from the old source to the target\n_ju.removeWithFunction(connectionsByElementId[originalId],function(info){return info[0].id===connection.id;});// find entry for target and update it\nvar tIdx=_ju.findWithFunction(connectionsByElementId[connection.targetId],function(i){return i[0].id===connection.id;});if(tIdx>-1){connectionsByElementId[connection.targetId][tIdx][0]=connection;connectionsByElementId[connection.targetId][tIdx][1]=connection.endpoints[0];connectionsByElementId[connection.targetId][tIdx][2]=connection.endpoints[0].anchor.constructor===_jp.DynamicAnchor;}// add entry for new source\n_ju.addToList(connectionsByElementId,newId,[connection,connection.endpoints[1],connection.endpoints[1].anchor.constructor===_jp.DynamicAnchor]);// TODO SP not final on this yet. when a user drags an existing connection and it turns into a self\n// loop, then this code hides the target endpoint (by removing it from the DOM) But I think this should\n// occur only if the anchor is Continuous\nif(connection.endpoints[1].anchor.isContinuous){if(connection.source===connection.target){connection._jsPlumb.instance.removeElement(connection.endpoints[1].canvas);}else{if(connection.endpoints[1].canvas.parentNode==null){connection._jsPlumb.instance.appendElement(connection.endpoints[1].canvas);}}}connection.updateConnectedClass();}};//\n// moves the given endpoint from `currentId` to `element`.\n// This involves:\n//\n// 1. changing the key in _amEndpoints under which the endpoint is stored\n// 2. changing the source or target values in all of the endpoint\'s connections\n// 3. changing the array in connectionsByElementId in which the endpoint\'s connections\n//    are stored (done by either sourceChanged or updateOtherEndpoint)\n//\nthis.rehomeEndpoint=function(ep,currentId,element){var eps=_amEndpoints[currentId]||[],elementId=jsPlumbInstance.getId(element);if(elementId!==currentId){var idx=eps.indexOf(ep);if(idx>-1){var _ep=eps.splice(idx,1)[0];self.add(_ep,elementId);}}for(var i=0;i<ep.connections.length;i++){if(ep.connections[i].sourceId===currentId){self.sourceChanged(currentId,ep.elementId,ep.connections[i],ep.element);}else if(ep.connections[i].targetId===currentId){ep.connections[i].targetId=ep.elementId;ep.connections[i].target=ep.element;self.updateOtherEndpoint(ep.connections[i].sourceId,currentId,ep.elementId,ep.connections[i]);}}};this.redraw=function(elementId,ui,timestamp,offsetToUI,clearEdits,doNotRecalcEndpoint){if(!jsPlumbInstance.isSuspendDrawing()){// get all the endpoints for this element\nvar ep=_amEndpoints[elementId]||[],endpointConnections=connectionsByElementId[elementId]||[],connectionsToPaint=[],endpointsToPaint=[],anchorsToUpdate=[];timestamp=timestamp||jsPlumbInstance.timestamp();// offsetToUI are values that would have been calculated in the dragManager when registering\n// an endpoint for an element that had a parent (somewhere in the hierarchy) that had been\n// registered as draggable.\noffsetToUI=offsetToUI||{left:0,top:0};if(ui){ui={left:ui.left+offsetToUI.left,top:ui.top+offsetToUI.top};}// valid for one paint cycle.\nvar myOffset=jsPlumbInstance.updateOffset({elId:elementId,offset:ui,recalc:false,timestamp:timestamp}),orientationCache={};// actually, first we should compute the orientation of this element to all other elements to which\n// this element is connected with a continuous anchor (whether both ends of the connection have\n// a continuous anchor or just one)\nfor(var i=0;i<endpointConnections.length;i++){var conn=endpointConnections[i][0],sourceId=conn.sourceId,targetId=conn.targetId,sourceContinuous=conn.endpoints[0].anchor.isContinuous,targetContinuous=conn.endpoints[1].anchor.isContinuous;if(sourceContinuous||targetContinuous){var oKey=sourceId+"_"+targetId,o=orientationCache[oKey],oIdx=conn.sourceId===elementId?1:0;if(sourceContinuous&&!anchorLists[sourceId]){anchorLists[sourceId]={top:[],right:[],bottom:[],left:[]};}if(targetContinuous&&!anchorLists[targetId]){anchorLists[targetId]={top:[],right:[],bottom:[],left:[]};}if(elementId!==targetId){jsPlumbInstance.updateOffset({elId:targetId,timestamp:timestamp});}if(elementId!==sourceId){jsPlumbInstance.updateOffset({elId:sourceId,timestamp:timestamp});}var td=jsPlumbInstance.getCachedData(targetId),sd=jsPlumbInstance.getCachedData(sourceId);if(targetId===sourceId&&(sourceContinuous||targetContinuous)){// here we may want to improve this by somehow determining the face we\'d like\n// to put the connector on.  ideally, when drawing, the face should be calculated\n// by determining which face is closest to the point at which the mouse button\n// was released.  for now, we\'re putting it on the top face.\n_updateAnchorList(anchorLists[sourceId],-Math.PI/2,0,conn,false,targetId,0,false,"top",sourceId,connectionsToPaint,endpointsToPaint);_updateAnchorList(anchorLists[targetId],-Math.PI/2,0,conn,false,sourceId,1,false,"top",targetId,connectionsToPaint,endpointsToPaint);}else{if(!o){o=calculateOrientation(sourceId,targetId,sd.o,td.o,conn.endpoints[0].anchor,conn.endpoints[1].anchor);orientationCache[oKey]=o;// this would be a performance enhancement, but the computed angles need to be clamped to\n//the (-PI/2 -> PI/2) range in order for the sorting to work properly.\n/*  orientationCache[oKey2] = {\r\n                                 orientation:o.orientation,\r\n                                 a:[o.a[1], o.a[0]],\r\n                                 theta:o.theta + Math.PI,\r\n                                 theta2:o.theta2 + Math.PI\r\n                                 };*/}if(sourceContinuous){_updateAnchorList(anchorLists[sourceId],o.theta,0,conn,false,targetId,0,false,o.a[0],sourceId,connectionsToPaint,endpointsToPaint);}if(targetContinuous){_updateAnchorList(anchorLists[targetId],o.theta2,-1,conn,true,sourceId,1,true,o.a[1],targetId,connectionsToPaint,endpointsToPaint);}}if(sourceContinuous){_ju.addWithFunction(anchorsToUpdate,sourceId,function(a){return a===sourceId;});}if(targetContinuous){_ju.addWithFunction(anchorsToUpdate,targetId,function(a){return a===targetId;});}_ju.addWithFunction(connectionsToPaint,conn,function(c){return c.id===conn.id;});if(sourceContinuous&&oIdx===0||targetContinuous&&oIdx===1){_ju.addWithFunction(endpointsToPaint,conn.endpoints[oIdx],function(e){return e.id===conn.endpoints[oIdx].id;});}}}// place Endpoints whose anchors are continuous but have no Connections\nfor(i=0;i<ep.length;i++){if(ep[i].connections.length===0&&ep[i].anchor.isContinuous){if(!anchorLists[elementId]){anchorLists[elementId]={top:[],right:[],bottom:[],left:[]};}_updateAnchorList(anchorLists[elementId],-Math.PI/2,0,{endpoints:[ep[i],ep[i]],paint:function paint(){}},false,elementId,0,false,ep[i].anchor.getDefaultFace(),elementId,connectionsToPaint,endpointsToPaint);_ju.addWithFunction(anchorsToUpdate,elementId,function(a){return a===elementId;});}}// now place all the continuous anchors we need to;\nfor(i=0;i<anchorsToUpdate.length;i++){placeAnchors(anchorsToUpdate[i],anchorLists[anchorsToUpdate[i]]);}// now that continuous anchors have been placed, paint all the endpoints for this element\n// TODO performance: add the endpoint ids to a temp array, and then when iterating in the next\n// loop, check that we didn\'t just paint that endpoint. we can probably shave off a few more milliseconds this way.\nfor(i=0;i<ep.length;i++){ep[i].paint({timestamp:timestamp,offset:myOffset,dimensions:myOffset.s,recalc:doNotRecalcEndpoint!==true});}// ... and any other endpoints we came across as a result of the continuous anchors.\nfor(i=0;i<endpointsToPaint.length;i++){var cd=jsPlumbInstance.getCachedData(endpointsToPaint[i].elementId);endpointsToPaint[i].paint({timestamp:timestamp,offset:cd,dimensions:cd.s});}// paint all the standard and "dynamic connections", which are connections whose other anchor is\n// static and therefore does need to be recomputed; we make sure that happens only one time.\n// TODO we could have compiled a list of these in the first pass through connections; might save some time.\nfor(i=0;i<endpointConnections.length;i++){var otherEndpoint=endpointConnections[i][1];if(otherEndpoint.anchor.constructor===_jp.DynamicAnchor){otherEndpoint.paint({elementWithPrecedence:elementId,timestamp:timestamp});_ju.addWithFunction(connectionsToPaint,endpointConnections[i][0],function(c){return c.id===endpointConnections[i][0].id;});// all the connections for the other endpoint now need to be repainted\nfor(var k=0;k<otherEndpoint.connections.length;k++){if(otherEndpoint.connections[k]!==endpointConnections[i][0]){_ju.addWithFunction(connectionsToPaint,otherEndpoint.connections[k],function(c){return c.id===otherEndpoint.connections[k].id;});}}}else{_ju.addWithFunction(connectionsToPaint,endpointConnections[i][0],function(c){return c.id===endpointConnections[i][0].id;});}}// paint current floating connection for this element, if there is one.\nvar fc=floatingConnections[elementId];if(fc){fc.paint({timestamp:timestamp,recalc:false,elId:elementId});}// paint all the connections\nfor(i=0;i<connectionsToPaint.length;i++){connectionsToPaint[i].paint({elId:elementId,timestamp:timestamp,recalc:false,clearEdits:clearEdits});}}};var ContinuousAnchor=function ContinuousAnchor(anchorParams){_ju.EventGenerator.apply(this);this.type="Continuous";this.isDynamic=true;this.isContinuous=true;var faces=anchorParams.faces||["top","right","bottom","left"],clockwise=!(anchorParams.clockwise===false),availableFaces={},opposites={"top":"bottom","right":"left","left":"right","bottom":"top"},clockwiseOptions={"top":"right","right":"bottom","left":"top","bottom":"left"},antiClockwiseOptions={"top":"left","right":"top","left":"bottom","bottom":"right"},secondBest=clockwise?clockwiseOptions:antiClockwiseOptions,lastChoice=clockwise?antiClockwiseOptions:clockwiseOptions,cssClass=anchorParams.cssClass||"",_currentFace=null,_lockedFace=null,X_AXIS_FACES=["left","right"],Y_AXIS_FACES=["top","bottom"],_lockedAxis=null;for(var i=0;i<faces.length;i++){availableFaces[faces[i]]=true;}this.getDefaultFace=function(){return faces.length===0?"top":faces[0];};// if the given edge is supported, returns it. otherwise looks for a substitute that _is_\n// supported. if none supported we also return the request edge.\nthis.verifyEdge=function(edge){if(availableFaces[edge]){return edge;}else if(availableFaces[opposites[edge]]){return opposites[edge];}else if(availableFaces[secondBest[edge]]){return secondBest[edge];}else if(availableFaces[lastChoice[edge]]){return lastChoice[edge];}return edge;// we have to give them something.\n};this.isEdgeSupported=function(edge){return _lockedAxis==null?_lockedFace==null?availableFaces[edge]===true:_lockedFace===edge:_lockedAxis.indexOf(edge)!==-1;};this.setCurrentFace=function(face){_currentFace=face;};this.getCurrentFace=function(){return _currentFace;};this.lockCurrentFace=function(){_lockedFace=_currentFace;};this.unlockCurrentFace=function(){_lockedFace=null;};this.lockCurrentAxis=function(){if(_currentFace!=null){_lockedAxis=_currentFace==="left"||_currentFace==="right"?X_AXIS_FACES:Y_AXIS_FACES;}};this.unlockCurrentAxis=function(){_lockedAxis=null;};this.compute=function(params){return userDefinedContinuousAnchorLocations[params.element.id]||continuousAnchorLocations[params.element.id]||[0,0];};this.getCurrentLocation=function(params){return userDefinedContinuousAnchorLocations[params.element.id]||continuousAnchorLocations[params.element.id]||[0,0];};this.getOrientation=function(endpoint){return continuousAnchorOrientations[endpoint.id]||[0,0];};this.clearUserDefinedLocation=function(){delete userDefinedContinuousAnchorLocations[anchorParams.elementId];};this.setUserDefinedLocation=function(loc){userDefinedContinuousAnchorLocations[anchorParams.elementId]=loc;};this.getCssClass=function(){return cssClass;};};// continuous anchors\njsPlumbInstance.continuousAnchorFactory={get:function get(params){return new ContinuousAnchor(params);},clear:function clear(elementId){delete userDefinedContinuousAnchorLocations[elementId];delete continuousAnchorLocations[elementId];}};};/**\r\n     * Anchors model a position on some element at which an Endpoint may be located.  They began as a first class citizen of jsPlumb, ie. a user\r\n     * was required to create these themselves, but over time this has been replaced by the concept of referring to them either by name (eg. "TopMiddle"),\r\n     * or by an array describing their coordinates (eg. [ 0, 0.5, 0, -1 ], which is the same as "TopMiddle").  jsPlumb now handles all of the\r\n     * creation of Anchors without user intervention.\r\n     */_jp.Anchor=function(params){this.x=params.x||0;this.y=params.y||0;this.elementId=params.elementId;this.cssClass=params.cssClass||"";this.userDefinedLocation=null;this.orientation=params.orientation||[0,0];this.lastReturnValue=null;this.offsets=params.offsets||[0,0];this.timestamp=null;_ju.EventGenerator.apply(this);this.compute=function(params){var xy=params.xy,wh=params.wh,timestamp=params.timestamp;if(params.clearUserDefinedLocation){this.userDefinedLocation=null;}if(timestamp&&timestamp===this.timestamp){return this.lastReturnValue;}if(this.userDefinedLocation!=null){this.lastReturnValue=this.userDefinedLocation;}else{this.lastReturnValue=[xy[0]+this.x*wh[0]+this.offsets[0],xy[1]+this.y*wh[1]+this.offsets[1]];}this.timestamp=timestamp;return this.lastReturnValue;};this.getCurrentLocation=function(params){params=params||{};return this.lastReturnValue==null||params.timestamp!=null&&this.timestamp!==params.timestamp?this.compute(params):this.lastReturnValue;};};_ju.extend(_jp.Anchor,_ju.EventGenerator,{equals:function equals(anchor){if(!anchor){return false;}var ao=anchor.getOrientation(),o=this.getOrientation();return this.x===anchor.x&&this.y===anchor.y&&this.offsets[0]===anchor.offsets[0]&&this.offsets[1]===anchor.offsets[1]&&o[0]===ao[0]&&o[1]===ao[1];},getUserDefinedLocation:function getUserDefinedLocation(){return this.userDefinedLocation;},setUserDefinedLocation:function setUserDefinedLocation(l){this.userDefinedLocation=l;},clearUserDefinedLocation:function clearUserDefinedLocation(){this.userDefinedLocation=null;},getOrientation:function getOrientation(){return this.orientation;},getCssClass:function getCssClass(){return this.cssClass;}});/**\r\n     * An Anchor that floats. its orientation is computed dynamically from\r\n     * its position relative to the anchor it is floating relative to.  It is used when creating\r\n     * a connection through drag and drop.\r\n     *\r\n     * TODO FloatingAnchor could totally be refactored to extend Anchor just slightly.\r\n     */_jp.FloatingAnchor=function(params){_jp.Anchor.apply(this,arguments);// this is the anchor that this floating anchor is referenced to for\n// purposes of calculating the orientation.\nvar ref=params.reference,// the canvas this refers to.\nrefCanvas=params.referenceCanvas,size=_jp.getSize(refCanvas),// these are used to store the current relative position of our\n// anchor wrt the reference anchor. they only indicate\n// direction, so have a value of 1 or -1 (or, very rarely, 0). these\n// values are written by the compute method, and read\n// by the getOrientation method.\nxDir=0,yDir=0,// temporary member used to store an orientation when the floating\n// anchor is hovering over another anchor.\norientation=null,_lastResult=null;// clear from parent. we want floating anchor orientation to always be computed.\nthis.orientation=null;// set these to 0 each; they are used by certain types of connectors in the loopback case,\n// when the connector is trying to clear the element it is on. but for floating anchor it\'s not\n// very important.\nthis.x=0;this.y=0;this.isFloating=true;this.compute=function(params){var xy=params.xy,result=[xy[0]+size[0]/2,xy[1]+size[1]/2];// return origin of the element. we may wish to improve this so that any object can be the drag proxy.\n_lastResult=result;return result;};this.getOrientation=function(_endpoint){if(orientation){return orientation;}else{var o=ref.getOrientation(_endpoint);// here we take into account the orientation of the other\n// anchor: if it declares zero for some direction, we declare zero too. this might not be the most awesome. perhaps we can come\n// up with a better way. it\'s just so that the line we draw looks like it makes sense. maybe this wont make sense.\nreturn[Math.abs(o[0])*xDir*-1,Math.abs(o[1])*yDir*-1];}};/**\r\n         * notification the endpoint associated with this anchor is hovering\r\n         * over another anchor; we want to assume that anchor\'s orientation\r\n         * for the duration of the hover.\r\n         */this.over=function(anchor,endpoint){orientation=anchor.getOrientation(endpoint);};/**\r\n         * notification the endpoint associated with this anchor is no\r\n         * longer hovering over another anchor; we should resume calculating\r\n         * orientation as we normally do.\r\n         */this.out=function(){orientation=null;};this.getCurrentLocation=function(params){return _lastResult==null?this.compute(params):_lastResult;};};_ju.extend(_jp.FloatingAnchor,_jp.Anchor);var _convertAnchor=function _convertAnchor(anchor,jsPlumbInstance,elementId){return anchor.constructor===_jp.Anchor?anchor:jsPlumbInstance.makeAnchor(anchor,elementId,jsPlumbInstance);};/* \r\n     * A DynamicAnchor is an Anchor that contains a list of other Anchors, which it cycles\r\n     * through at compute time to find the one that is located closest to\r\n     * the center of the target element, and returns that Anchor\'s compute\r\n     * method result. this causes endpoints to follow each other with\r\n     * respect to the orientation of their target elements, which is a useful\r\n     * feature for some applications.\r\n     * \r\n     */_jp.DynamicAnchor=function(params){_jp.Anchor.apply(this,arguments);this.isDynamic=true;this.anchors=[];this.elementId=params.elementId;this.jsPlumbInstance=params.jsPlumbInstance;for(var i=0;i<params.anchors.length;i++){this.anchors[i]=_convertAnchor(params.anchors[i],this.jsPlumbInstance,this.elementId);}this.getAnchors=function(){return this.anchors;};this.locked=false;var _curAnchor=this.anchors.length>0?this.anchors[0]:null,_lastAnchor=_curAnchor,self=this,// helper method to calculate the distance between the centers of the two elements.\n_distance=function _distance(anchor,cx,cy,xy,wh){var ax=xy[0]+anchor.x*wh[0],ay=xy[1]+anchor.y*wh[1],acx=xy[0]+wh[0]/2,acy=xy[1]+wh[1]/2;return Math.sqrt(Math.pow(cx-ax,2)+Math.pow(cy-ay,2))+Math.sqrt(Math.pow(acx-ax,2)+Math.pow(acy-ay,2));},// default method uses distance between element centers.  you can provide your own method in the dynamic anchor\n// constructor (and also to jsPlumb.makeDynamicAnchor). the arguments to it are four arrays:\n// xy - xy loc of the anchor\'s element\n// wh - anchor\'s element\'s dimensions\n// txy - xy loc of the element of the other anchor in the connection\n// twh - dimensions of the element of the other anchor in the connection.\n// anchors - the list of selectable anchors\n_anchorSelector=params.selector||function(xy,wh,txy,twh,anchors){var cx=txy[0]+twh[0]/2,cy=txy[1]+twh[1]/2;var minIdx=-1,minDist=Infinity;for(var i=0;i<anchors.length;i++){var d=_distance(anchors[i],cx,cy,xy,wh);if(d<minDist){minIdx=i+0;minDist=d;}}return anchors[minIdx];};this.compute=function(params){var xy=params.xy,wh=params.wh,txy=params.txy,twh=params.twh;this.timestamp=params.timestamp;var udl=self.getUserDefinedLocation();if(udl!=null){return udl;}// if anchor is locked or an opposite element was not given, we\n// maintain our state. anchor will be locked\n// if it is the source of a drag and drop.\nif(this.locked||txy==null||twh==null){return _curAnchor.compute(params);}else{params.timestamp=null;// otherwise clear this, i think. we want the anchor to compute.\n}_curAnchor=_anchorSelector(xy,wh,txy,twh,this.anchors);this.x=_curAnchor.x;this.y=_curAnchor.y;if(_curAnchor!==_lastAnchor){this.fire("anchorChanged",_curAnchor);}_lastAnchor=_curAnchor;return _curAnchor.compute(params);};this.getCurrentLocation=function(params){return this.getUserDefinedLocation()||(_curAnchor!=null?_curAnchor.getCurrentLocation(params):null);};this.getOrientation=function(_endpoint){return _curAnchor!=null?_curAnchor.getOrientation(_endpoint):[0,0];};this.over=function(anchor,endpoint){if(_curAnchor!=null){_curAnchor.over(anchor,endpoint);}};this.out=function(){if(_curAnchor!=null){_curAnchor.out();}};this.getCssClass=function(){return _curAnchor&&_curAnchor.getCssClass()||"";};};_ju.extend(_jp.DynamicAnchor,_jp.Anchor);// -------- basic anchors ------------------    \nvar _curryAnchor=function _curryAnchor(x,y,ox,oy,type,fnInit){_jp.Anchors[type]=function(params){var a=params.jsPlumbInstance.makeAnchor([x,y,ox,oy,0,0],params.elementId,params.jsPlumbInstance);a.type=type;if(fnInit){fnInit(a,params);}return a;};};_curryAnchor(0.5,0,0,-1,"TopCenter");_curryAnchor(0.5,1,0,1,"BottomCenter");_curryAnchor(0,0.5,-1,0,"LeftMiddle");_curryAnchor(1,0.5,1,0,"RightMiddle");_curryAnchor(0.5,0,0,-1,"Top");_curryAnchor(0.5,1,0,1,"Bottom");_curryAnchor(0,0.5,-1,0,"Left");_curryAnchor(1,0.5,1,0,"Right");_curryAnchor(0.5,0.5,0,0,"Center");_curryAnchor(1,0,0,-1,"TopRight");_curryAnchor(1,1,0,1,"BottomRight");_curryAnchor(0,0,0,-1,"TopLeft");_curryAnchor(0,1,0,1,"BottomLeft");// ------- dynamic anchors -------------------    \n// default dynamic anchors chooses from Top, Right, Bottom, Left\n_jp.Defaults.DynamicAnchors=function(params){return params.jsPlumbInstance.makeAnchors(["TopCenter","RightMiddle","BottomCenter","LeftMiddle"],params.elementId,params.jsPlumbInstance);};// default dynamic anchors bound to name \'AutoDefault\'\n_jp.Anchors.AutoDefault=function(params){var a=params.jsPlumbInstance.makeDynamicAnchor(_jp.Defaults.DynamicAnchors(params));a.type="AutoDefault";return a;};// ------- continuous anchors -------------------    \nvar _curryContinuousAnchor=function _curryContinuousAnchor(type,faces){_jp.Anchors[type]=function(params){var a=params.jsPlumbInstance.makeAnchor(["Continuous",{faces:faces}],params.elementId,params.jsPlumbInstance);a.type=type;return a;};};_jp.Anchors.Continuous=function(params){return params.jsPlumbInstance.continuousAnchorFactory.get(params);};_curryContinuousAnchor("ContinuousLeft",["left"]);_curryContinuousAnchor("ContinuousTop",["top"]);_curryContinuousAnchor("ContinuousBottom",["bottom"]);_curryContinuousAnchor("ContinuousRight",["right"]);// ------- position assign anchors -------------------    \n// this anchor type lets you assign the position at connection time.\n_curryAnchor(0,0,0,0,"Assign",function(anchor,params){// find what to use as the "position finder". the user may have supplied a String which represents\n// the id of a position finder in jsPlumb.AnchorPositionFinders, or the user may have supplied the\n// position finder as a function.  we find out what to use and then set it on the anchor.\nvar pf=params.position||"Fixed";anchor.positionFinder=pf.constructor===String?params.jsPlumbInstance.AnchorPositionFinders[pf]:pf;// always set the constructor params; the position finder might need them later (the Grid one does,\n// for example)\nanchor.constructorParams=params;});// these are the default anchor positions finders, which are used by the makeTarget function.  supplying\n// a position finder argument to that function allows you to specify where the resulting anchor will\n// be located\nroot.jsPlumbInstance.prototype.AnchorPositionFinders={"Fixed":function Fixed(dp,ep,es){return[(dp.left-ep.left)/es[0],(dp.top-ep.top)/es[1]];},"Grid":function Grid(dp,ep,es,params){var dx=dp.left-ep.left,dy=dp.top-ep.top,gx=es[0]/params.grid[0],gy=es[1]/params.grid[1],mx=Math.floor(dx/gx),my=Math.floor(dy/gy);return[(mx*gx+gx/2)/es[0],(my*gy+gy/2)/es[1]];}};// ------- perimeter anchors -------------------    \n_jp.Anchors.Perimeter=function(params){params=params||{};var anchorCount=params.anchorCount||60,shape=params.shape;if(!shape){throw new Error("no shape supplied to Perimeter Anchor type");}var _circle=function _circle(){var r=0.5,step=Math.PI*2/anchorCount,current=0,a=[];for(var i=0;i<anchorCount;i++){var x=r+r*Math.sin(current),y=r+r*Math.cos(current);a.push([x,y,0,0]);current+=step;}return a;},_path=function _path(segments){var anchorsPerFace=anchorCount/segments.length,a=[],_computeFace=function _computeFace(x1,y1,x2,y2,fractionalLength){anchorsPerFace=anchorCount*fractionalLength;var dx=(x2-x1)/anchorsPerFace,dy=(y2-y1)/anchorsPerFace;for(var i=0;i<anchorsPerFace;i++){a.push([x1+dx*i,y1+dy*i,0,0]);}};for(var i=0;i<segments.length;i++){_computeFace.apply(null,segments[i]);}return a;},_shape=function _shape(faces){var s=[];for(var i=0;i<faces.length;i++){s.push([faces[i][0],faces[i][1],faces[i][2],faces[i][3],1/faces.length]);}return _path(s);},_rectangle=function _rectangle(){return _shape([[0,0,1,0],[1,0,1,1],[1,1,0,1],[0,1,0,0]]);};var _shapes={"Circle":_circle,"Ellipse":_circle,"Diamond":function Diamond(){return _shape([[0.5,0,1,0.5],[1,0.5,0.5,1],[0.5,1,0,0.5],[0,0.5,0.5,0]]);},"Rectangle":_rectangle,"Square":_rectangle,"Triangle":function Triangle(){return _shape([[0.5,0,1,1],[1,1,0,1],[0,1,0.5,0]]);},"Path":function Path(params){var points=params.points,p=[],tl=0;for(var i=0;i<points.length-1;i++){var l=Math.sqrt(Math.pow(points[i][2]-points[i][0])+Math.pow(points[i][3]-points[i][1]));tl+=l;p.push([points[i][0],points[i][1],points[i+1][0],points[i+1][1],l]);}for(var j=0;j<p.length;j++){p[j][4]=p[j][4]/tl;}return _path(p);}},_rotate=function _rotate(points,amountInDegrees){var o=[],theta=amountInDegrees/180*Math.PI;for(var i=0;i<points.length;i++){var _x=points[i][0]-0.5,_y=points[i][1]-0.5;o.push([0.5+(_x*Math.cos(theta)-_y*Math.sin(theta)),0.5+(_x*Math.sin(theta)+_y*Math.cos(theta)),points[i][2],points[i][3]]);}return o;};if(!_shapes[shape]){throw new Error("Shape ["+shape+"] is unknown by Perimeter Anchor type");}var da=_shapes[shape](params);if(params.rotation){da=_rotate(da,params.rotation);}var a=params.jsPlumbInstance.makeDynamicAnchor(da);a.type="Perimeter";return a;};}).call(typeof window!==\'undefined\'?window:this);/*\r\n * This file contains the default Connectors, Endpoint and Overlay definitions.\r\n *\r\n * Copyright (c) 2010 - 2018 jsPlumb (hello@jsplumbtoolkit.com)\r\n * \r\n * https://jsplumbtoolkit.com\r\n * https://github.com/jsplumb/jsplumb\r\n * \r\n * Dual licensed under the MIT and GPL2 licenses.\r\n */;(function(){"use strict";var root=this,_jp=root.jsPlumb,_ju=root.jsPlumbUtil,_jg=root.Biltong;_jp.Segments={/*\r\n         * Class: AbstractSegment\r\n         * A Connector is made up of 1..N Segments, each of which has a Type, such as \'Straight\', \'Arc\',\r\n         * \'Bezier\'. This is new from 1.4.2, and gives us a lot more flexibility when drawing connections: things such\r\n         * as rounded corners for flowchart connectors, for example, or a straight line stub for Bezier connections, are\r\n         * much easier to do now.\r\n         *\r\n         * A Segment is responsible for providing coordinates for painting it, and also must be able to report its length.\r\n         * \r\n         */AbstractSegment:function AbstractSegment(params){this.params=params;/**\r\n             * Function: findClosestPointOnPath\r\n             * Finds the closest point on this segment to the given [x, y],\r\n             * returning both the x and y of the point plus its distance from\r\n             * the supplied point, and its location along the length of the\r\n             * path inscribed by the segment.  This implementation returns\r\n             * Infinity for distance and null values for everything else;\r\n             * subclasses are expected to override.\r\n             */this.findClosestPointOnPath=function(x,y){return{d:Infinity,x:null,y:null,l:null};};this.getBounds=function(){return{minX:Math.min(params.x1,params.x2),minY:Math.min(params.y1,params.y2),maxX:Math.max(params.x1,params.x2),maxY:Math.max(params.y1,params.y2)};};},Straight:function Straight(params){var _super=_jp.Segments.AbstractSegment.apply(this,arguments),length,m,m2,x1,x2,y1,y2,_recalc=function _recalc(){length=Math.sqrt(Math.pow(x2-x1,2)+Math.pow(y2-y1,2));m=_jg.gradient({x:x1,y:y1},{x:x2,y:y2});m2=-1/m;};this.type="Straight";this.getLength=function(){return length;};this.getGradient=function(){return m;};this.getCoordinates=function(){return{x1:x1,y1:y1,x2:x2,y2:y2};};this.setCoordinates=function(coords){x1=coords.x1;y1=coords.y1;x2=coords.x2;y2=coords.y2;_recalc();};this.setCoordinates({x1:params.x1,y1:params.y1,x2:params.x2,y2:params.y2});this.getBounds=function(){return{minX:Math.min(x1,x2),minY:Math.min(y1,y2),maxX:Math.max(x1,x2),maxY:Math.max(y1,y2)};};/**\r\n             * returns the point on the segment\'s path that is \'location\' along the length of the path, where \'location\' is a decimal from\r\n             * 0 to 1 inclusive. for the straight line segment this is simple maths.\r\n             */this.pointOnPath=function(location,absolute){if(location===0&&!absolute){return{x:x1,y:y1};}else if(location===1&&!absolute){return{x:x2,y:y2};}else{var l=absolute?location>0?location:length+location:location*length;return _jg.pointOnLine({x:x1,y:y1},{x:x2,y:y2},l);}};/**\r\n             * returns the gradient of the segment at the given point - which for us is constant.\r\n             */this.gradientAtPoint=function(_){return m;};/**\r\n             * returns the point on the segment\'s path that is \'distance\' along the length of the path from \'location\', where\r\n             * \'location\' is a decimal from 0 to 1 inclusive, and \'distance\' is a number of pixels.\r\n             * this hands off to jsPlumbUtil to do the maths, supplying two points and the distance.\r\n             */this.pointAlongPathFrom=function(location,distance,absolute){var p=this.pointOnPath(location,absolute),farAwayPoint=distance<=0?{x:x1,y:y1}:{x:x2,y:y2};/*\r\n                 location == 1 ? {\r\n                 x:x1 + ((x2 - x1) * 10),\r\n                 y:y1 + ((y1 - y2) * 10)\r\n                 } :\r\n                 */if(distance<=0&&Math.abs(distance)>1){distance*=-1;}return _jg.pointOnLine(p,farAwayPoint,distance);};// is c between a and b?\nvar within=function within(a,b,c){return c>=Math.min(a,b)&&c<=Math.max(a,b);};// find which of a and b is closest to c\nvar closest=function closest(a,b,c){return Math.abs(c-a)<Math.abs(c-b)?a:b;};/**\r\n             Function: findClosestPointOnPath\r\n             Finds the closest point on this segment to [x,y]. See\r\n             notes on this method in AbstractSegment.\r\n             */this.findClosestPointOnPath=function(x,y){var out={d:Infinity,x:null,y:null,l:null,x1:x1,x2:x2,y1:y1,y2:y2};if(m===0){out.y=y1;out.x=within(x1,x2,x)?x:closest(x1,x2,x);}else if(m===Infinity||m===-Infinity){out.x=x1;out.y=within(y1,y2,y)?y:closest(y1,y2,y);}else{// closest point lies on normal from given point to this line.  \nvar b=y1-m*x1,b2=y-m2*x,// y1 = m.x1 + b and y1 = m2.x1 + b2\n// so m.x1 + b = m2.x1 + b2\n// x1(m - m2) = b2 - b\n// x1 = (b2 - b) / (m - m2)\n_x1=(b2-b)/(m-m2),_y1=m*_x1+b;out.x=within(x1,x2,_x1)?_x1:closest(x1,x2,_x1);//_x1;\nout.y=within(y1,y2,_y1)?_y1:closest(y1,y2,_y1);//_y1;\n}var fractionInSegment=_jg.lineLength([out.x,out.y],[x1,y1]);out.d=_jg.lineLength([x,y],[out.x,out.y]);out.l=fractionInSegment/length;return out;};},/*\r\n         Arc Segment. You need to supply:\r\n\r\n         r   -   radius\r\n         cx  -   center x for the arc\r\n         cy  -   center y for the arc\r\n         ac  -   whether the arc is anticlockwise or not. default is clockwise.\r\n\r\n         and then either:\r\n\r\n         startAngle  -   startAngle for the arc.\r\n         endAngle    -   endAngle for the arc.\r\n\r\n         or:\r\n\r\n         x1          -   x for start point\r\n         y1          -   y for start point\r\n         x2          -   x for end point\r\n         y2          -   y for end point\r\n\r\n         */Arc:function Arc(params){var _super=_jp.Segments.AbstractSegment.apply(this,arguments),_calcAngle=function _calcAngle(_x,_y){return _jg.theta([params.cx,params.cy],[_x,_y]);},_calcAngleForLocation=function _calcAngleForLocation(segment,location){if(segment.anticlockwise){var sa=segment.startAngle<segment.endAngle?segment.startAngle+TWO_PI:segment.startAngle,s=Math.abs(sa-segment.endAngle);return sa-s*location;}else{var ea=segment.endAngle<segment.startAngle?segment.endAngle+TWO_PI:segment.endAngle,ss=Math.abs(ea-segment.startAngle);return segment.startAngle+ss*location;}},TWO_PI=2*Math.PI;this.radius=params.r;this.anticlockwise=params.ac;this.type="Arc";if(params.startAngle&&params.endAngle){this.startAngle=params.startAngle;this.endAngle=params.endAngle;this.x1=params.cx+this.radius*Math.cos(params.startAngle);this.y1=params.cy+this.radius*Math.sin(params.startAngle);this.x2=params.cx+this.radius*Math.cos(params.endAngle);this.y2=params.cy+this.radius*Math.sin(params.endAngle);}else{this.startAngle=_calcAngle(params.x1,params.y1);this.endAngle=_calcAngle(params.x2,params.y2);this.x1=params.x1;this.y1=params.y1;this.x2=params.x2;this.y2=params.y2;}if(this.endAngle<0){this.endAngle+=TWO_PI;}if(this.startAngle<0){this.startAngle+=TWO_PI;}// segment is used by vml     \n//this.segment = _jg.quadrant([this.x1, this.y1], [this.x2, this.y2]);\n// we now have startAngle and endAngle as positive numbers, meaning the\n// absolute difference (|d|) between them is the sweep (s) of this arc, unless the\n// arc is \'anticlockwise\' in which case \'s\' is given by 2PI - |d|.\nvar ea=this.endAngle<this.startAngle?this.endAngle+TWO_PI:this.endAngle;this.sweep=Math.abs(ea-this.startAngle);if(this.anticlockwise){this.sweep=TWO_PI-this.sweep;}var circumference=2*Math.PI*this.radius,frac=this.sweep/TWO_PI,length=circumference*frac;this.getLength=function(){return length;};this.getBounds=function(){return{minX:params.cx-params.r,maxX:params.cx+params.r,minY:params.cy-params.r,maxY:params.cy+params.r};};var VERY_SMALL_VALUE=0.0000000001,gentleRound=function gentleRound(n){var f=Math.floor(n),r=Math.ceil(n);if(n-f<VERY_SMALL_VALUE){return f;}else if(r-n<VERY_SMALL_VALUE){return r;}return n;};/**\r\n             * returns the point on the segment\'s path that is \'location\' along the length of the path, where \'location\' is a decimal from\r\n             * 0 to 1 inclusive.\r\n             */this.pointOnPath=function(location,absolute){if(location===0){return{x:this.x1,y:this.y1,theta:this.startAngle};}else if(location===1){return{x:this.x2,y:this.y2,theta:this.endAngle};}if(absolute){location=location/length;}var angle=_calcAngleForLocation(this,location),_x=params.cx+params.r*Math.cos(angle),_y=params.cy+params.r*Math.sin(angle);return{x:gentleRound(_x),y:gentleRound(_y),theta:angle};};/**\r\n             * returns the gradient of the segment at the given point.\r\n             */this.gradientAtPoint=function(location,absolute){var p=this.pointOnPath(location,absolute);var m=_jg.normal([params.cx,params.cy],[p.x,p.y]);if(!this.anticlockwise&&(m===Infinity||m===-Infinity)){m*=-1;}return m;};this.pointAlongPathFrom=function(location,distance,absolute){var p=this.pointOnPath(location,absolute),arcSpan=distance/circumference*2*Math.PI,dir=this.anticlockwise?-1:1,startAngle=p.theta+dir*arcSpan,startX=params.cx+this.radius*Math.cos(startAngle),startY=params.cy+this.radius*Math.sin(startAngle);return{x:startX,y:startY};};},Bezier:function Bezier(params){this.curve=[{x:params.x1,y:params.y1},{x:params.cp1x,y:params.cp1y},{x:params.cp2x,y:params.cp2y},{x:params.x2,y:params.y2}];var _super=_jp.Segments.AbstractSegment.apply(this,arguments);// although this is not a strictly rigorous determination of bounds\n// of a bezier curve, it works for the types of curves that this segment\n// type produces.\nthis.bounds={minX:Math.min(params.x1,params.x2,params.cp1x,params.cp2x),minY:Math.min(params.y1,params.y2,params.cp1y,params.cp2y),maxX:Math.max(params.x1,params.x2,params.cp1x,params.cp2x),maxY:Math.max(params.y1,params.y2,params.cp1y,params.cp2y)};this.type="Bezier";var _translateLocation=function _translateLocation(_curve,location,absolute){if(absolute){location=root.jsBezier.locationAlongCurveFrom(_curve,location>0?0:1,location);}return location;};/**\r\n             * returns the point on the segment\'s path that is \'location\' along the length of the path, where \'location\' is a decimal from\r\n             * 0 to 1 inclusive.\r\n             */this.pointOnPath=function(location,absolute){location=_translateLocation(this.curve,location,absolute);return root.jsBezier.pointOnCurve(this.curve,location);};/**\r\n             * returns the gradient of the segment at the given point.\r\n             */this.gradientAtPoint=function(location,absolute){location=_translateLocation(this.curve,location,absolute);return root.jsBezier.gradientAtPoint(this.curve,location);};this.pointAlongPathFrom=function(location,distance,absolute){location=_translateLocation(this.curve,location,absolute);return root.jsBezier.pointAlongCurveFrom(this.curve,location,distance);};this.getLength=function(){return root.jsBezier.getLength(this.curve);};this.getBounds=function(){return this.bounds;};}};_jp.SegmentRenderer={getPath:function getPath(segment){return{"Straight":function Straight(){var d=segment.getCoordinates();return"M "+d.x1+" "+d.y1+" L "+d.x2+" "+d.y2;},"Bezier":function Bezier(){var d=segment.params;return"M "+d.x1+" "+d.y1+" C "+d.cp1x+" "+d.cp1y+" "+d.cp2x+" "+d.cp2y+" "+d.x2+" "+d.y2;},"Arc":function Arc(){var d=segment.params,laf=segment.sweep>Math.PI?1:0,sf=segment.anticlockwise?0:1;return"M"+segment.x1+" "+segment.y1+" A "+segment.radius+" "+d.r+" 0 "+laf+","+sf+" "+segment.x2+" "+segment.y2;}}[segment.type]();}};/*\r\n     Class: UIComponent\r\n     Superclass for Connector and AbstractEndpoint.\r\n     */var AbstractComponent=function AbstractComponent(){this.resetBounds=function(){this.bounds={minX:Infinity,minY:Infinity,maxX:-Infinity,maxY:-Infinity};};this.resetBounds();};/*\r\n     * Class: Connector\r\n     * Superclass for all Connectors; here is where Segments are managed.  This is exposed on jsPlumb just so it\r\n     * can be accessed from other files. You should not try to instantiate one of these directly.\r\n     *\r\n     * When this class is asked for a pointOnPath, or gradient etc, it must first figure out which segment to dispatch\r\n     * that request to. This is done by keeping track of the total connector length as segments are added, and also\r\n     * their cumulative ratios to the total length.  Then when the right segment is found it is a simple case of dispatching\r\n     * the request to it (and adjusting \'location\' so that it is relative to the beginning of that segment.)\r\n     */_jp.Connectors.AbstractConnector=function(params){AbstractComponent.apply(this,arguments);var segments=[],totalLength=0,segmentProportions=[],segmentProportionalLengths=[],stub=params.stub||0,sourceStub=_ju.isArray(stub)?stub[0]:stub,targetStub=_ju.isArray(stub)?stub[1]:stub,gap=params.gap||0,sourceGap=_ju.isArray(gap)?gap[0]:gap,targetGap=_ju.isArray(gap)?gap[1]:gap,userProvidedSegments=null,paintInfo=null;this.getPathData=function(){var p="";for(var i=0;i<segments.length;i++){p+=_jp.SegmentRenderer.getPath(segments[i]);p+=" ";}return p;};/**\r\n         * Function: findSegmentForPoint\r\n         * Returns the segment that is closest to the given [x,y],\r\n         * null if nothing found.  This function returns a JS\r\n         * object with:\r\n         *\r\n         *   d   -   distance from segment\r\n         *   l   -   proportional location in segment\r\n         *   x   -   x point on the segment\r\n         *   y   -   y point on the segment\r\n         *   s   -   the segment itself.\r\n         */this.findSegmentForPoint=function(x,y){var out={d:Infinity,s:null,x:null,y:null,l:null};for(var i=0;i<segments.length;i++){var _s=segments[i].findClosestPointOnPath(x,y);if(_s.d<out.d){out.d=_s.d;out.l=_s.l;out.x=_s.x;out.y=_s.y;out.s=segments[i];out.x1=_s.x1;out.x2=_s.x2;out.y1=_s.y1;out.y2=_s.y2;out.index=i;}}return out;};var _updateSegmentProportions=function _updateSegmentProportions(){var curLoc=0;for(var i=0;i<segments.length;i++){var sl=segments[i].getLength();segmentProportionalLengths[i]=sl/totalLength;segmentProportions[i]=[curLoc,curLoc+=sl/totalLength];}},/**\r\n             * returns [segment, proportion of travel in segment, segment index] for the segment\r\n             * that contains the point which is \'location\' distance along the entire path, where\r\n             * \'location\' is a decimal between 0 and 1 inclusive. in this connector type, paths\r\n             * are made up of a list of segments, each of which contributes some fraction to\r\n             * the total length.\r\n             * From 1.3.10 this also supports the \'absolute\' property, which lets us specify a location\r\n             * as the absolute distance in pixels, rather than a proportion of the total path.\r\n             */_findSegmentForLocation=function _findSegmentForLocation(location,absolute){if(absolute){location=location>0?location/totalLength:(totalLength+location)/totalLength;}var idx=segmentProportions.length-1,inSegmentProportion=1;for(var i=0;i<segmentProportions.length;i++){if(segmentProportions[i][1]>=location){idx=i;// todo is this correct for all connector path types?\ninSegmentProportion=location===1?1:location===0?0:(location-segmentProportions[i][0])/segmentProportionalLengths[i];break;}}return{segment:segments[idx],proportion:inSegmentProportion,index:idx};},_addSegment=function _addSegment(conn,type,params){if(params.x1===params.x2&&params.y1===params.y2){return;}var s=new _jp.Segments[type](params);segments.push(s);totalLength+=s.getLength();conn.updateBounds(s);},_clearSegments=function _clearSegments(){totalLength=segments.length=segmentProportions.length=segmentProportionalLengths.length=0;};this.setSegments=function(_segs){userProvidedSegments=[];totalLength=0;for(var i=0;i<_segs.length;i++){userProvidedSegments.push(_segs[i]);totalLength+=_segs[i].getLength();}};this.getLength=function(){return totalLength;};var _prepareCompute=function _prepareCompute(params){this.strokeWidth=params.strokeWidth;var segment=_jg.quadrant(params.sourcePos,params.targetPos),swapX=params.targetPos[0]<params.sourcePos[0],swapY=params.targetPos[1]<params.sourcePos[1],lw=params.strokeWidth||1,so=params.sourceEndpoint.anchor.getOrientation(params.sourceEndpoint),to=params.targetEndpoint.anchor.getOrientation(params.targetEndpoint),x=swapX?params.targetPos[0]:params.sourcePos[0],y=swapY?params.targetPos[1]:params.sourcePos[1],w=Math.abs(params.targetPos[0]-params.sourcePos[0]),h=Math.abs(params.targetPos[1]-params.sourcePos[1]);// if either anchor does not have an orientation set, we derive one from their relative\n// positions.  we fix the axis to be the one in which the two elements are further apart, and\n// point each anchor at the other element.  this is also used when dragging a new connection.\nif(so[0]===0&&so[1]===0||to[0]===0&&to[1]===0){var index=w>h?0:1,oIndex=[1,0][index];so=[];to=[];so[index]=params.sourcePos[index]>params.targetPos[index]?-1:1;to[index]=params.sourcePos[index]>params.targetPos[index]?1:-1;so[oIndex]=0;to[oIndex]=0;}var sx=swapX?w+sourceGap*so[0]:sourceGap*so[0],sy=swapY?h+sourceGap*so[1]:sourceGap*so[1],tx=swapX?targetGap*to[0]:w+targetGap*to[0],ty=swapY?targetGap*to[1]:h+targetGap*to[1],oProduct=so[0]*to[0]+so[1]*to[1];var result={sx:sx,sy:sy,tx:tx,ty:ty,lw:lw,xSpan:Math.abs(tx-sx),ySpan:Math.abs(ty-sy),mx:(sx+tx)/2,my:(sy+ty)/2,so:so,to:to,x:x,y:y,w:w,h:h,segment:segment,startStubX:sx+so[0]*sourceStub,startStubY:sy+so[1]*sourceStub,endStubX:tx+to[0]*targetStub,endStubY:ty+to[1]*targetStub,isXGreaterThanStubTimes2:Math.abs(sx-tx)>sourceStub+targetStub,isYGreaterThanStubTimes2:Math.abs(sy-ty)>sourceStub+targetStub,opposite:oProduct===-1,perpendicular:oProduct===0,orthogonal:oProduct===1,sourceAxis:so[0]===0?"y":"x",points:[x,y,w,h,sx,sy,tx,ty],stubs:[sourceStub,targetStub]};result.anchorOrientation=result.opposite?"opposite":result.orthogonal?"orthogonal":"perpendicular";return result;};this.getSegments=function(){return segments;};this.updateBounds=function(segment){var segBounds=segment.getBounds();this.bounds.minX=Math.min(this.bounds.minX,segBounds.minX);this.bounds.maxX=Math.max(this.bounds.maxX,segBounds.maxX);this.bounds.minY=Math.min(this.bounds.minY,segBounds.minY);this.bounds.maxY=Math.max(this.bounds.maxY,segBounds.maxY);};var dumpSegmentsToConsole=function dumpSegmentsToConsole(){console.log("SEGMENTS:");for(var i=0;i<segments.length;i++){console.log(segments[i].type,segments[i].getLength(),segmentProportions[i]);}};this.pointOnPath=function(location,absolute){var seg=_findSegmentForLocation(location,absolute);return seg.segment&&seg.segment.pointOnPath(seg.proportion,false)||[0,0];};this.gradientAtPoint=function(location,absolute){var seg=_findSegmentForLocation(location,absolute);return seg.segment&&seg.segment.gradientAtPoint(seg.proportion,false)||0;};this.pointAlongPathFrom=function(location,distance,absolute){var seg=_findSegmentForLocation(location,absolute);// TODO what happens if this crosses to the next segment?\nreturn seg.segment&&seg.segment.pointAlongPathFrom(seg.proportion,distance,false)||[0,0];};this.compute=function(params){paintInfo=_prepareCompute.call(this,params);_clearSegments();this._compute(paintInfo,params);this.x=paintInfo.points[0];this.y=paintInfo.points[1];this.w=paintInfo.points[2];this.h=paintInfo.points[3];this.segment=paintInfo.segment;_updateSegmentProportions();};return{addSegment:_addSegment,prepareCompute:_prepareCompute,sourceStub:sourceStub,targetStub:targetStub,maxStub:Math.max(sourceStub,targetStub),sourceGap:sourceGap,targetGap:targetGap,maxGap:Math.max(sourceGap,targetGap)};};_ju.extend(_jp.Connectors.AbstractConnector,AbstractComponent);// ********************************* END OF CONNECTOR TYPES *******************************************************************\n// ********************************* ENDPOINT TYPES *******************************************************************\n_jp.Endpoints.AbstractEndpoint=function(params){AbstractComponent.apply(this,arguments);var compute=this.compute=function(anchorPoint,orientation,endpointStyle,connectorPaintStyle){var out=this._compute.apply(this,arguments);this.x=out[0];this.y=out[1];this.w=out[2];this.h=out[3];this.bounds.minX=this.x;this.bounds.minY=this.y;this.bounds.maxX=this.x+this.w;this.bounds.maxY=this.y+this.h;return out;};return{compute:compute,cssClass:params.cssClass};};_ju.extend(_jp.Endpoints.AbstractEndpoint,AbstractComponent);/**\r\n     * Class: Endpoints.Dot\r\n     * A round endpoint, with default radius 10 pixels.\r\n     *//**\r\n     * Function: Constructor\r\n     *\r\n     * Parameters:\r\n     *\r\n     *    radius    -    radius of the endpoint.  defaults to 10 pixels.\r\n     */_jp.Endpoints.Dot=function(params){this.type="Dot";var _super=_jp.Endpoints.AbstractEndpoint.apply(this,arguments);params=params||{};this.radius=params.radius||10;this.defaultOffset=0.5*this.radius;this.defaultInnerRadius=this.radius/3;this._compute=function(anchorPoint,orientation,endpointStyle,connectorPaintStyle){this.radius=endpointStyle.radius||this.radius;var x=anchorPoint[0]-this.radius,y=anchorPoint[1]-this.radius,w=this.radius*2,h=this.radius*2;if(endpointStyle.stroke){var lw=endpointStyle.strokeWidth||1;x-=lw;y-=lw;w+=lw*2;h+=lw*2;}return[x,y,w,h,this.radius];};};_ju.extend(_jp.Endpoints.Dot,_jp.Endpoints.AbstractEndpoint);_jp.Endpoints.Rectangle=function(params){this.type="Rectangle";var _super=_jp.Endpoints.AbstractEndpoint.apply(this,arguments);params=params||{};this.width=params.width||20;this.height=params.height||20;this._compute=function(anchorPoint,orientation,endpointStyle,connectorPaintStyle){var width=endpointStyle.width||this.width,height=endpointStyle.height||this.height,x=anchorPoint[0]-width/2,y=anchorPoint[1]-height/2;return[x,y,width,height];};};_ju.extend(_jp.Endpoints.Rectangle,_jp.Endpoints.AbstractEndpoint);var DOMElementEndpoint=function DOMElementEndpoint(params){_jp.jsPlumbUIComponent.apply(this,arguments);this._jsPlumb.displayElements=[];};_ju.extend(DOMElementEndpoint,_jp.jsPlumbUIComponent,{getDisplayElements:function getDisplayElements(){return this._jsPlumb.displayElements;},appendDisplayElement:function appendDisplayElement(el){this._jsPlumb.displayElements.push(el);}});/**\r\n     * Class: Endpoints.Image\r\n     * Draws an image as the Endpoint.\r\n     *//**\r\n     * Function: Constructor\r\n     *\r\n     * Parameters:\r\n     *\r\n     *    src    -    location of the image to use.\r\n\r\n     TODO: multiple references to self. not sure quite how to get rid of them entirely. perhaps self = null in the cleanup\r\n     function will suffice\r\n\r\n     TODO this class still might leak memory.\r\n\r\n     */_jp.Endpoints.Image=function(params){this.type="Image";DOMElementEndpoint.apply(this,arguments);_jp.Endpoints.AbstractEndpoint.apply(this,arguments);var _onload=params.onload,src=params.src||params.url,clazz=params.cssClass?" "+params.cssClass:"";this._jsPlumb.img=new Image();this._jsPlumb.ready=false;this._jsPlumb.initialized=false;this._jsPlumb.deleted=false;this._jsPlumb.widthToUse=params.width;this._jsPlumb.heightToUse=params.height;this._jsPlumb.endpoint=params.endpoint;this._jsPlumb.img.onload=function(){if(this._jsPlumb!=null){this._jsPlumb.ready=true;this._jsPlumb.widthToUse=this._jsPlumb.widthToUse||this._jsPlumb.img.width;this._jsPlumb.heightToUse=this._jsPlumb.heightToUse||this._jsPlumb.img.height;if(_onload){_onload(this);}}}.bind(this);/*\r\n         Function: setImage\r\n         Sets the Image to use in this Endpoint.\r\n\r\n         Parameters:\r\n         img         -   may be a URL or an Image object\r\n         onload      -   optional; a callback to execute once the image has loaded.\r\n         */this._jsPlumb.endpoint.setImage=function(_img,onload){var s=_img.constructor===String?_img:_img.src;_onload=onload;this._jsPlumb.img.src=s;if(this.canvas!=null){this.canvas.setAttribute("src",this._jsPlumb.img.src);}}.bind(this);this._jsPlumb.endpoint.setImage(src,_onload);this._compute=function(anchorPoint,orientation,endpointStyle,connectorPaintStyle){this.anchorPoint=anchorPoint;if(this._jsPlumb.ready){return[anchorPoint[0]-this._jsPlumb.widthToUse/2,anchorPoint[1]-this._jsPlumb.heightToUse/2,this._jsPlumb.widthToUse,this._jsPlumb.heightToUse];}else{return[0,0,0,0];}};this.canvas=_jp.createElement("img",{position:"absolute",margin:0,padding:0,outline:0},this._jsPlumb.instance.endpointClass+clazz);if(this._jsPlumb.widthToUse){this.canvas.setAttribute("width",this._jsPlumb.widthToUse);}if(this._jsPlumb.heightToUse){this.canvas.setAttribute("height",this._jsPlumb.heightToUse);}this._jsPlumb.instance.appendElement(this.canvas);this.actuallyPaint=function(d,style,anchor){if(!this._jsPlumb.deleted){if(!this._jsPlumb.initialized){this.canvas.setAttribute("src",this._jsPlumb.img.src);this.appendDisplayElement(this.canvas);this._jsPlumb.initialized=true;}var x=this.anchorPoint[0]-this._jsPlumb.widthToUse/2,y=this.anchorPoint[1]-this._jsPlumb.heightToUse/2;_ju.sizeElement(this.canvas,x,y,this._jsPlumb.widthToUse,this._jsPlumb.heightToUse);}};this.paint=function(style,anchor){if(this._jsPlumb!=null){// may have been deleted\nif(this._jsPlumb.ready){this.actuallyPaint(style,anchor);}else{root.setTimeout(function(){this.paint(style,anchor);}.bind(this),200);}}};};_ju.extend(_jp.Endpoints.Image,[DOMElementEndpoint,_jp.Endpoints.AbstractEndpoint],{cleanup:function cleanup(force){if(force){this._jsPlumb.deleted=true;if(this.canvas){this.canvas.parentNode.removeChild(this.canvas);}this.canvas=null;}}});/*\r\n     * Class: Endpoints.Blank\r\n     * An Endpoint that paints nothing (visible) on the screen.  Supports cssClass and hoverClass parameters like all Endpoints.\r\n     */_jp.Endpoints.Blank=function(params){var _super=_jp.Endpoints.AbstractEndpoint.apply(this,arguments);this.type="Blank";DOMElementEndpoint.apply(this,arguments);this._compute=function(anchorPoint,orientation,endpointStyle,connectorPaintStyle){return[anchorPoint[0],anchorPoint[1],10,0];};var clazz=params.cssClass?" "+params.cssClass:"";this.canvas=_jp.createElement("div",{display:"block",width:"1px",height:"1px",background:"transparent",position:"absolute"},this._jsPlumb.instance.endpointClass+clazz);this._jsPlumb.instance.appendElement(this.canvas);this.paint=function(style,anchor){_ju.sizeElement(this.canvas,this.x,this.y,this.w,this.h);};};_ju.extend(_jp.Endpoints.Blank,[_jp.Endpoints.AbstractEndpoint,DOMElementEndpoint],{cleanup:function cleanup(){if(this.canvas&&this.canvas.parentNode){this.canvas.parentNode.removeChild(this.canvas);}}});/*\r\n     * Class: Endpoints.Triangle\r\n     * A triangular Endpoint.\r\n     *//*\r\n     * Function: Constructor\r\n     *\r\n     * Parameters:\r\n     *\r\n     * width   width of the triangle\'s base.  defaults to 55 pixels.\r\n     * height  height of the triangle from base to apex.  defaults to 55 pixels.\r\n     */_jp.Endpoints.Triangle=function(params){this.type="Triangle";_jp.Endpoints.AbstractEndpoint.apply(this,arguments);var self=this;params=params||{};params.width=params.width||55;params.height=params.height||55;this.width=params.width;this.height=params.height;this._compute=function(anchorPoint,orientation,endpointStyle,connectorPaintStyle){var width=endpointStyle.width||self.width,height=endpointStyle.height||self.height,x=anchorPoint[0]-width/2,y=anchorPoint[1]-height/2;return[x,y,width,height];};};// ********************************* END OF ENDPOINT TYPES *******************************************************************\n// ********************************* OVERLAY DEFINITIONS ***********************************************************************    \nvar AbstractOverlay=_jp.Overlays.AbstractOverlay=function(params){this.visible=true;this.isAppendedAtTopLevel=true;this.component=params.component;this.loc=params.location==null?0.5:params.location;this.endpointLoc=params.endpointLocation==null?[0.5,0.5]:params.endpointLocation;this.visible=params.visible!==false;};AbstractOverlay.prototype={cleanup:function cleanup(force){if(force){this.component=null;this.canvas=null;this.endpointLoc=null;}},reattach:function reattach(instance,component){},setVisible:function setVisible(val){this.visible=val;this.component.repaint();},isVisible:function isVisible(){return this.visible;},hide:function hide(){this.setVisible(false);},show:function show(){this.setVisible(true);},incrementLocation:function incrementLocation(amount){this.loc+=amount;this.component.repaint();},setLocation:function setLocation(l){this.loc=l;this.component.repaint();},getLocation:function getLocation(){return this.loc;},updateFrom:function updateFrom(){}};/*\r\n     * Class: Overlays.Arrow\r\n     *\r\n     * An arrow overlay, defined by four points: the head, the two sides of the tail, and a \'foldback\' point at some distance along the length\r\n     * of the arrow that lines from each tail point converge into.  The foldback point is defined using a decimal that indicates some fraction\r\n     * of the length of the arrow and has a default value of 0.623.  A foldback point value of 1 would mean that the arrow had a straight line\r\n     * across the tail.\r\n     *//*\r\n     * @constructor\r\n     *\r\n     * @param {Object} params Constructor params.\r\n     * @param {Number} [params.length] Distance in pixels from head to tail baseline. default 20.\r\n     * @param {Number} [params.width] Width in pixels of the tail baseline. default 20.\r\n     * @param {String} [params.fill] Style to use when filling the arrow.  defaults to "black".\r\n     * @param {String} [params.stroke] Style to use when stroking the arrow. defaults to null, which means the arrow is not stroked.\r\n     * @param {Number} [params.stroke-width] Line width to use when stroking the arrow. defaults to 1, but only used if stroke is not null.\r\n     * @param {Number} [params.foldback] Distance (as a decimal from 0 to 1 inclusive) along the length of the arrow marking the point the tail points should fold back to.  defaults to 0.623.\r\n     * @param {Number} [params.location] Distance (as a decimal from 0 to 1 inclusive) marking where the arrow should sit on the connector. defaults to 0.5.\r\n     * @param {NUmber} [params.direction] Indicates the direction the arrow points in. valid values are -1 and 1; 1 is default.\r\n     */_jp.Overlays.Arrow=function(params){this.type="Arrow";AbstractOverlay.apply(this,arguments);this.isAppendedAtTopLevel=false;params=params||{};var self=this;this.length=params.length||20;this.width=params.width||20;this.id=params.id;var direction=(params.direction||1)<0?-1:1,paintStyle=params.paintStyle||{"stroke-width":1},// how far along the arrow the lines folding back in come to. default is 62.3%.\nfoldback=params.foldback||0.623;this.computeMaxSize=function(){return self.width*1.5;};this.elementCreated=function(p,component){this.path=p;if(params.events){for(var i in params.events){_jp.on(p,i,params.events[i]);}}};this.draw=function(component,currentConnectionPaintStyle){var hxy,mid,txy,tail,cxy;if(component.pointAlongPathFrom){if(_ju.isString(this.loc)||this.loc>1||this.loc<0){var l=parseInt(this.loc,10),fromLoc=this.loc<0?1:0;hxy=component.pointAlongPathFrom(fromLoc,l,false);mid=component.pointAlongPathFrom(fromLoc,l-direction*this.length/2,false);txy=_jg.pointOnLine(hxy,mid,this.length);}else if(this.loc===1){hxy=component.pointOnPath(this.loc);mid=component.pointAlongPathFrom(this.loc,-this.length);txy=_jg.pointOnLine(hxy,mid,this.length);if(direction===-1){var _=txy;txy=hxy;hxy=_;}}else if(this.loc===0){txy=component.pointOnPath(this.loc);mid=component.pointAlongPathFrom(this.loc,this.length);hxy=_jg.pointOnLine(txy,mid,this.length);if(direction===-1){var __=txy;txy=hxy;hxy=__;}}else{hxy=component.pointAlongPathFrom(this.loc,direction*this.length/2);mid=component.pointOnPath(this.loc);txy=_jg.pointOnLine(hxy,mid,this.length);}tail=_jg.perpendicularLineTo(hxy,txy,this.width);cxy=_jg.pointOnLine(hxy,txy,foldback*this.length);var d={hxy:hxy,tail:tail,cxy:cxy},stroke=paintStyle.stroke||currentConnectionPaintStyle.stroke,fill=paintStyle.fill||currentConnectionPaintStyle.stroke,lineWidth=paintStyle.strokeWidth||currentConnectionPaintStyle.strokeWidth;return{component:component,d:d,"stroke-width":lineWidth,stroke:stroke,fill:fill,minX:Math.min(hxy.x,tail[0].x,tail[1].x),maxX:Math.max(hxy.x,tail[0].x,tail[1].x),minY:Math.min(hxy.y,tail[0].y,tail[1].y),maxY:Math.max(hxy.y,tail[0].y,tail[1].y)};}else{return{component:component,minX:0,maxX:0,minY:0,maxY:0};}};};_ju.extend(_jp.Overlays.Arrow,AbstractOverlay,{updateFrom:function updateFrom(d){this.length=d.length||this.length;this.width=d.width||this.width;this.direction=d.direction!=null?d.direction:this.direction;this.foldback=d.foldback||this.foldback;}});/*\r\n     * Class: Overlays.PlainArrow\r\n     *\r\n     * A basic arrow.  This is in fact just one instance of the more generic case in which the tail folds back on itself to some\r\n     * point along the length of the arrow: in this case, that foldback point is the full length of the arrow.  so it just does\r\n     * a \'call\' to Arrow with foldback set appropriately.\r\n     *//*\r\n     * Function: Constructor\r\n     * See <Overlays.Arrow> for allowed parameters for this overlay.\r\n     */_jp.Overlays.PlainArrow=function(params){params=params||{};var p=_jp.extend(params,{foldback:1});_jp.Overlays.Arrow.call(this,p);this.type="PlainArrow";};_ju.extend(_jp.Overlays.PlainArrow,_jp.Overlays.Arrow);/*\r\n     * Class: Overlays.Diamond\r\n     * \r\n     * A diamond. Like PlainArrow, this is a concrete case of the more generic case of the tail points converging on some point...it just\r\n     * happens that in this case, that point is greater than the length of the the arrow.\r\n     *\r\n     *      this could probably do with some help with positioning...due to the way it reuses the Arrow paint code, what Arrow thinks is the\r\n     *      center is actually 1/4 of the way along for this guy.  but we don\'t have any knowledge of pixels at this point, so we\'re kind of\r\n     *      stuck when it comes to helping out the Arrow class. possibly we could pass in a \'transpose\' parameter or something. the value\r\n     *      would be -l/4 in this case - move along one quarter of the total length.\r\n     *//*\r\n     * Function: Constructor\r\n     * See <Overlays.Arrow> for allowed parameters for this overlay.\r\n     */_jp.Overlays.Diamond=function(params){params=params||{};var l=params.length||40,p=_jp.extend(params,{length:l/2,foldback:2});_jp.Overlays.Arrow.call(this,p);this.type="Diamond";};_ju.extend(_jp.Overlays.Diamond,_jp.Overlays.Arrow);var _getDimensions=function _getDimensions(component,forceRefresh){if(component._jsPlumb.cachedDimensions==null||forceRefresh){component._jsPlumb.cachedDimensions=component.getDimensions();}return component._jsPlumb.cachedDimensions;};// abstract superclass for overlays that add an element to the DOM.\nvar AbstractDOMOverlay=function AbstractDOMOverlay(params){_jp.jsPlumbUIComponent.apply(this,arguments);AbstractOverlay.apply(this,arguments);// hand off fired events to associated component.\nvar _f=this.fire;this.fire=function(){_f.apply(this,arguments);if(this.component){this.component.fire.apply(this.component,arguments);}};this.detached=false;this.id=params.id;this._jsPlumb.div=null;this._jsPlumb.initialised=false;this._jsPlumb.component=params.component;this._jsPlumb.cachedDimensions=null;this._jsPlumb.create=params.create;this._jsPlumb.initiallyInvisible=params.visible===false;this.getElement=function(){if(this._jsPlumb.div==null){var div=this._jsPlumb.div=_jp.getElement(this._jsPlumb.create(this._jsPlumb.component));div.style.position="absolute";div.className=this._jsPlumb.instance.overlayClass+" "+(this.cssClass?this.cssClass:params.cssClass?params.cssClass:"");this._jsPlumb.instance.appendElement(div);this._jsPlumb.instance.getId(div);this.canvas=div;// in IE the top left corner is what it placed at the desired location.  This will not\n// be fixed. IE8 is not going to be supported for much longer.\nvar ts="translate(-50%, -50%)";div.style.webkitTransform=ts;div.style.mozTransform=ts;div.style.msTransform=ts;div.style.oTransform=ts;div.style.transform=ts;// write the related component into the created element\ndiv._jsPlumb=this;if(params.visible===false){div.style.display="none";}}return this._jsPlumb.div;};this.draw=function(component,currentConnectionPaintStyle,absolutePosition){var td=_getDimensions(this);if(td!=null&&td.length===2){var cxy={x:0,y:0};// absolutePosition would have been set by a call to connection.setAbsoluteOverlayPosition.\nif(absolutePosition){cxy={x:absolutePosition[0],y:absolutePosition[1]};}else if(component.pointOnPath){var loc=this.loc,absolute=false;if(_ju.isString(this.loc)||this.loc<0||this.loc>1){loc=parseInt(this.loc,10);absolute=true;}cxy=component.pointOnPath(loc,absolute);// a connection\n}else{var locToUse=this.loc.constructor===Array?this.loc:this.endpointLoc;cxy={x:locToUse[0]*component.w,y:locToUse[1]*component.h};}var minx=cxy.x-td[0]/2,miny=cxy.y-td[1]/2;return{component:component,d:{minx:minx,miny:miny,td:td,cxy:cxy},minX:minx,maxX:minx+td[0],minY:miny,maxY:miny+td[1]};}else{return{minX:0,maxX:0,minY:0,maxY:0};}};};_ju.extend(AbstractDOMOverlay,[_jp.jsPlumbUIComponent,AbstractOverlay],{getDimensions:function getDimensions(){return[1,1];},setVisible:function setVisible(state){if(this._jsPlumb.div){this._jsPlumb.div.style.display=state?"block":"none";// if initially invisible, dimensions are 0,0 and never get updated\nif(state&&this._jsPlumb.initiallyInvisible){_getDimensions(this,true);this.component.repaint();this._jsPlumb.initiallyInvisible=false;}}},/*\r\n         * Function: clearCachedDimensions\r\n         * Clears the cached dimensions for the label. As a performance enhancement, label dimensions are\r\n         * cached from 1.3.12 onwards. The cache is cleared when you change the label text, of course, but\r\n         * there are other reasons why the text dimensions might change - if you make a change through CSS, for\r\n         * example, you might change the font size.  in that case you should explicitly call this method.\r\n         */clearCachedDimensions:function clearCachedDimensions(){this._jsPlumb.cachedDimensions=null;},cleanup:function cleanup(force){if(force){if(this._jsPlumb.div!=null){this._jsPlumb.div._jsPlumb=null;this._jsPlumb.instance.removeElement(this._jsPlumb.div);}}else{// if not a forced cleanup, just detach child from parent for now.\nif(this._jsPlumb&&this._jsPlumb.div&&this._jsPlumb.div.parentNode){this._jsPlumb.div.parentNode.removeChild(this._jsPlumb.div);}this.detached=true;}},reattach:function reattach(instance,component){if(this._jsPlumb.div!=null){instance.getContainer().appendChild(this._jsPlumb.div);}this.detached=false;},computeMaxSize:function computeMaxSize(){var td=_getDimensions(this);return Math.max(td[0],td[1]);},paint:function paint(p,containerExtents){if(!this._jsPlumb.initialised){this.getElement();p.component.appendDisplayElement(this._jsPlumb.div);this._jsPlumb.initialised=true;if(this.detached){this._jsPlumb.div.parentNode.removeChild(this._jsPlumb.div);}}this._jsPlumb.div.style.left=p.component.x+p.d.minx+"px";this._jsPlumb.div.style.top=p.component.y+p.d.miny+"px";}});/*\r\n     * Class: Overlays.Custom\r\n     * A Custom overlay. You supply a \'create\' function which returns some DOM element, and jsPlumb positions it.\r\n     * The \'create\' function is passed a Connection or Endpoint.\r\n     *//*\r\n     * Function: Constructor\r\n     * \r\n     * Parameters:\r\n     * create - function for jsPlumb to call that returns a DOM element.\r\n     * location - distance (as a decimal from 0 to 1 inclusive) marking where the label should sit on the connector. defaults to 0.5.\r\n     * id - optional id to use for later retrieval of this overlay.\r\n     *\r\n     */_jp.Overlays.Custom=function(params){this.type="Custom";AbstractDOMOverlay.apply(this,arguments);};_ju.extend(_jp.Overlays.Custom,AbstractDOMOverlay);_jp.Overlays.GuideLines=function(){var self=this;self.length=50;self.strokeWidth=5;this.type="GuideLines";AbstractOverlay.apply(this,arguments);_jp.jsPlumbUIComponent.apply(this,arguments);this.draw=function(connector,currentConnectionPaintStyle){var head=connector.pointAlongPathFrom(self.loc,self.length/2),mid=connector.pointOnPath(self.loc),tail=_jg.pointOnLine(head,mid,self.length),tailLine=_jg.perpendicularLineTo(head,tail,40),headLine=_jg.perpendicularLineTo(tail,head,20);return{connector:connector,head:head,tail:tail,headLine:headLine,tailLine:tailLine,minX:Math.min(head.x,tail.x,headLine[0].x,headLine[1].x),minY:Math.min(head.y,tail.y,headLine[0].y,headLine[1].y),maxX:Math.max(head.x,tail.x,headLine[0].x,headLine[1].x),maxY:Math.max(head.y,tail.y,headLine[0].y,headLine[1].y)};};// this.cleanup = function() { };  // nothing to clean up for GuideLines\n};/*\r\n     * Class: Overlays.Label\r\n\r\n     *//*\r\n     * Function: Constructor\r\n     * \r\n     * Parameters:\r\n     * cssClass - optional css class string to append to css class. This string is appended "as-is", so you can of course have multiple classes\r\n     *             defined.  This parameter is preferred to using labelStyle, borderWidth and borderStyle.\r\n     * label - the label to paint.  May be a string or a function that returns a string.  Nothing will be painted if your label is null or your\r\n     *         label function returns null.  empty strings _will_ be painted.\r\n     * location - distance (as a decimal from 0 to 1 inclusive) marking where the label should sit on the connector. defaults to 0.5.\r\n     * id - optional id to use for later retrieval of this overlay.\r\n     * \r\n     *\r\n     */_jp.Overlays.Label=function(params){this.labelStyle=params.labelStyle;var labelWidth=null,labelHeight=null,labelText=null,labelPadding=null;this.cssClass=this.labelStyle!=null?this.labelStyle.cssClass:null;var p=_jp.extend({create:function create(){return _jp.createElement("div");}},params);_jp.Overlays.Custom.call(this,p);this.type="Label";this.label=params.label||"";this.labelText=null;if(this.labelStyle){var el=this.getElement();this.labelStyle.font=this.labelStyle.font||"12px sans-serif";el.style.font=this.labelStyle.font;el.style.color=this.labelStyle.color||"black";if(this.labelStyle.fill){el.style.background=this.labelStyle.fill;}if(this.labelStyle.borderWidth>0){var dStyle=this.labelStyle.borderStyle?this.labelStyle.borderStyle:"black";el.style.border=this.labelStyle.borderWidth+"px solid "+dStyle;}if(this.labelStyle.padding){el.style.padding=this.labelStyle.padding;}}};_ju.extend(_jp.Overlays.Label,_jp.Overlays.Custom,{cleanup:function cleanup(force){if(force){this.div=null;this.label=null;this.labelText=null;this.cssClass=null;this.labelStyle=null;}},getLabel:function getLabel(){return this.label;},/*\r\n         * Function: setLabel\r\n         * sets the label\'s, um, label.  you would think i\'d call this function\r\n         * \'setText\', but you can pass either a Function or a String to this, so\r\n         * it makes more sense as \'setLabel\'. This uses innerHTML on the label div, so keep\r\n         * that in mind if you need escaped HTML.\r\n         */setLabel:function setLabel(l){this.label=l;this.labelText=null;this.clearCachedDimensions();this.update();this.component.repaint();},getDimensions:function getDimensions(){this.update();return AbstractDOMOverlay.prototype.getDimensions.apply(this,arguments);},update:function update(){if(typeof this.label==="function"){var lt=this.label(this);this.getElement().innerHTML=lt.replace(/\\r\\n/g,"<br/>");}else{if(this.labelText==null){this.labelText=this.label;this.getElement().innerHTML=this.labelText.replace(/\\r\\n/g,"<br/>");}}},updateFrom:function updateFrom(d){if(d.label!=null){this.setLabel(d.label);}}});// ********************************* END OF OVERLAY DEFINITIONS ***********************************************************************\n}).call(typeof window!==\'undefined\'?window:this);/*\r\n * This file contains the base class for library adapters.\r\n *\r\n * Copyright (c) 2010 - 2018 jsPlumb (hello@jsplumbtoolkit.com)\r\n *\r\n * https://jsplumbtoolkit.com\r\n * https://github.com/jsplumb/jsplumb\r\n *\r\n * Dual licensed under the MIT and GPL2 licenses.\r\n */;(function(){"use strict";var root=this,_jp=root.jsPlumb;var _getEventManager=function _getEventManager(instance){var e=instance._mottle;if(!e){e=instance._mottle=new root.Mottle();}return e;};_jp.extend(root.jsPlumbInstance.prototype,{getEventManager:function getEventManager(){return _getEventManager(this);},on:function on(el,event,callback){// TODO: here we would like to map the tap event if we know its\n// an internal bind to a click. we have to know its internal because only\n// then can we be sure that the UP event wont be consumed (tap is a synthesized\n// event from a mousedown followed by a mouseup).\n//event = { "click":"tap", "dblclick":"dbltap"}[event] || event;\nthis.getEventManager().on.apply(this,arguments);return this;},off:function off(el,event,callback){this.getEventManager().off.apply(this,arguments);return this;}});}).call(typeof window!==\'undefined\'?window:this);/*\r\n * Copyright (c) 2010 - 2018 jsPlumb (hello@jsplumbtoolkit.com)\r\n *\r\n * https://jsplumbtoolkit.com\r\n * https://github.com/jsplumb/jsplumb\r\n *\r\n * Dual licensed under the MIT and GPL2 licenses.\r\n */;(function(){"use strict";var root=this,_ju=root.jsPlumbUtil,_jpi=root.jsPlumbInstance;var GROUP_COLLAPSED_CLASS="jtk-group-collapsed";var GROUP_EXPANDED_CLASS="jtk-group-expanded";var GROUP_CONTAINER_SELECTOR="[jtk-group-content]";var ELEMENT_DRAGGABLE_EVENT="elementDraggable";var STOP="stop";var REVERT="revert";var GROUP_MANAGER="_groupManager";var GROUP="_jsPlumbGroup";var GROUP_DRAG_SCOPE="_jsPlumbGroupDrag";var EVT_CHILD_ADDED="group:addMember";var EVT_CHILD_REMOVED="group:removeMember";var EVT_GROUP_ADDED="group:add";var EVT_GROUP_REMOVED="group:remove";var EVT_EXPAND="group:expand";var EVT_COLLAPSE="group:collapse";var EVT_GROUP_DRAG_STOP="groupDragStop";var EVT_CONNECTION_MOVED="connectionMoved";var EVT_INTERNAL_CONNECTION_DETACHED="internal.connectionDetached";var CMD_REMOVE_ALL="removeAll";var CMD_ORPHAN_ALL="orphanAll";var CMD_SHOW="show";var CMD_HIDE="hide";var GroupManager=function GroupManager(_jsPlumb){var _managedGroups={},_connectionSourceMap={},_connectionTargetMap={},self=this;_jsPlumb.bind("connection",function(p){if(p.source[GROUP]!=null&&p.target[GROUP]!=null&&p.source[GROUP]===p.target[GROUP]){_connectionSourceMap[p.connection.id]=p.source[GROUP];_connectionTargetMap[p.connection.id]=p.source[GROUP];}else{if(p.source[GROUP]!=null){_ju.suggest(p.source[GROUP].connections.source,p.connection);_connectionSourceMap[p.connection.id]=p.source[GROUP];}if(p.target[GROUP]!=null){_ju.suggest(p.target[GROUP].connections.target,p.connection);_connectionTargetMap[p.connection.id]=p.target[GROUP];}}});function _cleanupDetachedConnection(conn){delete conn.proxies;var group=_connectionSourceMap[conn.id],f;if(group!=null){f=function f(c){return c.id===conn.id;};_ju.removeWithFunction(group.connections.source,f);_ju.removeWithFunction(group.connections.target,f);delete _connectionSourceMap[conn.id];}group=_connectionTargetMap[conn.id];if(group!=null){f=function f(c){return c.id===conn.id;};_ju.removeWithFunction(group.connections.source,f);_ju.removeWithFunction(group.connections.target,f);delete _connectionTargetMap[conn.id];}}_jsPlumb.bind(EVT_INTERNAL_CONNECTION_DETACHED,function(p){_cleanupDetachedConnection(p.connection);});_jsPlumb.bind(EVT_CONNECTION_MOVED,function(p){var connMap=p.index===0?_connectionSourceMap:_connectionTargetMap;var group=connMap[p.connection.id];if(group){var list=group.connections[p.index===0?"source":"target"];var idx=list.indexOf(p.connection);if(idx!==-1){list.splice(idx,1);}}});this.addGroup=function(group){_jsPlumb.addClass(group.getEl(),GROUP_EXPANDED_CLASS);_managedGroups[group.id]=group;group.manager=this;_updateConnectionsForGroup(group);_jsPlumb.fire(EVT_GROUP_ADDED,{group:group});};this.addToGroup=function(group,el,doNotFireEvent){group=this.getGroup(group);if(group){//group.add(el, doNotFireEvent);\nvar groupEl=group.getEl();if(el._isJsPlumbGroup){return;}var currentGroup=el._jsPlumbGroup;// if already a member of this group, do nothing\nif(currentGroup!==group){var elpos=_jsPlumb.getOffset(el,true);var cpos=group.collapsed?_jsPlumb.getOffset(groupEl,true):_jsPlumb.getOffset(group.getDragArea(),true);// otherwise, transfer to this group.\nif(currentGroup!=null){currentGroup.remove(el,doNotFireEvent);self.updateConnectionsForGroup(currentGroup);}group.add(el,doNotFireEvent);var handleDroppedConnections=function handleDroppedConnections(list,index){var oidx=index===0?1:0;list.each(function(c){c.setVisible(false);if(c.endpoints[oidx].element._jsPlumbGroup===group){c.endpoints[oidx].setVisible(false);self.expandConnection(c,oidx,group);}else{c.endpoints[index].setVisible(false);self.collapseConnection(c,index,group);}});};if(group.collapsed){handleDroppedConnections(_jsPlumb.select({source:el}),0);handleDroppedConnections(_jsPlumb.select({target:el}),1);}var elId=_jsPlumb.getId(el);_jsPlumb.dragManager.setParent(el,elId,groupEl,_jsPlumb.getId(groupEl),elpos);var newPosition={left:elpos.left-cpos.left,top:elpos.top-cpos.top};_jsPlumb.setPosition(el,newPosition);_jsPlumb.dragManager.revalidateParent(el,elId,elpos);self.updateConnectionsForGroup(group);_jsPlumb.revalidate(elId);setTimeout(function(){_jsPlumb.fire(EVT_CHILD_ADDED,{group:group,el:el});},0);}}};this.removeFromGroup=function(group,el,doNotFireEvent){group=this.getGroup(group);if(group){group.remove(el,null,doNotFireEvent);}};this.getGroup=function(groupId){var group=groupId;if(_ju.isString(groupId)){group=_managedGroups[groupId];if(group==null){throw new TypeError("No such group ["+groupId+"]");}}return group;};this.getGroups=function(){var o=[];for(var g in _managedGroups){o.push(_managedGroups[g]);}return o;};this.removeGroup=function(group,deleteMembers,manipulateDOM,doNotFireEvent){group=this.getGroup(group);this.expandGroup(group,true);// this reinstates any original connections and removes all proxies, but does not fire an event.\ngroup[deleteMembers?CMD_REMOVE_ALL:CMD_ORPHAN_ALL](manipulateDOM,doNotFireEvent);_jsPlumb.remove(group.getEl());delete _managedGroups[group.id];delete _jsPlumb._groups[group.id];_jsPlumb.fire(EVT_GROUP_REMOVED,{group:group});};this.removeAllGroups=function(deleteMembers,manipulateDOM,doNotFireEvent){for(var g in _managedGroups){this.removeGroup(_managedGroups[g],deleteMembers,manipulateDOM,doNotFireEvent);}};function _setVisible(group,state){var m=group.getMembers();for(var i=0;i<m.length;i++){_jsPlumb[state?CMD_SHOW:CMD_HIDE](m[i],true);}}var _collapseConnection=this.collapseConnection=function(c,index,group){var proxyEp,groupEl=group.getEl(),groupElId=_jsPlumb.getId(groupEl),originalElementId=c.endpoints[index].elementId;var otherEl=c.endpoints[index===0?1:0].element;if(otherEl[GROUP]&&!otherEl[GROUP].shouldProxy()&&otherEl[GROUP].collapsed){return;}c.proxies=c.proxies||[];if(c.proxies[index]){proxyEp=c.proxies[index].ep;}else{proxyEp=_jsPlumb.addEndpoint(groupEl,{endpoint:group.getEndpoint(c,index),anchor:group.getAnchor(c,index),parameters:{isProxyEndpoint:true}});}proxyEp.setDeleteOnEmpty(true);// for this index, stash proxy info: the new EP, the original EP.\nc.proxies[index]={ep:proxyEp,originalEp:c.endpoints[index]};// and advise the anchor manager\nif(index===0){// TODO why are there two differently named methods? Why is there not one method that says "some end of this\n// connection changed (you give the index), and here\'s the new element and element id."\n_jsPlumb.anchorManager.sourceChanged(originalElementId,groupElId,c,groupEl);}else{_jsPlumb.anchorManager.updateOtherEndpoint(c.endpoints[0].elementId,originalElementId,groupElId,c);c.target=groupEl;c.targetId=groupElId;}// detach the original EP from the connection.\nc.proxies[index].originalEp.detachFromConnection(c,null,true);// set the proxy as the new ep\nproxyEp.connections=[c];c.endpoints[index]=proxyEp;c.setVisible(true);};this.collapseGroup=function(group){group=this.getGroup(group);if(group==null||group.collapsed){return;}var groupEl=group.getEl();// todo remove old proxy endpoints first, just in case?\n//group.proxies.length = 0;\n// hide all connections\n_setVisible(group,false);if(group.shouldProxy()){// collapses all connections in a group.\nvar _collapseSet=function _collapseSet(conns,index){for(var i=0;i<conns.length;i++){var c=conns[i];_collapseConnection(c,index,group);}};// setup proxies for sources and targets\n_collapseSet(group.connections.source,0);_collapseSet(group.connections.target,1);}group.collapsed=true;_jsPlumb.removeClass(groupEl,GROUP_EXPANDED_CLASS);_jsPlumb.addClass(groupEl,GROUP_COLLAPSED_CLASS);_jsPlumb.revalidate(groupEl);_jsPlumb.fire(EVT_COLLAPSE,{group:group});};var _expandConnection=this.expandConnection=function(c,index,group){// if no proxies or none for this end of the connection, abort.\nif(c.proxies==null||c.proxies[index]==null){return;}var groupElId=_jsPlumb.getId(group.getEl()),originalElement=c.proxies[index].originalEp.element,originalElementId=c.proxies[index].originalEp.elementId;c.endpoints[index]=c.proxies[index].originalEp;// and advise the anchor manager\nif(index===0){// TODO why are there two differently named methods? Why is there not one method that says "some end of this\n// connection changed (you give the index), and here\'s the new element and element id."\n_jsPlumb.anchorManager.sourceChanged(groupElId,originalElementId,c,originalElement);}else{_jsPlumb.anchorManager.updateOtherEndpoint(c.endpoints[0].elementId,groupElId,originalElementId,c);c.target=originalElement;c.targetId=originalElementId;}// detach the proxy EP from the connection (which will cause it to be removed as we no longer need it)\nc.proxies[index].ep.detachFromConnection(c,null);c.proxies[index].originalEp.addConnection(c);// cleanup\ndelete c.proxies[index];};this.expandGroup=function(group,doNotFireEvent){group=this.getGroup(group);if(group==null||!group.collapsed){return;}var groupEl=group.getEl();_setVisible(group,true);if(group.shouldProxy()){// collapses all connections in a group.\nvar _expandSet=function _expandSet(conns,index){for(var i=0;i<conns.length;i++){var c=conns[i];_expandConnection(c,index,group);}};// setup proxies for sources and targets\n_expandSet(group.connections.source,0);_expandSet(group.connections.target,1);}group.collapsed=false;_jsPlumb.addClass(groupEl,GROUP_EXPANDED_CLASS);_jsPlumb.removeClass(groupEl,GROUP_COLLAPSED_CLASS);_jsPlumb.revalidate(groupEl);this.repaintGroup(group);if(!doNotFireEvent){_jsPlumb.fire(EVT_EXPAND,{group:group});}};this.repaintGroup=function(group){group=this.getGroup(group);var m=group.getMembers();for(var i=0;i<m.length;i++){_jsPlumb.revalidate(m[i]);}};// TODO refactor this with the code that responds to `connection` events.\nfunction _updateConnectionsForGroup(group){var members=group.getMembers();var c1=_jsPlumb.getConnections({source:members,scope:"*"},true);var c2=_jsPlumb.getConnections({target:members,scope:"*"},true);var processed={};group.connections.source.length=0;group.connections.target.length=0;var oneSet=function oneSet(c){for(var i=0;i<c.length;i++){if(processed[c[i].id]){continue;}processed[c[i].id]=true;if(c[i].source._jsPlumbGroup===group){if(c[i].target._jsPlumbGroup!==group){group.connections.source.push(c[i]);}_connectionSourceMap[c[i].id]=group;}else if(c[i].target._jsPlumbGroup===group){group.connections.target.push(c[i]);_connectionTargetMap[c[i].id]=group;}}};oneSet(c1);oneSet(c2);}this.updateConnectionsForGroup=_updateConnectionsForGroup;this.refreshAllGroups=function(){for(var g in _managedGroups){_updateConnectionsForGroup(_managedGroups[g]);_jsPlumb.dragManager.updateOffsets(_jsPlumb.getId(_managedGroups[g].getEl()));}};};/**\r\n     *\r\n     * @param {jsPlumbInstance} _jsPlumb Associated jsPlumb instance.\r\n     * @param {Object} params\r\n     * @param {Element} params.el The DOM element representing the Group.\r\n     * @param {String} [params.id] Optional ID for the Group. A UUID will be assigned as the Group\'s ID if you do not provide one.\r\n     * @param {Boolean} [params.constrain=false] If true, child elements will not be able to be dragged outside of the Group container.\r\n     * @param {Boolean} [params.revert=true] By default, child elements revert to the container if dragged outside. You can change this by setting `revert:false`. This behaviour is also overridden if you set `orphan` or `prune`.\r\n     * @param {Boolean} [params.orphan=false] If true, child elements dropped outside of the Group container will be removed from the Group (but not from the DOM).\r\n     * @param {Boolean} [params.prune=false] If true, child elements dropped outside of the Group container will be removed from the Group and also from the DOM.\r\n     * @param {Boolean} [params.dropOverride=false] If true, a child element that has been dropped onto some other Group will not be subject to the controls imposed by `prune`, `revert` or `orphan`.\r\n     * @constructor\r\n     */var Group=function Group(_jsPlumb,params){var self=this;var el=params.el;this.getEl=function(){return el;};this.id=params.id||_ju.uuid();el._isJsPlumbGroup=true;var getDragArea=this.getDragArea=function(){var da=_jsPlumb.getSelector(el,GROUP_CONTAINER_SELECTOR);return da&&da.length>0?da[0]:el;};var ghost=params.ghost===true;var constrain=ghost||params.constrain===true;var revert=params.revert!==false;var orphan=params.orphan===true;var prune=params.prune===true;var dropOverride=params.dropOverride===true;var proxied=params.proxied!==false;var elements=[];this.connections={source:[],target:[],internal:[]};// this function, and getEndpoint below, are stubs for a future setup in which we can choose endpoint\n// and anchor based upon the connection and the index (source/target) of the endpoint to be proxied.\nthis.getAnchor=function(conn,endpointIndex){return params.anchor||"Continuous";};this.getEndpoint=function(conn,endpointIndex){return params.endpoint||["Dot",{radius:10}];};this.collapsed=false;if(params.draggable!==false){var opts={stop:function stop(params){_jsPlumb.fire(EVT_GROUP_DRAG_STOP,jsPlumb.extend(params,{group:self}));},scope:GROUP_DRAG_SCOPE};if(params.dragOptions){root.jsPlumb.extend(opts,params.dragOptions);}_jsPlumb.draggable(params.el,opts);}if(params.droppable!==false){_jsPlumb.droppable(params.el,{drop:function drop(p){var el=p.drag.el;if(el._isJsPlumbGroup){return;}var currentGroup=el._jsPlumbGroup;if(currentGroup!==self){if(currentGroup!=null){if(currentGroup.overrideDrop(el,self)){return;}}_jsPlumb.getGroupManager().addToGroup(self,el,false);}}});}var _each=function _each(_el,fn){var els=_el.nodeType==null?_el:[_el];for(var i=0;i<els.length;i++){fn(els[i]);}};this.overrideDrop=function(_el,targetGroup){return dropOverride&&(revert||prune||orphan);};this.add=function(_el,doNotFireEvent){var dragArea=getDragArea();_each(_el,function(__el){if(__el._jsPlumbGroup!=null){if(__el._jsPlumbGroup===self){return;}else{__el._jsPlumbGroup.remove(__el,true,doNotFireEvent,false);}}__el._jsPlumbGroup=self;elements.push(__el);// test if draggable and add handlers if so.\nif(_jsPlumb.isAlreadyDraggable(__el)){_bindDragHandlers(__el);}if(__el.parentNode!==dragArea){dragArea.appendChild(__el);}if(!doNotFireEvent){_jsPlumb.fire(EVT_CHILD_ADDED,{group:self,el:__el});}});_jsPlumb.getGroupManager().updateConnectionsForGroup(self);};this.remove=function(el,manipulateDOM,doNotFireEvent,doNotUpdateConnections){_each(el,function(__el){delete __el._jsPlumbGroup;_ju.removeWithFunction(elements,function(e){return e===__el;});if(manipulateDOM){try{self.getDragArea().removeChild(__el);}catch(e){jsPlumbUtil.log("Could not remove element from Group "+e);}}_unbindDragHandlers(__el);if(!doNotFireEvent){_jsPlumb.fire(EVT_CHILD_REMOVED,{group:self,el:__el});}});if(!doNotUpdateConnections){_jsPlumb.getGroupManager().updateConnectionsForGroup(self);}};this.removeAll=function(manipulateDOM,doNotFireEvent){for(var i=0,l=elements.length;i<l;i++){self.remove(elements[0],manipulateDOM,doNotFireEvent,true);}elements.length=0;_jsPlumb.getGroupManager().updateConnectionsForGroup(self);};this.orphanAll=function(){for(var i=0;i<elements.length;i++){_orphan(elements[i]);}elements.length=0;};this.getMembers=function(){return elements;};el[GROUP]=this;_jsPlumb.bind(ELEMENT_DRAGGABLE_EVENT,function(dragParams){// if its for the current group,\nif(dragParams.el._jsPlumbGroup===this){_bindDragHandlers(dragParams.el);}}.bind(this));function _findParent(_el){return _el.offsetParent;}function _isInsideParent(_el,pos){var p=_findParent(_el),s=_jsPlumb.getSize(p),ss=_jsPlumb.getSize(_el),leftEdge=pos[0],rightEdge=leftEdge+ss[0],topEdge=pos[1],bottomEdge=topEdge+ss[1];return rightEdge>0&&leftEdge<s[0]&&bottomEdge>0&&topEdge<s[1];}//\n// orphaning an element means taking it out of the group and adding it to the main jsplumb container.\n//\nfunction _orphan(_el){var id=_jsPlumb.getId(_el);var pos=_jsPlumb.getOffset(_el);_el.parentNode.removeChild(_el);_jsPlumb.getContainer().appendChild(_el);_jsPlumb.setPosition(_el,pos);delete _el._jsPlumbGroup;_unbindDragHandlers(_el);_jsPlumb.dragManager.clearParent(_el,id);}//\n// remove an element from the group, then either prune it from the jsplumb instance, or just orphan it.\n//\nfunction _pruneOrOrphan(p){if(!_isInsideParent(p.el,p.pos)){var group=p.el._jsPlumbGroup;if(prune){_jsPlumb.remove(p.el);}else{_orphan(p.el);}group.remove(p.el);}}//\n// redraws the element\n//\nfunction _revalidate(_el){var id=_jsPlumb.getId(_el);_jsPlumb.revalidate(_el);_jsPlumb.dragManager.revalidateParent(_el,id);}//\n// unbind the group specific drag/revert handlers.\n//\nfunction _unbindDragHandlers(_el){if(!_el._katavorioDrag){return;}if(prune||orphan){_el._katavorioDrag.off(STOP,_pruneOrOrphan);}if(!prune&&!orphan&&revert){_el._katavorioDrag.off(REVERT,_revalidate);_el._katavorioDrag.setRevert(null);}}function _bindDragHandlers(_el){if(!_el._katavorioDrag){return;}if(prune||orphan){_el._katavorioDrag.on(STOP,_pruneOrOrphan);}if(constrain){_el._katavorioDrag.setConstrain(true);}if(ghost){_el._katavorioDrag.setUseGhostProxy(true);}if(!prune&&!orphan&&revert){_el._katavorioDrag.on(REVERT,_revalidate);_el._katavorioDrag.setRevert(function(__el,pos){return!_isInsideParent(__el,pos);});}}this.shouldProxy=function(){return proxied;};_jsPlumb.getGroupManager().addGroup(this);};/**\r\n     * Adds a group to the jsPlumb instance.\r\n     * @method addGroup\r\n     * @param {Object} params\r\n     * @return {Group} The newly created Group.\r\n     */_jpi.prototype.addGroup=function(params){var j=this;j._groups=j._groups||{};if(j._groups[params.id]!=null){throw new TypeError("cannot create Group ["+params.id+"]; a Group with that ID exists");}if(params.el[GROUP]!=null){throw new TypeError("cannot create Group ["+params.id+"]; the given element is already a Group");}var group=new Group(j,params);j._groups[group.id]=group;if(params.collapsed){this.collapseGroup(group);}return group;};/**\r\n     * Add an element to a group.\r\n     * @method addToGroup\r\n     * @param {String} group Group, or ID of the group, to add the element to.\r\n     * @param {Element} el Element to add to the group.\r\n     */_jpi.prototype.addToGroup=function(group,el,doNotFireEvent){var _one=function(_el){var id=this.getId(_el);this.manage(id,_el);this.getGroupManager().addToGroup(group,_el,doNotFireEvent);}.bind(this);if(Array.isArray(el)){for(var i=0;i<el.length;i++){_one(el[i]);}}else{_one(el);}};/**\r\n     * Remove an element from a group.\r\n     * @method removeFromGroup\r\n     * @param {String} group Group, or ID of the group, to remove the element from.\r\n     * @param {Element} el Element to add to the group.\r\n     */_jpi.prototype.removeFromGroup=function(group,el,doNotFireEvent){this.getGroupManager().removeFromGroup(group,el,doNotFireEvent);};/**\r\n     * Remove a group, and optionally remove its members from the jsPlumb instance.\r\n     * @method removeGroup\r\n     * @param {String|Group} group Group to delete, or ID of Group to delete.\r\n     * @param {Boolean} [deleteMembers=false] If true, group members will be removed along with the group. Otherwise they will\r\n     * just be \'orphaned\' (returned to the main container).\r\n     */_jpi.prototype.removeGroup=function(group,deleteMembers,manipulateDOM,doNotFireEvent){this.getGroupManager().removeGroup(group,deleteMembers,manipulateDOM,doNotFireEvent);};/**\r\n     * Remove all groups, and optionally remove their members from the jsPlumb instance.\r\n     * @method removeAllGroup\r\n     * @param {Boolean} [deleteMembers=false] If true, group members will be removed along with the groups. Otherwise they will\r\n     * just be \'orphaned\' (returned to the main container).\r\n     */_jpi.prototype.removeAllGroups=function(deleteMembers,manipulateDOM,doNotFireEvent){this.getGroupManager().removeAllGroups(deleteMembers,manipulateDOM,doNotFireEvent);};/**\r\n     * Get a Group\r\n     * @method getGroup\r\n     * @param {String} groupId ID of the group to get\r\n     * @return {Group} Group with the given ID, null if not found.\r\n     */_jpi.prototype.getGroup=function(groupId){return this.getGroupManager().getGroup(groupId);};/**\r\n     * Gets all the Groups managed by the jsPlumb instance.\r\n     * @returns {Group[]} List of Groups. Empty if none.\r\n     */_jpi.prototype.getGroups=function(){return this.getGroupManager().getGroups();};/**\r\n     * Expands a group element. jsPlumb doesn\'t do "everything" for you here, because what it means to expand a Group\r\n     * will vary from application to application. jsPlumb does these things:\r\n     *\r\n     * - Hides any connections that are internal to the group (connections between members, and connections from member of\r\n     * the group to the group itself)\r\n     * - Proxies all connections for which the source or target is a member of the group.\r\n     * - Hides the proxied connections.\r\n     * - Adds the jtk-group-expanded class to the group\'s element\r\n     * - Removes the jtk-group-collapsed class from the group\'s element.\r\n     *\r\n     * @method expandGroup\r\n     * @param {String|Group} group Group to expand, or ID of Group to expand.\r\n     */_jpi.prototype.expandGroup=function(group){this.getGroupManager().expandGroup(group);};/**\r\n     * Collapses a group element. jsPlumb doesn\'t do "everything" for you here, because what it means to collapse a Group\r\n     * will vary from application to application. jsPlumb does these things:\r\n     *\r\n     * - Shows any connections that are internal to the group (connections between members, and connections from member of\r\n     * the group to the group itself)\r\n     * - Removes proxies for all connections for which the source or target is a member of the group.\r\n     * - Shows the previously proxied connections.\r\n     * - Adds the jtk-group-collapsed class to the group\'s element\r\n     * - Removes the jtk-group-expanded class from the group\'s element.\r\n     *\r\n     * @method expandGroup\r\n     * @param {String|Group} group Group to expand, or ID of Group to expand.\r\n     */_jpi.prototype.collapseGroup=function(groupId){this.getGroupManager().collapseGroup(groupId);};_jpi.prototype.repaintGroup=function(group){this.getGroupManager().repaintGroup(group);};/**\r\n     * Collapses or expands a group element depending on its current state. See notes in the collapseGroup and expandGroup method.\r\n     *\r\n     * @method toggleGroup\r\n     * @param {String|Group} group Group to expand/collapse, or ID of Group to expand/collapse.\r\n     */_jpi.prototype.toggleGroup=function(group){group=this.getGroupManager().getGroup(group);if(group!=null){this.getGroupManager()[group.collapsed?"expandGroup":"collapseGroup"](group);}};//\n// lazy init a group manager for the given jsplumb instance.\n//\n_jpi.prototype.getGroupManager=function(){var mgr=this[GROUP_MANAGER];if(mgr==null){mgr=this[GROUP_MANAGER]=new GroupManager(this);}return mgr;};_jpi.prototype.removeGroupManager=function(){delete this[GROUP_MANAGER];};/**\r\n     * Gets the Group that the given element belongs to, null if none.\r\n     * @method getGroupFor\r\n     * @param {String|Element} el Element, or element ID.\r\n     * @returns {Group} A Group, if found, or null.\r\n     */_jpi.prototype.getGroupFor=function(el){el=this.getElement(el);if(el){return el[GROUP];}};}).call(typeof window!==\'undefined\'?window:this);/*\r\n * This file contains the \'flowchart\' connectors, consisting of vertical and horizontal line segments.\r\n *\r\n * Copyright (c) 2010 - 2018 jsPlumb (hello@jsplumbtoolkit.com)\r\n *\r\n * https://jsplumbtoolkit.com\r\n * https://github.com/jsplumb/jsplumb\r\n *\r\n * Dual licensed under the MIT and GPL2 licenses.\r\n */;(function(){"use strict";var root=this,_jp=root.jsPlumb,_ju=root.jsPlumbUtil;var STRAIGHT="Straight";var ARC="Arc";var Flowchart=function Flowchart(params){this.type="Flowchart";params=params||{};params.stub=params.stub==null?30:params.stub;var segments,_super=_jp.Connectors.AbstractConnector.apply(this,arguments),midpoint=params.midpoint==null?0.5:params.midpoint,alwaysRespectStubs=params.alwaysRespectStubs===true,lastx=null,lasty=null,lastOrientation,cornerRadius=params.cornerRadius!=null?params.cornerRadius:0,// TODO now common between this and AbstractBezierEditor; refactor into superclass?\nloopbackRadius=params.loopbackRadius||25,isLoopbackCurrently=false,sgn=function sgn(n){return n<0?-1:n===0?0:1;},segmentDirections=function segmentDirections(segment){return[sgn(segment[2]-segment[0]),sgn(segment[3]-segment[1])];},/**\r\n             * helper method to add a segment.\r\n             */addSegment=function addSegment(segments,x,y,paintInfo){if(lastx===x&&lasty===y){return;}var lx=lastx==null?paintInfo.sx:lastx,ly=lasty==null?paintInfo.sy:lasty,o=lx===x?"v":"h";lastx=x;lasty=y;segments.push([lx,ly,x,y,o]);},segLength=function segLength(s){return Math.sqrt(Math.pow(s[0]-s[2],2)+Math.pow(s[1]-s[3],2));},_cloneArray=function _cloneArray(a){var _a=[];_a.push.apply(_a,a);return _a;},writeSegments=function writeSegments(conn,segments,paintInfo){var current=null,next,currentDirection,nextDirection;for(var i=0;i<segments.length-1;i++){current=current||_cloneArray(segments[i]);next=_cloneArray(segments[i+1]);currentDirection=segmentDirections(current);nextDirection=segmentDirections(next);if(cornerRadius>0&&current[4]!==next[4]){var radiusToUse=Math.min(cornerRadius,segLength(current),segLength(next));current[2]-=currentDirection[0]*radiusToUse;current[3]-=currentDirection[1]*radiusToUse;next[0]+=nextDirection[0]*radiusToUse;next[1]+=nextDirection[1]*radiusToUse;var ac=currentDirection[1]===nextDirection[0]&&nextDirection[0]===1||currentDirection[1]===nextDirection[0]&&nextDirection[0]===0&&currentDirection[0]!==nextDirection[1]||currentDirection[1]===nextDirection[0]&&nextDirection[0]===-1,sgny=next[1]>current[3]?1:-1,sgnx=next[0]>current[2]?1:-1,sgnEqual=sgny===sgnx,cx=sgnEqual&&ac||!sgnEqual&&!ac?next[0]:current[2],cy=sgnEqual&&ac||!sgnEqual&&!ac?current[3]:next[1];_super.addSegment(conn,STRAIGHT,{x1:current[0],y1:current[1],x2:current[2],y2:current[3]});_super.addSegment(conn,ARC,{r:radiusToUse,x1:current[2],y1:current[3],x2:next[0],y2:next[1],cx:cx,cy:cy,ac:ac});}else{// dx + dy are used to adjust for line width.\nvar dx=current[2]===current[0]?0:current[2]>current[0]?paintInfo.lw/2:-(paintInfo.lw/2),dy=current[3]===current[1]?0:current[3]>current[1]?paintInfo.lw/2:-(paintInfo.lw/2);_super.addSegment(conn,STRAIGHT,{x1:current[0]-dx,y1:current[1]-dy,x2:current[2]+dx,y2:current[3]+dy});}current=next;}if(next!=null){// last segment\n_super.addSegment(conn,STRAIGHT,{x1:next[0],y1:next[1],x2:next[2],y2:next[3]});}};this._compute=function(paintInfo,params){segments=[];lastx=null;lasty=null;lastOrientation=null;var commonStubCalculator=function commonStubCalculator(){return[paintInfo.startStubX,paintInfo.startStubY,paintInfo.endStubX,paintInfo.endStubY];},stubCalculators={perpendicular:commonStubCalculator,orthogonal:commonStubCalculator,opposite:function opposite(axis){var pi=paintInfo,idx=axis==="x"?0:1,areInProximity={"x":function x(){return pi.so[idx]===1&&(pi.startStubX>pi.endStubX&&pi.tx>pi.startStubX||pi.sx>pi.endStubX&&pi.tx>pi.sx)||pi.so[idx]===-1&&(pi.startStubX<pi.endStubX&&pi.tx<pi.startStubX||pi.sx<pi.endStubX&&pi.tx<pi.sx);},"y":function y(){return pi.so[idx]===1&&(pi.startStubY>pi.endStubY&&pi.ty>pi.startStubY||pi.sy>pi.endStubY&&pi.ty>pi.sy)||pi.so[idx]===-1&&(pi.startStubY<pi.endStubY&&pi.ty<pi.startStubY||pi.sy<pi.endStubY&&pi.ty<pi.sy);}};if(!alwaysRespectStubs&&areInProximity[axis]()){return{"x":[(paintInfo.sx+paintInfo.tx)/2,paintInfo.startStubY,(paintInfo.sx+paintInfo.tx)/2,paintInfo.endStubY],"y":[paintInfo.startStubX,(paintInfo.sy+paintInfo.ty)/2,paintInfo.endStubX,(paintInfo.sy+paintInfo.ty)/2]}[axis];}else{return[paintInfo.startStubX,paintInfo.startStubY,paintInfo.endStubX,paintInfo.endStubY];}}};// calculate Stubs.\nvar stubs=stubCalculators[paintInfo.anchorOrientation](paintInfo.sourceAxis),idx=paintInfo.sourceAxis==="x"?0:1,oidx=paintInfo.sourceAxis==="x"?1:0,ss=stubs[idx],oss=stubs[oidx],es=stubs[idx+2],oes=stubs[oidx+2];// add the start stub segment. use stubs for loopback as it will look better, with the loop spaced\n// away from the element.\naddSegment(segments,stubs[0],stubs[1],paintInfo);// if its a loopback and we should treat it differently.\n// if (false && params.sourcePos[0] === params.targetPos[0] && params.sourcePos[1] === params.targetPos[1]) {\n//\n//     // we use loopbackRadius here, as statemachine connectors do.\n//     // so we go radius to the left from stubs[0], then upwards by 2*radius, to the right by 2*radius,\n//     // down by 2*radius, left by radius.\n//     addSegment(segments, stubs[0] - loopbackRadius, stubs[1], paintInfo);\n//     addSegment(segments, stubs[0] - loopbackRadius, stubs[1] - (2 * loopbackRadius), paintInfo);\n//     addSegment(segments, stubs[0] + loopbackRadius, stubs[1] - (2 * loopbackRadius), paintInfo);\n//     addSegment(segments, stubs[0] + loopbackRadius, stubs[1], paintInfo);\n//     addSegment(segments, stubs[0], stubs[1], paintInfo);\n//\n// }\n// else {\nvar midx=paintInfo.startStubX+(paintInfo.endStubX-paintInfo.startStubX)*midpoint,midy=paintInfo.startStubY+(paintInfo.endStubY-paintInfo.startStubY)*midpoint;var orientations={x:[0,1],y:[1,0]},lineCalculators={perpendicular:function perpendicular(axis){var pi=paintInfo,sis={x:[[[1,2,3,4],null,[2,1,4,3]],null,[[4,3,2,1],null,[3,4,1,2]]],y:[[[3,2,1,4],null,[2,3,4,1]],null,[[4,1,2,3],null,[1,4,3,2]]]},stubs={x:[[pi.startStubX,pi.endStubX],null,[pi.endStubX,pi.startStubX]],y:[[pi.startStubY,pi.endStubY],null,[pi.endStubY,pi.startStubY]]},midLines={x:[[midx,pi.startStubY],[midx,pi.endStubY]],y:[[pi.startStubX,midy],[pi.endStubX,midy]]},linesToEnd={x:[[pi.endStubX,pi.startStubY]],y:[[pi.startStubX,pi.endStubY]]},startToEnd={x:[[pi.startStubX,pi.endStubY],[pi.endStubX,pi.endStubY]],y:[[pi.endStubX,pi.startStubY],[pi.endStubX,pi.endStubY]]},startToMidToEnd={x:[[pi.startStubX,midy],[pi.endStubX,midy],[pi.endStubX,pi.endStubY]],y:[[midx,pi.startStubY],[midx,pi.endStubY],[pi.endStubX,pi.endStubY]]},otherStubs={x:[pi.startStubY,pi.endStubY],y:[pi.startStubX,pi.endStubX]},soIdx=orientations[axis][0],toIdx=orientations[axis][1],_so=pi.so[soIdx]+1,_to=pi.to[toIdx]+1,otherFlipped=pi.to[toIdx]===-1&&otherStubs[axis][1]<otherStubs[axis][0]||pi.to[toIdx]===1&&otherStubs[axis][1]>otherStubs[axis][0],stub1=stubs[axis][_so][0],stub2=stubs[axis][_so][1],segmentIndexes=sis[axis][_so][_to];if(pi.segment===segmentIndexes[3]||pi.segment===segmentIndexes[2]&&otherFlipped){return midLines[axis];}else if(pi.segment===segmentIndexes[2]&&stub2<stub1){return linesToEnd[axis];}else if(pi.segment===segmentIndexes[2]&&stub2>=stub1||pi.segment===segmentIndexes[1]&&!otherFlipped){return startToMidToEnd[axis];}else if(pi.segment===segmentIndexes[0]||pi.segment===segmentIndexes[1]&&otherFlipped){return startToEnd[axis];}},orthogonal:function orthogonal(axis,startStub,otherStartStub,endStub,otherEndStub){var pi=paintInfo,extent={"x":pi.so[0]===-1?Math.min(startStub,endStub):Math.max(startStub,endStub),"y":pi.so[1]===-1?Math.min(startStub,endStub):Math.max(startStub,endStub)}[axis];return{"x":[[extent,otherStartStub],[extent,otherEndStub],[endStub,otherEndStub]],"y":[[otherStartStub,extent],[otherEndStub,extent],[otherEndStub,endStub]]}[axis];},opposite:function opposite(axis,ss,oss,es){var pi=paintInfo,otherAxis={"x":"y","y":"x"}[axis],dim={"x":"height","y":"width"}[axis],comparator=pi["is"+axis.toUpperCase()+"GreaterThanStubTimes2"];if(params.sourceEndpoint.elementId===params.targetEndpoint.elementId){var _val=oss+(1-params.sourceEndpoint.anchor[otherAxis])*params.sourceInfo[dim]+_super.maxStub;return{"x":[[ss,_val],[es,_val]],"y":[[_val,ss],[_val,es]]}[axis];}else if(!comparator||pi.so[idx]===1&&ss>es||pi.so[idx]===-1&&ss<es){return{"x":[[ss,midy],[es,midy]],"y":[[midx,ss],[midx,es]]}[axis];}else if(pi.so[idx]===1&&ss<es||pi.so[idx]===-1&&ss>es){return{"x":[[midx,pi.sy],[midx,pi.ty]],"y":[[pi.sx,midy],[pi.tx,midy]]}[axis];}}};// compute the rest of the line\nvar p=lineCalculators[paintInfo.anchorOrientation](paintInfo.sourceAxis,ss,oss,es,oes);if(p){for(var i=0;i<p.length;i++){addSegment(segments,p[i][0],p[i][1],paintInfo);}}// line to end stub\naddSegment(segments,stubs[2],stubs[3],paintInfo);//}\n// end stub to end (common)\naddSegment(segments,paintInfo.tx,paintInfo.ty,paintInfo);// write out the segments.\nwriteSegments(this,segments,paintInfo);};};_jp.Connectors.Flowchart=Flowchart;_ju.extend(_jp.Connectors.Flowchart,_jp.Connectors.AbstractConnector);}).call(typeof window!==\'undefined\'?window:this);/*\r\n * This file contains the code for the Bezier connector type.\r\n *\r\n * Copyright (c) 2010 - 2018 jsPlumb (hello@jsplumbtoolkit.com)\r\n *\r\n * https://jsplumbtoolkit.com\r\n * https://github.com/jsplumb/jsplumb\r\n *\r\n * Dual licensed under the MIT and GPL2 licenses.\r\n */;(function(){"use strict";var root=this,_jp=root.jsPlumb,_ju=root.jsPlumbUtil;_jp.Connectors.AbstractBezierConnector=function(params){params=params||{};var showLoopback=params.showLoopback!==false,curviness=params.curviness||10,margin=params.margin||5,proximityLimit=params.proximityLimit||80,clockwise=params.orientation&&params.orientation==="clockwise",loopbackRadius=params.loopbackRadius||25,isLoopbackCurrently=false,_super;this._compute=function(paintInfo,p){var sp=p.sourcePos,tp=p.targetPos,_w=Math.abs(sp[0]-tp[0]),_h=Math.abs(sp[1]-tp[1]);if(!showLoopback||p.sourceEndpoint.elementId!==p.targetEndpoint.elementId){isLoopbackCurrently=false;this._computeBezier(paintInfo,p,sp,tp,_w,_h);}else{isLoopbackCurrently=true;// a loopback connector.  draw an arc from one anchor to the other.\nvar x1=p.sourcePos[0],y1=p.sourcePos[1]-margin,cx=x1,cy=y1-loopbackRadius,// canvas sizing stuff, to ensure the whole painted area is visible.\n_x=cx-loopbackRadius,_y=cy-loopbackRadius;_w=2*loopbackRadius;_h=2*loopbackRadius;paintInfo.points[0]=_x;paintInfo.points[1]=_y;paintInfo.points[2]=_w;paintInfo.points[3]=_h;// ADD AN ARC SEGMENT.\n_super.addSegment(this,"Arc",{loopback:true,x1:x1-_x+4,y1:y1-_y,startAngle:0,endAngle:2*Math.PI,r:loopbackRadius,ac:!clockwise,x2:x1-_x-4,y2:y1-_y,cx:cx-_x,cy:cy-_y});}};_super=_jp.Connectors.AbstractConnector.apply(this,arguments);return _super;};_ju.extend(_jp.Connectors.AbstractBezierConnector,_jp.Connectors.AbstractConnector);var Bezier=function Bezier(params){params=params||{};this.type="Bezier";var _super=_jp.Connectors.AbstractBezierConnector.apply(this,arguments),majorAnchor=params.curviness||150,minorAnchor=10;this.getCurviness=function(){return majorAnchor;};this._findControlPoint=function(point,sourceAnchorPosition,targetAnchorPosition,sourceEndpoint,targetEndpoint,soo,too){// determine if the two anchors are perpendicular to each other in their orientation.  we swap the control\n// points around if so (code could be tightened up)\nvar perpendicular=soo[0]!==too[0]||soo[1]===too[1],p=[];if(!perpendicular){if(soo[0]===0){p.push(sourceAnchorPosition[0]<targetAnchorPosition[0]?point[0]+minorAnchor:point[0]-minorAnchor);}else{p.push(point[0]-majorAnchor*soo[0]);}if(soo[1]===0){p.push(sourceAnchorPosition[1]<targetAnchorPosition[1]?point[1]+minorAnchor:point[1]-minorAnchor);}else{p.push(point[1]+majorAnchor*too[1]);}}else{if(too[0]===0){p.push(targetAnchorPosition[0]<sourceAnchorPosition[0]?point[0]+minorAnchor:point[0]-minorAnchor);}else{p.push(point[0]+majorAnchor*too[0]);}if(too[1]===0){p.push(targetAnchorPosition[1]<sourceAnchorPosition[1]?point[1]+minorAnchor:point[1]-minorAnchor);}else{p.push(point[1]+majorAnchor*soo[1]);}}return p;};this._computeBezier=function(paintInfo,p,sp,tp,_w,_h){var _CP,_CP2,_sx=sp[0]<tp[0]?_w:0,_sy=sp[1]<tp[1]?_h:0,_tx=sp[0]<tp[0]?0:_w,_ty=sp[1]<tp[1]?0:_h;_CP=this._findControlPoint([_sx,_sy],sp,tp,p.sourceEndpoint,p.targetEndpoint,paintInfo.so,paintInfo.to);_CP2=this._findControlPoint([_tx,_ty],tp,sp,p.targetEndpoint,p.sourceEndpoint,paintInfo.to,paintInfo.so);_super.addSegment(this,"Bezier",{x1:_sx,y1:_sy,x2:_tx,y2:_ty,cp1x:_CP[0],cp1y:_CP[1],cp2x:_CP2[0],cp2y:_CP2[1]});};};_jp.Connectors.Bezier=Bezier;_ju.extend(Bezier,_jp.Connectors.AbstractBezierConnector);}).call(typeof window!==\'undefined\'?window:this);/*\r\n * This file contains the state machine connectors, which extend AbstractBezierConnector.\r\n *\r\n * Copyright (c) 2010 - 2018 jsPlumb (hello@jsplumbtoolkit.com)\r\n *\r\n * https://jsplumbtoolkit.com\r\n * https://github.com/jsplumb/jsplumb\r\n * \r\n * Dual licensed under the MIT and GPL2 licenses.\r\n */;(function(){"use strict";var root=this,_jp=root.jsPlumb,_ju=root.jsPlumbUtil;var _segment=function _segment(x1,y1,x2,y2){if(x1<=x2&&y2<=y1){return 1;}else if(x1<=x2&&y1<=y2){return 2;}else if(x2<=x1&&y2>=y1){return 3;}return 4;},// the control point we will use depends on the faces to which each end of the connection is assigned, specifically whether or not the\n// two faces are parallel or perpendicular.  if they are parallel then the control point lies on the midpoint of the axis in which they\n// are parellel and varies only in the other axis; this variation is proportional to the distance that the anchor points lie from the\n// center of that face.  if the two faces are perpendicular then the control point is at some distance from both the midpoints; the amount and\n// direction are dependent on the orientation of the two elements. \'seg\', passed in to this method, tells you which segment the target element\n// lies in with respect to the source: 1 is top right, 2 is bottom right, 3 is bottom left, 4 is top left.\n//\n// sourcePos and targetPos are arrays of info about where on the source and target each anchor is located.  their contents are:\n//\n// 0 - absolute x\n// 1 - absolute y\n// 2 - proportional x in element (0 is left edge, 1 is right edge)\n// 3 - proportional y in element (0 is top edge, 1 is bottom edge)\n//\n_findControlPoint=function _findControlPoint(midx,midy,segment,sourceEdge,targetEdge,dx,dy,distance,proximityLimit){// TODO (maybe)\n// - if anchor pos is 0.5, make the control point take into account the relative position of the elements.\nif(distance<=proximityLimit){return[midx,midy];}if(segment===1){if(sourceEdge[3]<=0&&targetEdge[3]>=1){return[midx+(sourceEdge[2]<0.5?-1*dx:dx),midy];}else if(sourceEdge[2]>=1&&targetEdge[2]<=0){return[midx,midy+(sourceEdge[3]<0.5?-1*dy:dy)];}else{return[midx+-1*dx,midy+-1*dy];}}else if(segment===2){if(sourceEdge[3]>=1&&targetEdge[3]<=0){return[midx+(sourceEdge[2]<0.5?-1*dx:dx),midy];}else if(sourceEdge[2]>=1&&targetEdge[2]<=0){return[midx,midy+(sourceEdge[3]<0.5?-1*dy:dy)];}else{return[midx+dx,midy+-1*dy];}}else if(segment===3){if(sourceEdge[3]>=1&&targetEdge[3]<=0){return[midx+(sourceEdge[2]<0.5?-1*dx:dx),midy];}else if(sourceEdge[2]<=0&&targetEdge[2]>=1){return[midx,midy+(sourceEdge[3]<0.5?-1*dy:dy)];}else{return[midx+-1*dx,midy+-1*dy];}}else if(segment===4){if(sourceEdge[3]<=0&&targetEdge[3]>=1){return[midx+(sourceEdge[2]<0.5?-1*dx:dx),midy];}else if(sourceEdge[2]<=0&&targetEdge[2]>=1){return[midx,midy+(sourceEdge[3]<0.5?-1*dy:dy)];}else{return[midx+dx,midy+-1*dy];}}};var StateMachine=function StateMachine(params){params=params||{};this.type="StateMachine";var _super=_jp.Connectors.AbstractBezierConnector.apply(this,arguments),curviness=params.curviness||10,margin=params.margin||5,proximityLimit=params.proximityLimit||80,clockwise=params.orientation&&params.orientation==="clockwise",_controlPoint;this._computeBezier=function(paintInfo,params,sp,tp,w,h){var _sx=params.sourcePos[0]<params.targetPos[0]?0:w,_sy=params.sourcePos[1]<params.targetPos[1]?0:h,_tx=params.sourcePos[0]<params.targetPos[0]?w:0,_ty=params.sourcePos[1]<params.targetPos[1]?h:0;// now adjust for the margin\nif(params.sourcePos[2]===0){_sx-=margin;}if(params.sourcePos[2]===1){_sx+=margin;}if(params.sourcePos[3]===0){_sy-=margin;}if(params.sourcePos[3]===1){_sy+=margin;}if(params.targetPos[2]===0){_tx-=margin;}if(params.targetPos[2]===1){_tx+=margin;}if(params.targetPos[3]===0){_ty-=margin;}if(params.targetPos[3]===1){_ty+=margin;}//\n// these connectors are quadratic bezier curves, having a single control point. if both anchors\n// are located at 0.5 on their respective faces, the control point is set to the midpoint and you\n// get a straight line.  this is also the case if the two anchors are within \'proximityLimit\', since\n// it seems to make good aesthetic sense to do that. outside of that, the control point is positioned\n// at \'curviness\' pixels away along the normal to the straight line connecting the two anchors.\n//\n// there may be two improvements to this.  firstly, we might actually support the notion of avoiding nodes\n// in the UI, or at least making a good effort at doing so.  if a connection would pass underneath some node,\n// for example, we might increase the distance the control point is away from the midpoint in a bid to\n// steer it around that node.  this will work within limits, but i think those limits would also be the likely\n// limits for, once again, aesthetic good sense in the layout of a chart using these connectors.\n//\n// the second possible change is actually two possible changes: firstly, it is possible we should gradually\n// decrease the \'curviness\' as the distance between the anchors decreases; start tailing it off to 0 at some\n// point (which should be configurable).  secondly, we might slightly increase the \'curviness\' for connectors\n// with respect to how far their anchor is from the center of its respective face. this could either look cool,\n// or stupid, and may indeed work only in a way that is so subtle as to have been a waste of time.\n//\nvar _midx=(_sx+_tx)/2,_midy=(_sy+_ty)/2,segment=_segment(_sx,_sy,_tx,_ty),distance=Math.sqrt(Math.pow(_tx-_sx,2)+Math.pow(_ty-_sy,2)),cp1x,cp2x,cp1y,cp2y;// calculate the control point.  this code will be where we\'ll put in a rudimentary element avoidance scheme; it\n// will work by extending the control point to force the curve to be, um, curvier.\n_controlPoint=_findControlPoint(_midx,_midy,segment,params.sourcePos,params.targetPos,curviness,curviness,distance,proximityLimit);cp1x=_controlPoint[0];cp2x=_controlPoint[0];cp1y=_controlPoint[1];cp2y=_controlPoint[1];_super.addSegment(this,"Bezier",{x1:_tx,y1:_ty,x2:_sx,y2:_sy,cp1x:cp1x,cp1y:cp1y,cp2x:cp2x,cp2y:cp2y});};};_jp.Connectors.StateMachine=StateMachine;_ju.extend(StateMachine,_jp.Connectors.AbstractBezierConnector);}).call(typeof window!==\'undefined\'?window:this);/*\r\n * This file contains the \'flowchart\' connectors, consisting of vertical and horizontal line segments.\r\n *\r\n * Copyright (c) 2010 - 2018 jsPlumb (hello@jsplumbtoolkit.com)\r\n *\r\n * https://jsplumbtoolkit.com\r\n * https://github.com/jsplumb/jsplumb\r\n *\r\n * Dual licensed under the MIT and GPL2 licenses.\r\n */;(function(){"use strict";var root=this,_jp=root.jsPlumb,_ju=root.jsPlumbUtil;var STRAIGHT="Straight";var Straight=function Straight(params){this.type=STRAIGHT;var _super=_jp.Connectors.AbstractConnector.apply(this,arguments);this._compute=function(paintInfo,_){_super.addSegment(this,STRAIGHT,{x1:paintInfo.sx,y1:paintInfo.sy,x2:paintInfo.startStubX,y2:paintInfo.startStubY});_super.addSegment(this,STRAIGHT,{x1:paintInfo.startStubX,y1:paintInfo.startStubY,x2:paintInfo.endStubX,y2:paintInfo.endStubY});_super.addSegment(this,STRAIGHT,{x1:paintInfo.endStubX,y1:paintInfo.endStubY,x2:paintInfo.tx,y2:paintInfo.ty});};};_jp.Connectors.Straight=Straight;_ju.extend(Straight,_jp.Connectors.AbstractConnector);}).call(typeof window!==\'undefined\'?window:this);/*\r\n * This file contains the SVG renderers.\r\n *\r\n * Copyright (c) 2010 - 2018 jsPlumb (hello@jsplumbtoolkit.com)\r\n * \r\n * https://jsplumbtoolkit.com\r\n * https://github.com/jsplumb/jsplumb\r\n * \r\n * Dual licensed under the MIT and GPL2 licenses.\r\n */;(function(){// ************************** SVG utility methods ********************************************\t\n"use strict";var root=this,_jp=root.jsPlumb,_ju=root.jsPlumbUtil;var svgAttributeMap={"stroke-linejoin":"stroke-linejoin","stroke-dashoffset":"stroke-dashoffset","stroke-linecap":"stroke-linecap"},STROKE_DASHARRAY="stroke-dasharray",DASHSTYLE="dashstyle",LINEAR_GRADIENT="linearGradient",RADIAL_GRADIENT="radialGradient",DEFS="defs",FILL="fill",STOP="stop",STROKE="stroke",STROKE_WIDTH="stroke-width",STYLE="style",NONE="none",JSPLUMB_GRADIENT="jsplumb_gradient_",LINE_WIDTH="strokeWidth",ns={svg:"http://www.w3.org/2000/svg"},_attr=function _attr(node,attributes){for(var i in attributes){node.setAttribute(i,""+attributes[i]);}},_node=function _node(name,attributes){attributes=attributes||{};attributes.version="1.1";attributes.xmlns=ns.svg;return _jp.createElementNS(ns.svg,name,null,null,attributes);},_pos=function _pos(d){return"position:absolute;left:"+d[0]+"px;top:"+d[1]+"px";},_clearGradient=function _clearGradient(parent){var els=parent.querySelectorAll(" defs,linearGradient,radialGradient");for(var i=0;i<els.length;i++){els[i].parentNode.removeChild(els[i]);}},_updateGradient=function _updateGradient(parent,node,style,dimensions,uiComponent){var id=JSPLUMB_GRADIENT+uiComponent._jsPlumb.instance.idstamp();// first clear out any existing gradient\n_clearGradient(parent);// this checks for an \'offset\' property in the gradient, and in the absence of it, assumes\n// we want a linear gradient. if it\'s there, we create a radial gradient.\n// it is possible that a more explicit means of defining the gradient type would be\n// better. relying on \'offset\' means that we can never have a radial gradient that uses\n// some default offset, for instance.\n// issue 244 suggested the \'gradientUnits\' attribute; without this, straight/flowchart connectors with gradients would\n// not show gradients when the line was perfectly horizontal or vertical.\nvar g;if(!style.gradient.offset){g=_node(LINEAR_GRADIENT,{id:id,gradientUnits:"userSpaceOnUse"});}else{g=_node(RADIAL_GRADIENT,{id:id});}var defs=_node(DEFS);parent.appendChild(defs);defs.appendChild(g);// the svg radial gradient seems to treat stops in the reverse\n// order to how canvas does it.  so we want to keep all the maths the same, but\n// iterate the actual style declarations in reverse order, if the x indexes are not in order.\nfor(var i=0;i<style.gradient.stops.length;i++){var styleToUse=uiComponent.segment===1||uiComponent.segment===2?i:style.gradient.stops.length-1-i,stopColor=style.gradient.stops[styleToUse][1],s=_node(STOP,{"offset":Math.floor(style.gradient.stops[i][0]*100)+"%","stop-color":stopColor});g.appendChild(s);}var applyGradientTo=style.stroke?STROKE:FILL;node.setAttribute(applyGradientTo,"url(#"+id+")");},_applyStyles=function _applyStyles(parent,node,style,dimensions,uiComponent){node.setAttribute(FILL,style.fill?style.fill:NONE);node.setAttribute(STROKE,style.stroke?style.stroke:NONE);if(style.gradient){_updateGradient(parent,node,style,dimensions,uiComponent);}else{// make sure we clear any existing gradient\n_clearGradient(parent);node.setAttribute(STYLE,"");}if(style.strokeWidth){node.setAttribute(STROKE_WIDTH,style.strokeWidth);}// in SVG there is a stroke-dasharray attribute we can set, and its syntax looks like\n// the syntax in VML but is actually kind of nasty: values are given in the pixel\n// coordinate space, whereas in VML they are multiples of the width of the stroked\n// line, which makes a lot more sense.  for that reason, jsPlumb is supporting both\n// the native svg \'stroke-dasharray\' attribute, and also the \'dashstyle\' concept from\n// VML, which will be the preferred method.  the code below this converts a dashstyle\n// attribute given in terms of stroke width into a pixel representation, by using the\n// stroke\'s lineWidth.\nif(style[DASHSTYLE]&&style[LINE_WIDTH]&&!style[STROKE_DASHARRAY]){var sep=style[DASHSTYLE].indexOf(",")===-1?" ":",",parts=style[DASHSTYLE].split(sep),styleToUse="";parts.forEach(function(p){styleToUse+=Math.floor(p*style.strokeWidth)+sep;});node.setAttribute(STROKE_DASHARRAY,styleToUse);}else if(style[STROKE_DASHARRAY]){node.setAttribute(STROKE_DASHARRAY,style[STROKE_DASHARRAY]);}// extra attributes such as join type, dash offset.\nfor(var i in svgAttributeMap){if(style[i]){node.setAttribute(svgAttributeMap[i],style[i]);}}},_appendAtIndex=function _appendAtIndex(svg,path,idx){if(svg.childNodes.length>idx){svg.insertBefore(path,svg.childNodes[idx]);}else{svg.appendChild(path);}};/**\r\n     utility methods for other objects to use.\r\n     */_ju.svg={node:_node,attr:_attr,pos:_pos};// ************************** / SVG utility methods ********************************************\n/*\r\n     * Base class for SVG components.\r\n     */var SvgComponent=function SvgComponent(params){var pointerEventsSpec=params.pointerEventsSpec||"all",renderer={};_jp.jsPlumbUIComponent.apply(this,params.originalArgs);this.canvas=null;this.path=null;this.svg=null;this.bgCanvas=null;var clazz=params.cssClass+" "+(params.originalArgs[0].cssClass||""),svgParams={"style":"","width":0,"height":0,"pointer-events":pointerEventsSpec,"position":"absolute"};this.svg=_node("svg",svgParams);if(params.useDivWrapper){this.canvas=_jp.createElement("div",{position:"absolute"});_ju.sizeElement(this.canvas,0,0,1,1);this.canvas.className=clazz;}else{_attr(this.svg,{"class":clazz});this.canvas=this.svg;}params._jsPlumb.appendElement(this.canvas,params.originalArgs[0].parent);if(params.useDivWrapper){this.canvas.appendChild(this.svg);}var displayElements=[this.canvas];this.getDisplayElements=function(){return displayElements;};this.appendDisplayElement=function(el){displayElements.push(el);};this.paint=function(style,anchor,extents){if(style!=null){var xy=[this.x,this.y],wh=[this.w,this.h],p;if(extents!=null){if(extents.xmin<0){xy[0]+=extents.xmin;}if(extents.ymin<0){xy[1]+=extents.ymin;}wh[0]=extents.xmax+(extents.xmin<0?-extents.xmin:0);wh[1]=extents.ymax+(extents.ymin<0?-extents.ymin:0);}if(params.useDivWrapper){_ju.sizeElement(this.canvas,xy[0],xy[1],wh[0],wh[1]);xy[0]=0;xy[1]=0;p=_pos([0,0]);}else{p=_pos([xy[0],xy[1]]);}renderer.paint.apply(this,arguments);_attr(this.svg,{"style":p,"width":wh[0]||0,"height":wh[1]||0});}};return{renderer:renderer};};_ju.extend(SvgComponent,_jp.jsPlumbUIComponent,{cleanup:function cleanup(force){if(force||this.typeId==null){if(this.canvas){this.canvas._jsPlumb=null;}if(this.svg){this.svg._jsPlumb=null;}if(this.bgCanvas){this.bgCanvas._jsPlumb=null;}if(this.canvas&&this.canvas.parentNode){this.canvas.parentNode.removeChild(this.canvas);}if(this.bgCanvas&&this.bgCanvas.parentNode){this.canvas.parentNode.removeChild(this.canvas);}this.svg=null;this.canvas=null;this.path=null;this.group=null;}else{// if not a forced cleanup, just detach from DOM for now.\nif(this.canvas&&this.canvas.parentNode){this.canvas.parentNode.removeChild(this.canvas);}if(this.bgCanvas&&this.bgCanvas.parentNode){this.bgCanvas.parentNode.removeChild(this.bgCanvas);}}},reattach:function reattach(instance){var c=instance.getContainer();if(this.canvas&&this.canvas.parentNode==null){c.appendChild(this.canvas);}if(this.bgCanvas&&this.bgCanvas.parentNode==null){c.appendChild(this.bgCanvas);}},setVisible:function setVisible(v){if(this.canvas){this.canvas.style.display=v?"block":"none";}}});/*\r\n     * Base class for SVG connectors.\r\n     */_jp.ConnectorRenderers.svg=function(params){var self=this,_super=SvgComponent.apply(this,[{cssClass:params._jsPlumb.connectorClass,originalArgs:arguments,pointerEventsSpec:"none",_jsPlumb:params._jsPlumb}]);_super.renderer.paint=function(style,anchor,extents){var segments=self.getSegments(),p="",offset=[0,0];if(extents.xmin<0){offset[0]=-extents.xmin;}if(extents.ymin<0){offset[1]=-extents.ymin;}if(segments.length>0){p=self.getPathData();var a={d:p,transform:"translate("+offset[0]+","+offset[1]+")","pointer-events":params["pointer-events"]||"visibleStroke"},outlineStyle=null,d=[self.x,self.y,self.w,self.h];// outline style.  actually means drawing an svg object underneath the main one.\nif(style.outlineStroke){var outlineWidth=style.outlineWidth||1,outlineStrokeWidth=style.strokeWidth+2*outlineWidth;outlineStyle=_jp.extend({},style);delete outlineStyle.gradient;outlineStyle.stroke=style.outlineStroke;outlineStyle.strokeWidth=outlineStrokeWidth;if(self.bgPath==null){self.bgPath=_node("path",a);_jp.addClass(self.bgPath,_jp.connectorOutlineClass);_appendAtIndex(self.svg,self.bgPath,0);}else{_attr(self.bgPath,a);}_applyStyles(self.svg,self.bgPath,outlineStyle,d,self);}if(self.path==null){self.path=_node("path",a);_appendAtIndex(self.svg,self.path,style.outlineStroke?1:0);}else{_attr(self.path,a);}_applyStyles(self.svg,self.path,style,d,self);}};};_ju.extend(_jp.ConnectorRenderers.svg,SvgComponent);// ******************************* svg segment renderer *****************************************************\t\n// ******************************* /svg segments *****************************************************\n/*\r\n     * Base class for SVG endpoints.\r\n     */var SvgEndpoint=_jp.SvgEndpoint=function(params){var _super=SvgComponent.apply(this,[{cssClass:params._jsPlumb.endpointClass,originalArgs:arguments,pointerEventsSpec:"all",useDivWrapper:true,_jsPlumb:params._jsPlumb}]);_super.renderer.paint=function(style){var s=_jp.extend({},style);if(s.outlineStroke){s.stroke=s.outlineStroke;}if(this.node==null){this.node=this.makeNode(s);this.svg.appendChild(this.node);}else if(this.updateNode!=null){this.updateNode(this.node);}_applyStyles(this.svg,this.node,s,[this.x,this.y,this.w,this.h],this);_pos(this.node,[this.x,this.y]);}.bind(this);};_ju.extend(SvgEndpoint,SvgComponent);/*\r\n     * SVG Dot Endpoint\r\n     */_jp.Endpoints.svg.Dot=function(){_jp.Endpoints.Dot.apply(this,arguments);SvgEndpoint.apply(this,arguments);this.makeNode=function(style){return _node("circle",{"cx":this.w/2,"cy":this.h/2,"r":this.radius});};this.updateNode=function(node){_attr(node,{"cx":this.w/2,"cy":this.h/2,"r":this.radius});};};_ju.extend(_jp.Endpoints.svg.Dot,[_jp.Endpoints.Dot,SvgEndpoint]);/*\r\n     * SVG Rectangle Endpoint\r\n     */_jp.Endpoints.svg.Rectangle=function(){_jp.Endpoints.Rectangle.apply(this,arguments);SvgEndpoint.apply(this,arguments);this.makeNode=function(style){return _node("rect",{"width":this.w,"height":this.h});};this.updateNode=function(node){_attr(node,{"width":this.w,"height":this.h});};};_ju.extend(_jp.Endpoints.svg.Rectangle,[_jp.Endpoints.Rectangle,SvgEndpoint]);// ---------------------------------- Connectors ------------------------------------------------------------\n_jp.Connectors.svg.Flowchart=function(){_jp.Connectors.Flowchart.apply(this,arguments);_jp.ConnectorRenderers.svg.apply(this,arguments);};_ju.extend(_jp.Connectors.svg.Flowchart,[_jp.Connectors.Flowchart,_jp.ConnectorRenderers.svg]);_jp.Connectors.svg.Bezier=function(){_jp.Connectors.Bezier.apply(this,arguments);_jp.ConnectorRenderers.svg.apply(this,arguments);};_ju.extend(_jp.Connectors.svg.Bezier,[_jp.Connectors.Bezier,_jp.ConnectorRenderers.svg]);_jp.Connectors.svg.Straight=function(){_jp.Connectors.Straight.apply(this,arguments);_jp.ConnectorRenderers.svg.apply(this,arguments);};_ju.extend(_jp.Connectors.svg.Straight,[_jp.Connectors.Straight,_jp.ConnectorRenderers.svg]);_jp.Connectors.svg.StateMachine=function(){_jp.Connectors.StateMachine.apply(this,arguments);_jp.ConnectorRenderers.svg.apply(this,arguments);};_ju.extend(_jp.Connectors.svg.StateMachine,[_jp.Connectors.StateMachine,_jp.ConnectorRenderers.svg]);// ------------------------------------------ / Connectors -----------------------------------------\n/*\r\n     * SVG Image Endpoint is the default image endpoint.\r\n     */_jp.Endpoints.svg.Image=_jp.Endpoints.Image;/*\r\n     * Blank endpoint in svg renderer is the default Blank endpoint.\r\n     */_jp.Endpoints.svg.Blank=_jp.Endpoints.Blank;/*\r\n     * Label overlay in svg renderer is the default Label overlay.\r\n     */_jp.Overlays.svg.Label=_jp.Overlays.Label;/*\r\n     * Custom overlay in svg renderer is the default Custom overlay.\r\n     */_jp.Overlays.svg.Custom=_jp.Overlays.Custom;var AbstractSvgArrowOverlay=function AbstractSvgArrowOverlay(superclass,originalArgs){superclass.apply(this,originalArgs);_jp.jsPlumbUIComponent.apply(this,originalArgs);this.isAppendedAtTopLevel=false;var self=this;this.path=null;this.paint=function(params,containerExtents){// only draws on connections, not endpoints.\nif(params.component.svg&&containerExtents){if(this.path==null){this.path=_node("path",{"pointer-events":"all"});params.component.svg.appendChild(this.path);if(this.elementCreated){this.elementCreated(this.path,params.component);}this.canvas=params.component.svg;// for the sake of completeness; this behaves the same as other overlays\n}var clazz=originalArgs&&originalArgs.length===1?originalArgs[0].cssClass||"":"",offset=[0,0];if(containerExtents.xmin<0){offset[0]=-containerExtents.xmin;}if(containerExtents.ymin<0){offset[1]=-containerExtents.ymin;}_attr(this.path,{"d":makePath(params.d),"class":clazz,stroke:params.stroke?params.stroke:null,fill:params.fill?params.fill:null,transform:"translate("+offset[0]+","+offset[1]+")"});}};var makePath=function makePath(d){return isNaN(d.cxy.x)||isNaN(d.cxy.y)?"":"M"+d.hxy.x+","+d.hxy.y+" L"+d.tail[0].x+","+d.tail[0].y+" L"+d.cxy.x+","+d.cxy.y+" L"+d.tail[1].x+","+d.tail[1].y+" L"+d.hxy.x+","+d.hxy.y;};this.transfer=function(target){if(target.canvas&&this.path&&this.path.parentNode){this.path.parentNode.removeChild(this.path);target.canvas.appendChild(this.path);}};};_ju.extend(AbstractSvgArrowOverlay,[_jp.jsPlumbUIComponent,_jp.Overlays.AbstractOverlay],{cleanup:function cleanup(force){if(this.path!=null){if(force){this._jsPlumb.instance.removeElement(this.path);}else{if(this.path.parentNode){this.path.parentNode.removeChild(this.path);}}}},reattach:function reattach(instance,component){if(this.path&&component.canvas){component.canvas.appendChild(this.path);}},setVisible:function setVisible(v){if(this.path!=null){this.path.style.display=v?"block":"none";}}});_jp.Overlays.svg.Arrow=function(){AbstractSvgArrowOverlay.apply(this,[_jp.Overlays.Arrow,arguments]);};_ju.extend(_jp.Overlays.svg.Arrow,[_jp.Overlays.Arrow,AbstractSvgArrowOverlay]);_jp.Overlays.svg.PlainArrow=function(){AbstractSvgArrowOverlay.apply(this,[_jp.Overlays.PlainArrow,arguments]);};_ju.extend(_jp.Overlays.svg.PlainArrow,[_jp.Overlays.PlainArrow,AbstractSvgArrowOverlay]);_jp.Overlays.svg.Diamond=function(){AbstractSvgArrowOverlay.apply(this,[_jp.Overlays.Diamond,arguments]);};_ju.extend(_jp.Overlays.svg.Diamond,[_jp.Overlays.Diamond,AbstractSvgArrowOverlay]);// a test\n_jp.Overlays.svg.GuideLines=function(){var path=null,self=this,p1_1,p1_2;_jp.Overlays.GuideLines.apply(this,arguments);this.paint=function(params,containerExtents){if(path==null){path=_node("path");params.connector.svg.appendChild(path);self.attachListeners(path,params.connector);self.attachListeners(path,self);p1_1=_node("path");params.connector.svg.appendChild(p1_1);self.attachListeners(p1_1,params.connector);self.attachListeners(p1_1,self);p1_2=_node("path");params.connector.svg.appendChild(p1_2);self.attachListeners(p1_2,params.connector);self.attachListeners(p1_2,self);}var offset=[0,0];if(containerExtents.xmin<0){offset[0]=-containerExtents.xmin;}if(containerExtents.ymin<0){offset[1]=-containerExtents.ymin;}_attr(path,{"d":makePath(params.head,params.tail),stroke:"red",fill:null,transform:"translate("+offset[0]+","+offset[1]+")"});_attr(p1_1,{"d":makePath(params.tailLine[0],params.tailLine[1]),stroke:"blue",fill:null,transform:"translate("+offset[0]+","+offset[1]+")"});_attr(p1_2,{"d":makePath(params.headLine[0],params.headLine[1]),stroke:"green",fill:null,transform:"translate("+offset[0]+","+offset[1]+")"});};var makePath=function makePath(d1,d2){return"M "+d1.x+","+d1.y+" L"+d2.x+","+d2.y;};};_ju.extend(_jp.Overlays.svg.GuideLines,_jp.Overlays.GuideLines);}).call(typeof window!==\'undefined\'?window:this);/*\r\n * This file contains the \'vanilla\' adapter - having no external dependencies other than bundled libs.\r\n *\r\n * Copyright (c) 2010 - 2018 jsPlumb (hello@jsplumbtoolkit.com)\r\n * \r\n * https://jsplumbtoolkit.com\r\n * https://github.com/jsplumb/jsplumb\r\n * \r\n * Dual licensed under the MIT and GPL2 licenses.\r\n */;(function(){"use strict";var root=this,_jp=root.jsPlumb,_ju=root.jsPlumbUtil,_jk=root.Katavorio,_jg=root.Biltong;var _getDragManager=function _getDragManager(instance,category){category=category||"main";var key="_katavorio_"+category;var k=instance[key],e=instance.getEventManager();if(!k){k=new _jk({bind:e.on,unbind:e.off,getSize:_jp.getSize,getConstrainingRectangle:function getConstrainingRectangle(el){return[el.parentNode.scrollWidth,el.parentNode.scrollHeight];},getPosition:function getPosition(el,relativeToRoot){// if this is a nested draggable then compute the offset against its own offsetParent, otherwise\n// compute against the Container\'s origin. see also the getUIPosition method below.\nvar o=instance.getOffset(el,relativeToRoot,el._katavorioDrag?el.offsetParent:null);return[o.left,o.top];},setPosition:function setPosition(el,xy){el.style.left=xy[0]+"px";el.style.top=xy[1]+"px";},addClass:_jp.addClass,removeClass:_jp.removeClass,intersects:_jg.intersects,indexOf:function indexOf(l,i){return l.indexOf(i);},scope:instance.getDefaultScope(),css:{noSelect:instance.dragSelectClass,droppable:"jtk-droppable",draggable:"jtk-draggable",drag:"jtk-drag",selected:"jtk-drag-selected",active:"jtk-drag-active",hover:"jtk-drag-hover",ghostProxy:"jtk-ghost-proxy"}});k.setZoom(instance.getZoom());instance[key]=k;instance.bind("zoom",k.setZoom);}return k;};var _animProps=function _animProps(o,p){var _one=function _one(pName){if(p[pName]!=null){if(_ju.isString(p[pName])){var m=p[pName].match(/-=/)?-1:1,v=p[pName].substring(2);return o[pName]+m*v;}else{return p[pName];}}else{return o[pName];}};return[_one("left"),_one("top")];};_jp.extend(root.jsPlumbInstance.prototype,{animationSupported:true,getElement:function getElement(el){if(el==null){return null;}// here we pluck the first entry if el was a list of entries.\n// this is not my favourite thing to do, but previous versions of\n// jsplumb supported jquery selectors, and it is possible a selector\n// will be passed in here.\nel=typeof el==="string"?el:el.length!=null&&el.enctype==null?el[0]:el;return typeof el==="string"?document.getElementById(el):el;},removeElement:function removeElement(element){_getDragManager(this).elementRemoved(element);this.getEventManager().remove(element);},//\n// this adapter supports a rudimentary animation function. no easing is supported.  only\n// left/top properties are supported. property delta args are expected to be in the form\n//\n// +=x.xxxx\n//\n// or\n//\n// -=x.xxxx\n//\ndoAnimate:function doAnimate(el,properties,options){options=options||{};var o=this.getOffset(el),ap=_animProps(o,properties),ldist=ap[0]-o.left,tdist=ap[1]-o.top,d=options.duration||250,step=15,steps=d/step,linc=step/d*ldist,tinc=step/d*tdist,idx=0,_int=setInterval(function(){_jp.setPosition(el,{left:o.left+linc*(idx+1),top:o.top+tinc*(idx+1)});if(options.step!=null){options.step(idx,Math.ceil(steps));}idx++;if(idx>=steps){window.clearInterval(_int);if(options.complete!=null){options.complete();}}},step);},// DRAG/DROP\ndestroyDraggable:function destroyDraggable(el,category){_getDragManager(this,category).destroyDraggable(el);},unbindDraggable:function unbindDraggable(el,evt,fn,category){_getDragManager(this,category).destroyDraggable(el,evt,fn);},destroyDroppable:function destroyDroppable(el,category){_getDragManager(this,category).destroyDroppable(el);},unbindDroppable:function unbindDroppable(el,evt,fn,category){_getDragManager(this,category).destroyDroppable(el,evt,fn);},initDraggable:function initDraggable(el,options,category){_getDragManager(this,category).draggable(el,options);},initDroppable:function initDroppable(el,options,category){_getDragManager(this,category).droppable(el,options);},isAlreadyDraggable:function isAlreadyDraggable(el){return el._katavorioDrag!=null;},isDragSupported:function isDragSupported(el,options){return true;},isDropSupported:function isDropSupported(el,options){return true;},isElementDraggable:function isElementDraggable(el){el=_jp.getElement(el);return el._katavorioDrag&&el._katavorioDrag.isEnabled();},getDragObject:function getDragObject(eventArgs){return eventArgs[0].drag.getDragElement();},getDragScope:function getDragScope(el){return el._katavorioDrag&&el._katavorioDrag.scopes.join(" ")||"";},getDropEvent:function getDropEvent(args){return args[0].e;},getUIPosition:function getUIPosition(eventArgs,zoom){// here the position reported to us by Katavorio is relative to the element\'s offsetParent. For top\n// level nodes that is fine, but if we have a nested draggable then its offsetParent is actually\n// not going to be the jsplumb container; it\'s going to be some child of that element. In that case\n// we want to adjust the UI position to account for the offsetParent\'s position relative to the Container\n// origin.\nvar el=eventArgs[0].el;if(el.offsetParent==null){return null;}var finalPos=eventArgs[0].finalPos||eventArgs[0].pos;var p={left:finalPos[0],top:finalPos[1]};if(el._katavorioDrag&&el.offsetParent!==this.getContainer()){var oc=this.getOffset(el.offsetParent);p.left+=oc.left;p.top+=oc.top;}return p;},setDragFilter:function setDragFilter(el,filter,_exclude){if(el._katavorioDrag){el._katavorioDrag.setFilter(filter,_exclude);}},setElementDraggable:function setElementDraggable(el,draggable){el=_jp.getElement(el);if(el._katavorioDrag){el._katavorioDrag.setEnabled(draggable);}},setDragScope:function setDragScope(el,scope){if(el._katavorioDrag){el._katavorioDrag.k.setDragScope(el,scope);}},setDropScope:function setDropScope(el,scope){if(el._katavorioDrop&&el._katavorioDrop.length>0){el._katavorioDrop[0].k.setDropScope(el,scope);}},addToPosse:function addToPosse(el,spec){var specs=Array.prototype.slice.call(arguments,1);var dm=_getDragManager(this);_jp.each(el,function(_el){_el=[_jp.getElement(_el)];_el.push.apply(_el,specs);dm.addToPosse.apply(dm,_el);});},setPosse:function setPosse(el,spec){var specs=Array.prototype.slice.call(arguments,1);var dm=_getDragManager(this);_jp.each(el,function(_el){_el=[_jp.getElement(_el)];_el.push.apply(_el,specs);dm.setPosse.apply(dm,_el);});},removeFromPosse:function removeFromPosse(el,posseId){var specs=Array.prototype.slice.call(arguments,1);var dm=_getDragManager(this);_jp.each(el,function(_el){_el=[_jp.getElement(_el)];_el.push.apply(_el,specs);dm.removeFromPosse.apply(dm,_el);});},removeFromAllPosses:function removeFromAllPosses(el){var dm=_getDragManager(this);_jp.each(el,function(_el){dm.removeFromAllPosses(_jp.getElement(_el));});},setPosseState:function setPosseState(el,posseId,state){var dm=_getDragManager(this);_jp.each(el,function(_el){dm.setPosseState(_jp.getElement(_el),posseId,state);});},dragEvents:{\'start\':\'start\',\'stop\':\'stop\',\'drag\':\'drag\',\'step\':\'step\',\'over\':\'over\',\'out\':\'out\',\'drop\':\'drop\',\'complete\':\'complete\',\'beforeStart\':\'beforeStart\'},animEvents:{\'step\':"step",\'complete\':\'complete\'},stopDrag:function stopDrag(el){if(el._katavorioDrag){el._katavorioDrag.abort();}},addToDragSelection:function addToDragSelection(spec){_getDragManager(this).select(spec);},removeFromDragSelection:function removeFromDragSelection(spec){_getDragManager(this).deselect(spec);},clearDragSelection:function clearDragSelection(){_getDragManager(this).deselectAll();},trigger:function trigger(el,event,originalEvent,payload){this.getEventManager().trigger(el,event,originalEvent,payload);},doReset:function doReset(){// look for katavorio instances and reset each one if found.\nfor(var key in this){if(key.indexOf("_katavorio_")===0){this[key].reset();}}}});var ready=function ready(f){var _do=function _do(){if(/complete|loaded|interactive/.test(document.readyState)&&typeof document.body!=="undefined"&&document.body!=null){f();}else{setTimeout(_do,9);}};_do();};ready(_jp.init);}).call(typeof window!==\'undefined\'?window:this);\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///160\n')},161:function(module,__webpack_exports__,__webpack_require__){"use strict";eval('/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__core_chart_chartNode_js__ = __webpack_require__(85);\n\n\nvar chartNodeBase = function chartNodeBase(nodeId, options) {\n    __WEBPACK_IMPORTED_MODULE_0__core_chart_chartNode_js__["a" /* default */].call(this, nodeId, options);\n\n    this.addSmallPort = function (options) {\n        var pos = options.position || \'Bottom\';\n\n        var strokeColor = pos === \'Top\' ? "#f65d3b" : \'#1fb139\';\n        var cssClass = pos === \'Top\' ? "jspl-point-top" : \'jspl-point-bottom\';\n        var hoverClass = pos === \'TOP\' ? "jspl-point-top-hover2" : \'jspl-point-bottom-hover2\';\n\n        var endpointConf = {\n            endpoint: ["Dot", {\n                radius: 4,\n                cssClass: cssClass,\n                hoverClass: hoverClass\n            }],\n\n            paintStyle: this.optionStyle.getPaintStyle(strokeColor),\n            anchor: pos, //[pos, [0.5, 0, 0, -1]],\n            isSource: !!options.isSource,\n            isTarget: !!options.isTarget,\n            maxConnections: -1,\n            connector: this.optionStyle.connector,\n\n            connectorStyle: {\n                strokeWidth: 2,\n                joinstyle: "round",\n                stroke: "#1fb139"\n            },\n\n            dragOptions: options.dragOptions || {},\n\n            allowLoopback: false\n        };\n\n        this[pos + "Endpoint"] = this._jsPlumb.addEndpoint(this._el, endpointConf);\n    };\n\n    //线条事件\n    var connectorEvent = {\n        dblclickEvent: function dblclickEvent(connect, options) {\n            var _this = this;\n\n            connect.unbind(\'dblclick\').bind(\'dblclick\', function (e) {\n\n                if (options && options.connectorDblclick) {\n                    if (!options.connectorDblclick(e)) {\n                        return;\n                    }\n                }\n                _this.dblclick(e);\n            });\n        }\n    };\n    this.connectorEvent = $.extend(this.connectorEvent, connectorEvent);\n};\n\nchartNodeBase.prototype = new __WEBPACK_IMPORTED_MODULE_0__core_chart_chartNode_js__["a" /* default */]();\n\n/* harmony default export */ __webpack_exports__["a"] = (chartNodeBase);\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTYxLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vc2NhZmYvY2hhcnQvYmFzZS9jaGFydE5vZGVCYXNlLmpzP2I0YzMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGNoYXJ0Tm9kZUNvcmUgZnJvbSBcIi4uLy4uLy4uL2NvcmUvY2hhcnQvY2hhcnROb2RlLmpzXCI7XG5cbnZhciBjaGFydE5vZGVCYXNlID0gZnVuY3Rpb24gY2hhcnROb2RlQmFzZShub2RlSWQsIG9wdGlvbnMpIHtcbiAgICBjaGFydE5vZGVDb3JlLmNhbGwodGhpcywgbm9kZUlkLCBvcHRpb25zKTtcblxuICAgIHRoaXMuYWRkU21hbGxQb3J0ID0gZnVuY3Rpb24gKG9wdGlvbnMpIHtcbiAgICAgICAgdmFyIHBvcyA9IG9wdGlvbnMucG9zaXRpb24gfHwgJ0JvdHRvbSc7XG5cbiAgICAgICAgdmFyIHN0cm9rZUNvbG9yID0gcG9zID09PSAnVG9wJyA/IFwiI2Y2NWQzYlwiIDogJyMxZmIxMzknO1xuICAgICAgICB2YXIgY3NzQ2xhc3MgPSBwb3MgPT09ICdUb3AnID8gXCJqc3BsLXBvaW50LXRvcFwiIDogJ2pzcGwtcG9pbnQtYm90dG9tJztcbiAgICAgICAgdmFyIGhvdmVyQ2xhc3MgPSBwb3MgPT09ICdUT1AnID8gXCJqc3BsLXBvaW50LXRvcC1ob3ZlcjJcIiA6ICdqc3BsLXBvaW50LWJvdHRvbS1ob3ZlcjInO1xuXG4gICAgICAgIHZhciBlbmRwb2ludENvbmYgPSB7XG4gICAgICAgICAgICBlbmRwb2ludDogW1wiRG90XCIsIHtcbiAgICAgICAgICAgICAgICByYWRpdXM6IDQsXG4gICAgICAgICAgICAgICAgY3NzQ2xhc3M6IGNzc0NsYXNzLFxuICAgICAgICAgICAgICAgIGhvdmVyQ2xhc3M6IGhvdmVyQ2xhc3NcbiAgICAgICAgICAgIH1dLFxuXG4gICAgICAgICAgICBwYWludFN0eWxlOiB0aGlzLm9wdGlvblN0eWxlLmdldFBhaW50U3R5bGUoc3Ryb2tlQ29sb3IpLFxuICAgICAgICAgICAgYW5jaG9yOiBwb3MsIC8vW3BvcywgWzAuNSwgMCwgMCwgLTFdXSxcbiAgICAgICAgICAgIGlzU291cmNlOiAhIW9wdGlvbnMuaXNTb3VyY2UsXG4gICAgICAgICAgICBpc1RhcmdldDogISFvcHRpb25zLmlzVGFyZ2V0LFxuICAgICAgICAgICAgbWF4Q29ubmVjdGlvbnM6IC0xLFxuICAgICAgICAgICAgY29ubmVjdG9yOiB0aGlzLm9wdGlvblN0eWxlLmNvbm5lY3RvcixcblxuICAgICAgICAgICAgY29ubmVjdG9yU3R5bGU6IHtcbiAgICAgICAgICAgICAgICBzdHJva2VXaWR0aDogMixcbiAgICAgICAgICAgICAgICBqb2luc3R5bGU6IFwicm91bmRcIixcbiAgICAgICAgICAgICAgICBzdHJva2U6IFwiIzFmYjEzOVwiXG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICBkcmFnT3B0aW9uczogb3B0aW9ucy5kcmFnT3B0aW9ucyB8fCB7fSxcblxuICAgICAgICAgICAgYWxsb3dMb29wYmFjazogZmFsc2VcbiAgICAgICAgfTtcblxuICAgICAgICB0aGlzW3BvcyArIFwiRW5kcG9pbnRcIl0gPSB0aGlzLl9qc1BsdW1iLmFkZEVuZHBvaW50KHRoaXMuX2VsLCBlbmRwb2ludENvbmYpO1xuICAgIH07XG5cbiAgICAvL+e6v+adoeS6i+S7tlxuICAgIHZhciBjb25uZWN0b3JFdmVudCA9IHtcbiAgICAgICAgZGJsY2xpY2tFdmVudDogZnVuY3Rpb24gZGJsY2xpY2tFdmVudChjb25uZWN0LCBvcHRpb25zKSB7XG4gICAgICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgICAgICAgICBjb25uZWN0LnVuYmluZCgnZGJsY2xpY2snKS5iaW5kKCdkYmxjbGljaycsIGZ1bmN0aW9uIChlKSB7XG5cbiAgICAgICAgICAgICAgICBpZiAob3B0aW9ucyAmJiBvcHRpb25zLmNvbm5lY3RvckRibGNsaWNrKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICghb3B0aW9ucy5jb25uZWN0b3JEYmxjbGljayhlKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIF90aGlzLmRibGNsaWNrKGUpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIHRoaXMuY29ubmVjdG9yRXZlbnQgPSAkLmV4dGVuZCh0aGlzLmNvbm5lY3RvckV2ZW50LCBjb25uZWN0b3JFdmVudCk7XG59O1xuXG5jaGFydE5vZGVCYXNlLnByb3RvdHlwZSA9IG5ldyBjaGFydE5vZGVDb3JlKCk7XG5cbmV4cG9ydCBkZWZhdWx0IGNoYXJ0Tm9kZUJhc2U7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9zY2FmZi9jaGFydC9iYXNlL2NoYXJ0Tm9kZUJhc2UuanNcbi8vIG1vZHVsZSBpZCA9IDE2MVxuLy8gbW9kdWxlIGNodW5rcyA9IDEiXSwibWFwcGluZ3MiOiJBQUFBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///161\n')},162:function(module,__webpack_exports__,__webpack_require__){"use strict";eval('/* unused harmony export normal */\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__crsBase_js__ = __webpack_require__(27);\n/* unused harmony reexport menuRegister */\n\n\n\nvar normal = function normal() {\n    __WEBPACK_IMPORTED_MODULE_0__crsBase_js__["a" /* menuBase */].call(this);\n\n    this.text = "普通计算";\n    this.procId = "normal";\n    this.parentId = "crs";\n\n    //自定义函数  画布在添加node时,设置节点样式\n    this.setNodeElement = function (data) {\n        var str = "<span class=\\"node-scatt node-blue\\"><i class=\\"fa fa-calculator\\"></i><b>" + data.status + "</b></span>";\n        return str;\n    };\n\n    this.scattData = {\n        status: "",\n\n        containerImage: "",\n        executorCpuRequirement: "",\n        executorMemRequirement: "",\n        json: {\n            a: 11,\n            result: false\n        }\n    };\n\n    this.scattHTML = "<div class=\\"params-content\\">\\n        <div class=\\"v-title\\">\\u666E\\u901A\\u8BA1\\u7B97</div>                \\n        <div class=\\"v-params\\">\\n            <span>\\u8BF4\\u660E</span>\\n            <div class=\\"v-params-value\\" @click=\\"aa\\">\\n                \\u8FD9\\u662F\\u63CF\\u8FF0~~~~~~~~{{json.result}}\\n            </div>\\n          \\n        </div>\\n    </div>\\n    <input v-model=\\"json.a\\" /> \\n    <div class=\\"params-content\\">\\n        <div class=\\"v-title\\">\\u7EC4\\u4EF6\\u53C2\\u6570</div>  \\n\\n        <div class=\\"v-params\\">\\n            <span>containerImage</span>\\n            <div class=\\"v-params-value\\">\\n                <input v-model=\\"containerImage\\" />\\n            </div>\\n        </div>\\n\\n        <div class=\\"v-params\\">\\n            <span>executorCpuRequirement</span>\\n            <div class=\\"v-params-value\\">\\n                <input v-model=\\"executorCpuRequirement\\" />\\n            </div>\\n        </div>\\n\\n        <div class=\\"v-params\\">\\n            <span>executorMemRequirement</span>\\n            <div class=\\"v-params-value\\">\\n                <input v-model=\\"executorMemRequirement\\" />\\n            </div>\\n        </div>\\n\\n    </div>\\n    \\n    ";\n};\n\n__WEBPACK_IMPORTED_MODULE_0__crsBase_js__["b" /* menuRegister */].add(normal);\n\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTYyLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vc2NhZmYvbWVudXMvY3JzQ2hpbGQvY29tbWVudHMvbm9ybWFsLmpzPzlmM2UiXSwic291cmNlc0NvbnRlbnQiOlsiXG5pbXBvcnQgeyBtZW51QmFzZSBhcyBtZW51QmFzZXMsIG1lbnVSZWdpc3RlciB9IGZyb20gJy4uL2Nyc0Jhc2UuanMnO1xuXG52YXIgbm9ybWFsID0gZnVuY3Rpb24gbm9ybWFsKCkge1xuICAgIG1lbnVCYXNlcy5jYWxsKHRoaXMpO1xuXG4gICAgdGhpcy50ZXh0ID0gXCLmma7pgJrorqHnrpdcIjtcbiAgICB0aGlzLnByb2NJZCA9IFwibm9ybWFsXCI7XG4gICAgdGhpcy5wYXJlbnRJZCA9IFwiY3JzXCI7XG5cbiAgICAvL+iHquWumuS5ieWHveaVsCAg55S75biD5Zyo5re75Yqgbm9kZeaXtizorr7nva7oioLngrnmoLflvI9cbiAgICB0aGlzLnNldE5vZGVFbGVtZW50ID0gZnVuY3Rpb24gKGRhdGEpIHtcbiAgICAgICAgdmFyIHN0ciA9IFwiPHNwYW4gY2xhc3M9XFxcIm5vZGUtc2NhdHQgbm9kZS1ibHVlXFxcIj48aSBjbGFzcz1cXFwiZmEgZmEtY2FsY3VsYXRvclxcXCI+PC9pPjxiPlwiICsgZGF0YS5zdGF0dXMgKyBcIjwvYj48L3NwYW4+XCI7XG4gICAgICAgIHJldHVybiBzdHI7XG4gICAgfTtcblxuICAgIHRoaXMuc2NhdHREYXRhID0ge1xuICAgICAgICBzdGF0dXM6IFwiXCIsXG5cbiAgICAgICAgY29udGFpbmVySW1hZ2U6IFwiXCIsXG4gICAgICAgIGV4ZWN1dG9yQ3B1UmVxdWlyZW1lbnQ6IFwiXCIsXG4gICAgICAgIGV4ZWN1dG9yTWVtUmVxdWlyZW1lbnQ6IFwiXCIsXG4gICAgICAgIGpzb246IHtcbiAgICAgICAgICAgIGE6IDExLFxuICAgICAgICAgICAgcmVzdWx0OiBmYWxzZVxuICAgICAgICB9XG4gICAgfTtcblxuICAgIHRoaXMuc2NhdHRIVE1MID0gXCI8ZGl2IGNsYXNzPVxcXCJwYXJhbXMtY29udGVudFxcXCI+XFxuICAgICAgICA8ZGl2IGNsYXNzPVxcXCJ2LXRpdGxlXFxcIj5cXHU2NjZFXFx1OTAxQVxcdThCQTFcXHU3Qjk3PC9kaXY+ICAgICAgICAgICAgICAgIFxcbiAgICAgICAgPGRpdiBjbGFzcz1cXFwidi1wYXJhbXNcXFwiPlxcbiAgICAgICAgICAgIDxzcGFuPlxcdThCRjRcXHU2NjBFPC9zcGFuPlxcbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcInYtcGFyYW1zLXZhbHVlXFxcIiBAY2xpY2s9XFxcImFhXFxcIj5cXG4gICAgICAgICAgICAgICAgXFx1OEZEOVxcdTY2MkZcXHU2M0NGXFx1OEZGMH5+fn5+fn5+e3tqc29uLnJlc3VsdH19XFxuICAgICAgICAgICAgPC9kaXY+XFxuICAgICAgICAgIFxcbiAgICAgICAgPC9kaXY+XFxuICAgIDwvZGl2PlxcbiAgICA8aW5wdXQgdi1tb2RlbD1cXFwianNvbi5hXFxcIiAvPiBcXG4gICAgPGRpdiBjbGFzcz1cXFwicGFyYW1zLWNvbnRlbnRcXFwiPlxcbiAgICAgICAgPGRpdiBjbGFzcz1cXFwidi10aXRsZVxcXCI+XFx1N0VDNFxcdTRFRjZcXHU1M0MyXFx1NjU3MDwvZGl2PiAgXFxuXFxuICAgICAgICA8ZGl2IGNsYXNzPVxcXCJ2LXBhcmFtc1xcXCI+XFxuICAgICAgICAgICAgPHNwYW4+Y29udGFpbmVySW1hZ2U8L3NwYW4+XFxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFwidi1wYXJhbXMtdmFsdWVcXFwiPlxcbiAgICAgICAgICAgICAgICA8aW5wdXQgdi1tb2RlbD1cXFwiY29udGFpbmVySW1hZ2VcXFwiIC8+XFxuICAgICAgICAgICAgPC9kaXY+XFxuICAgICAgICA8L2Rpdj5cXG5cXG4gICAgICAgIDxkaXYgY2xhc3M9XFxcInYtcGFyYW1zXFxcIj5cXG4gICAgICAgICAgICA8c3Bhbj5leGVjdXRvckNwdVJlcXVpcmVtZW50PC9zcGFuPlxcbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcInYtcGFyYW1zLXZhbHVlXFxcIj5cXG4gICAgICAgICAgICAgICAgPGlucHV0IHYtbW9kZWw9XFxcImV4ZWN1dG9yQ3B1UmVxdWlyZW1lbnRcXFwiIC8+XFxuICAgICAgICAgICAgPC9kaXY+XFxuICAgICAgICA8L2Rpdj5cXG5cXG4gICAgICAgIDxkaXYgY2xhc3M9XFxcInYtcGFyYW1zXFxcIj5cXG4gICAgICAgICAgICA8c3Bhbj5leGVjdXRvck1lbVJlcXVpcmVtZW50PC9zcGFuPlxcbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcInYtcGFyYW1zLXZhbHVlXFxcIj5cXG4gICAgICAgICAgICAgICAgPGlucHV0IHYtbW9kZWw9XFxcImV4ZWN1dG9yTWVtUmVxdWlyZW1lbnRcXFwiIC8+XFxuICAgICAgICAgICAgPC9kaXY+XFxuICAgICAgICA8L2Rpdj5cXG5cXG4gICAgPC9kaXY+XFxuICAgIFxcbiAgICBcIjtcbn07XG5cbm1lbnVSZWdpc3Rlci5hZGQobm9ybWFsKTtcblxuZXhwb3J0IHsgbm9ybWFsLCBtZW51UmVnaXN0ZXIgfTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL3NjYWZmL21lbnVzL2Nyc0NoaWxkL2NvbW1lbnRzL25vcm1hbC5qc1xuLy8gbW9kdWxlIGlkID0gMTYyXG4vLyBtb2R1bGUgY2h1bmtzID0gMSJdLCJtYXBwaW5ncyI6IkFBQUE7QUFBQTtBQUFBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///162\n')},163:function(module,__webpack_exports__,__webpack_require__){"use strict";eval('/* unused harmony export pySpark */\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__crsBase_js__ = __webpack_require__(27);\n/* unused harmony reexport menuRegister */\n\n\n\nvar pySpark = function pySpark() {\n    __WEBPACK_IMPORTED_MODULE_0__crsBase_js__["a" /* menuBase */].call(this);\n\n    this.text = "pySpark";\n    this.procId = "pySpark";\n    this.parentId = "crs";\n\n    //自定义函数  画布在添加node时,设置节点样式\n    this.setNodeElement = function (data) {\n        var str = "<span class=\\"node-scatt node-blue\\"><i class=\\"fa fa-calculator\\"></i><b>" + data.status + "</b></span>";\n        return str;\n    };\n\n    this.scattData = {\n        status: "",\n\n        containerImage: "",\n        executorCpuRequirement: "",\n        executorMemRequirement: ""\n\n    };\n\n    this.scattHTML = "<div class=\\"params-content\\">\\n        <div class=\\"v-title\\">\\u7EC4\\u4EF6\\u53C2\\u6570</div>  \\n\\n        <div class=\\"v-params\\">\\n            <span>containerImage</span>\\n            <div class=\\"v-params-value\\">\\n                <input v-model=\\"containerImage\\" />\\n            </div>\\n        </div>\\n\\n        <div class=\\"v-params\\">\\n            <span>executorCpuRequirement</span>\\n            <div class=\\"v-params-value\\">\\n                <input v-model=\\"executorCpuRequirement\\" />\\n            </div>\\n        </div>\\n\\n        <div class=\\"v-params\\">\\n            <span>executorMemRequirement</span>\\n            <div class=\\"v-params-value\\">\\n                <input v-model=\\"executorMemRequirement\\" />\\n            </div>\\n        </div>\\n\\n    </div>\\n    \\n    ";\n};\n\n__WEBPACK_IMPORTED_MODULE_0__crsBase_js__["b" /* menuRegister */].add(pySpark);\n\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTYzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vc2NhZmYvbWVudXMvY3JzQ2hpbGQvY29tbWVudHMvcHlTcGFyay5qcz9iMDM5Il0sInNvdXJjZXNDb250ZW50IjpbIlxuaW1wb3J0IHsgbWVudUJhc2UgYXMgbWVudUJhc2VzLCBtZW51UmVnaXN0ZXIgfSBmcm9tICcuLi9jcnNCYXNlLmpzJztcblxudmFyIHB5U3BhcmsgPSBmdW5jdGlvbiBweVNwYXJrKCkge1xuICAgIG1lbnVCYXNlcy5jYWxsKHRoaXMpO1xuXG4gICAgdGhpcy50ZXh0ID0gXCJweVNwYXJrXCI7XG4gICAgdGhpcy5wcm9jSWQgPSBcInB5U3BhcmtcIjtcbiAgICB0aGlzLnBhcmVudElkID0gXCJjcnNcIjtcblxuICAgIC8v6Ieq5a6a5LmJ5Ye95pWwICDnlLvluIPlnKjmt7vliqBub2Rl5pe2LOiuvue9ruiKgueCueagt+W8j1xuICAgIHRoaXMuc2V0Tm9kZUVsZW1lbnQgPSBmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgICB2YXIgc3RyID0gXCI8c3BhbiBjbGFzcz1cXFwibm9kZS1zY2F0dCBub2RlLWJsdWVcXFwiPjxpIGNsYXNzPVxcXCJmYSBmYS1jYWxjdWxhdG9yXFxcIj48L2k+PGI+XCIgKyBkYXRhLnN0YXR1cyArIFwiPC9iPjwvc3Bhbj5cIjtcbiAgICAgICAgcmV0dXJuIHN0cjtcbiAgICB9O1xuXG4gICAgdGhpcy5zY2F0dERhdGEgPSB7XG4gICAgICAgIHN0YXR1czogXCJcIixcblxuICAgICAgICBjb250YWluZXJJbWFnZTogXCJcIixcbiAgICAgICAgZXhlY3V0b3JDcHVSZXF1aXJlbWVudDogXCJcIixcbiAgICAgICAgZXhlY3V0b3JNZW1SZXF1aXJlbWVudDogXCJcIlxuXG4gICAgfTtcblxuICAgIHRoaXMuc2NhdHRIVE1MID0gXCI8ZGl2IGNsYXNzPVxcXCJwYXJhbXMtY29udGVudFxcXCI+XFxuICAgICAgICA8ZGl2IGNsYXNzPVxcXCJ2LXRpdGxlXFxcIj5cXHU3RUM0XFx1NEVGNlxcdTUzQzJcXHU2NTcwPC9kaXY+ICBcXG5cXG4gICAgICAgIDxkaXYgY2xhc3M9XFxcInYtcGFyYW1zXFxcIj5cXG4gICAgICAgICAgICA8c3Bhbj5jb250YWluZXJJbWFnZTwvc3Bhbj5cXG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXCJ2LXBhcmFtcy12YWx1ZVxcXCI+XFxuICAgICAgICAgICAgICAgIDxpbnB1dCB2LW1vZGVsPVxcXCJjb250YWluZXJJbWFnZVxcXCIgLz5cXG4gICAgICAgICAgICA8L2Rpdj5cXG4gICAgICAgIDwvZGl2PlxcblxcbiAgICAgICAgPGRpdiBjbGFzcz1cXFwidi1wYXJhbXNcXFwiPlxcbiAgICAgICAgICAgIDxzcGFuPmV4ZWN1dG9yQ3B1UmVxdWlyZW1lbnQ8L3NwYW4+XFxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFwidi1wYXJhbXMtdmFsdWVcXFwiPlxcbiAgICAgICAgICAgICAgICA8aW5wdXQgdi1tb2RlbD1cXFwiZXhlY3V0b3JDcHVSZXF1aXJlbWVudFxcXCIgLz5cXG4gICAgICAgICAgICA8L2Rpdj5cXG4gICAgICAgIDwvZGl2PlxcblxcbiAgICAgICAgPGRpdiBjbGFzcz1cXFwidi1wYXJhbXNcXFwiPlxcbiAgICAgICAgICAgIDxzcGFuPmV4ZWN1dG9yTWVtUmVxdWlyZW1lbnQ8L3NwYW4+XFxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFwidi1wYXJhbXMtdmFsdWVcXFwiPlxcbiAgICAgICAgICAgICAgICA8aW5wdXQgdi1tb2RlbD1cXFwiZXhlY3V0b3JNZW1SZXF1aXJlbWVudFxcXCIgLz5cXG4gICAgICAgICAgICA8L2Rpdj5cXG4gICAgICAgIDwvZGl2PlxcblxcbiAgICA8L2Rpdj5cXG4gICAgXFxuICAgIFwiO1xufTtcblxubWVudVJlZ2lzdGVyLmFkZChweVNwYXJrKTtcblxuZXhwb3J0IHsgcHlTcGFyaywgbWVudVJlZ2lzdGVyIH07XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9zY2FmZi9tZW51cy9jcnNDaGlsZC9jb21tZW50cy9weVNwYXJrLmpzXG4vLyBtb2R1bGUgaWQgPSAxNjNcbi8vIG1vZHVsZSBjaHVua3MgPSAxIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUFBO0FBQUE7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///163\n')},164:function(module,__webpack_exports__,__webpack_require__){"use strict";eval('/* unused harmony export spark */\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__crsBase_js__ = __webpack_require__(27);\n/* unused harmony reexport menuRegister */\n\n\n\nvar spark = function spark() {\n    __WEBPACK_IMPORTED_MODULE_0__crsBase_js__["a" /* menuBase */].call(this);\n\n    this.text = "spark";\n    this.procId = "spark";\n    this.parentId = "crs";\n\n    //自定义函数  画布在添加node时,设置节点样式\n    this.setNodeElement = function (data) {\n        return \'\';\n    };\n\n    this.scattData = {\n\n        containerImage: "",\n        executorCpuRequirement: "",\n        executorMemRequirement: ""\n\n    };\n\n    this.scattHTML = "<div class=\\"params-content\\">\\n        <div class=\\"v-title\\">\\u7EC4\\u4EF6\\u53C2\\u6570</div>  \\n\\n        <div class=\\"v-params\\">\\n            <span>containerImage</span>\\n            <div class=\\"v-params-value\\">\\n                <input v-model=\\"containerImage\\" />\\n            </div>\\n        </div>\\n\\n        <div class=\\"v-params\\">\\n            <span>executorCpuRequirement</span>\\n            <div class=\\"v-params-value\\">\\n                <input v-model=\\"executorCpuRequirement\\" />\\n            </div>\\n        </div>\\n\\n        <div class=\\"v-params\\">\\n            <span>executorMemRequirement</span>\\n            <div class=\\"v-params-value\\">\\n                <input v-model=\\"executorMemRequirement\\" />\\n            </div>\\n        </div>\\n\\n    </div>\\n    \\n    ";\n};\n\n__WEBPACK_IMPORTED_MODULE_0__crsBase_js__["b" /* menuRegister */].add(spark);\n\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTY0LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vc2NhZmYvbWVudXMvY3JzQ2hpbGQvY29tbWVudHMvc3BhcmsuanM/NWU0MCJdLCJzb3VyY2VzQ29udGVudCI6WyJcbmltcG9ydCB7IG1lbnVCYXNlIGFzIG1lbnVCYXNlcywgbWVudVJlZ2lzdGVyIH0gZnJvbSAnLi4vY3JzQmFzZS5qcyc7XG5cbnZhciBzcGFyayA9IGZ1bmN0aW9uIHNwYXJrKCkge1xuICAgIG1lbnVCYXNlcy5jYWxsKHRoaXMpO1xuXG4gICAgdGhpcy50ZXh0ID0gXCJzcGFya1wiO1xuICAgIHRoaXMucHJvY0lkID0gXCJzcGFya1wiO1xuICAgIHRoaXMucGFyZW50SWQgPSBcImNyc1wiO1xuXG4gICAgLy/oh6rlrprkuYnlh73mlbAgIOeUu+W4g+WcqOa3u+WKoG5vZGXml7Ys6K6+572u6IqC54K55qC35byPXG4gICAgdGhpcy5zZXROb2RlRWxlbWVudCA9IGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgICAgIHJldHVybiAnJztcbiAgICB9O1xuXG4gICAgdGhpcy5zY2F0dERhdGEgPSB7XG5cbiAgICAgICAgY29udGFpbmVySW1hZ2U6IFwiXCIsXG4gICAgICAgIGV4ZWN1dG9yQ3B1UmVxdWlyZW1lbnQ6IFwiXCIsXG4gICAgICAgIGV4ZWN1dG9yTWVtUmVxdWlyZW1lbnQ6IFwiXCJcblxuICAgIH07XG5cbiAgICB0aGlzLnNjYXR0SFRNTCA9IFwiPGRpdiBjbGFzcz1cXFwicGFyYW1zLWNvbnRlbnRcXFwiPlxcbiAgICAgICAgPGRpdiBjbGFzcz1cXFwidi10aXRsZVxcXCI+XFx1N0VDNFxcdTRFRjZcXHU1M0MyXFx1NjU3MDwvZGl2PiAgXFxuXFxuICAgICAgICA8ZGl2IGNsYXNzPVxcXCJ2LXBhcmFtc1xcXCI+XFxuICAgICAgICAgICAgPHNwYW4+Y29udGFpbmVySW1hZ2U8L3NwYW4+XFxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFwidi1wYXJhbXMtdmFsdWVcXFwiPlxcbiAgICAgICAgICAgICAgICA8aW5wdXQgdi1tb2RlbD1cXFwiY29udGFpbmVySW1hZ2VcXFwiIC8+XFxuICAgICAgICAgICAgPC9kaXY+XFxuICAgICAgICA8L2Rpdj5cXG5cXG4gICAgICAgIDxkaXYgY2xhc3M9XFxcInYtcGFyYW1zXFxcIj5cXG4gICAgICAgICAgICA8c3Bhbj5leGVjdXRvckNwdVJlcXVpcmVtZW50PC9zcGFuPlxcbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcInYtcGFyYW1zLXZhbHVlXFxcIj5cXG4gICAgICAgICAgICAgICAgPGlucHV0IHYtbW9kZWw9XFxcImV4ZWN1dG9yQ3B1UmVxdWlyZW1lbnRcXFwiIC8+XFxuICAgICAgICAgICAgPC9kaXY+XFxuICAgICAgICA8L2Rpdj5cXG5cXG4gICAgICAgIDxkaXYgY2xhc3M9XFxcInYtcGFyYW1zXFxcIj5cXG4gICAgICAgICAgICA8c3Bhbj5leGVjdXRvck1lbVJlcXVpcmVtZW50PC9zcGFuPlxcbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcInYtcGFyYW1zLXZhbHVlXFxcIj5cXG4gICAgICAgICAgICAgICAgPGlucHV0IHYtbW9kZWw9XFxcImV4ZWN1dG9yTWVtUmVxdWlyZW1lbnRcXFwiIC8+XFxuICAgICAgICAgICAgPC9kaXY+XFxuICAgICAgICA8L2Rpdj5cXG5cXG4gICAgPC9kaXY+XFxuICAgIFxcbiAgICBcIjtcbn07XG5cbm1lbnVSZWdpc3Rlci5hZGQoc3BhcmspO1xuXG5leHBvcnQgeyBzcGFyaywgbWVudVJlZ2lzdGVyIH07XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9zY2FmZi9tZW51cy9jcnNDaGlsZC9jb21tZW50cy9zcGFyay5qc1xuLy8gbW9kdWxlIGlkID0gMTY0XG4vLyBtb2R1bGUgY2h1bmtzID0gMSJdLCJtYXBwaW5ncyI6IkFBQUE7QUFBQTtBQUFBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///164\n')},165:function(module,__webpack_exports__,__webpack_require__){"use strict";eval('/* unused harmony export tdwInput */\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__tdwBase_js__ = __webpack_require__(86);\n/* unused harmony reexport menuRegister */\n\n\n\nvar tdwInput = function tdwInput() {\n    __WEBPACK_IMPORTED_MODULE_0__tdwBase_js__["a" /* menuBase */].call(this);\n\n    this.text = "tdwInput";\n    this.procId = "tdwInput";\n    this.parentId = "tdw";\n\n    //自定义函数  画布在添加node时,设置节点样式\n    this.setNodeElement = function (data) {\n        return \'\';\n    };\n\n    this.scattData = {\n        "details": [{\n            "srcHdfsAddr": " hdfs://sh.hdfs.cr.ied.com:9000/tdw-transfer-data/dbyin/20170707193351313/20171008",\n            "tdwHdfsAddr": "hdfs://tl-if-nn-tdw.tencent-distribute.com:54310/stage/outface/IEG/dbyin_app/dbyin/docker_test/20171008"\n        }, {\n            "srcHdfsAddr": " hdfs://sh.hdfs.cr.ied.com:9000/tdw-transfer-data/dbyin/20170707193351313/20171009",\n            "tdwHdfsAddr": "hdfs://tl-if-nn-tdw.tencent-distribute.com:54310/stage/outface/IEG/dbyin_app/dbyin/docker_test/20171009"\n        }]\n    };\n\n    this.scattHTML = "<div class=\\"params-content\\">\\n        <div class=\\"v-title\\">\\u7EC4\\u4EF6\\u53C2\\u6570</div>  \\n\\n        <template v-for=\\"(dval,dindex) in details\\">\\n        <p>{{dindex+1}}</p>\\n            <div class=\\"v-params\\" v-for=\\"(val,key) in details[dindex]\\">\\n                <span>{{key}}</span>\\n                <div class=\\"v-params-value\\">\\n                    <input v-model=\\"details[dindex][key]\\" />\\n                </div>\\n            </div>\\n        </template>\\n\\n    </div>\\n    \\n    ";\n};\n\n__WEBPACK_IMPORTED_MODULE_0__tdwBase_js__["b" /* menuRegister */].add(tdwInput);\n\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTY1LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vc2NhZmYvbWVudXMvY3JzQ2hpbGQvaW5wdXQvdGR3SW5wdXQuanM/YzYyZiJdLCJzb3VyY2VzQ29udGVudCI6WyJcbmltcG9ydCB7IG1lbnVCYXNlIGFzIG1lbnVCYXNlcywgbWVudVJlZ2lzdGVyIH0gZnJvbSAnLi4vdGR3QmFzZS5qcyc7XG5cbnZhciB0ZHdJbnB1dCA9IGZ1bmN0aW9uIHRkd0lucHV0KCkge1xuICAgIG1lbnVCYXNlcy5jYWxsKHRoaXMpO1xuXG4gICAgdGhpcy50ZXh0ID0gXCJ0ZHdJbnB1dFwiO1xuICAgIHRoaXMucHJvY0lkID0gXCJ0ZHdJbnB1dFwiO1xuICAgIHRoaXMucGFyZW50SWQgPSBcInRkd1wiO1xuXG4gICAgLy/oh6rlrprkuYnlh73mlbAgIOeUu+W4g+WcqOa3u+WKoG5vZGXml7Ys6K6+572u6IqC54K55qC35byPXG4gICAgdGhpcy5zZXROb2RlRWxlbWVudCA9IGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgICAgIHJldHVybiAnJztcbiAgICB9O1xuXG4gICAgdGhpcy5zY2F0dERhdGEgPSB7XG4gICAgICAgIFwiZGV0YWlsc1wiOiBbe1xuICAgICAgICAgICAgXCJzcmNIZGZzQWRkclwiOiBcIiBoZGZzOi8vc2guaGRmcy5jci5pZWQuY29tOjkwMDAvdGR3LXRyYW5zZmVyLWRhdGEvZGJ5aW4vMjAxNzA3MDcxOTMzNTEzMTMvMjAxNzEwMDhcIixcbiAgICAgICAgICAgIFwidGR3SGRmc0FkZHJcIjogXCJoZGZzOi8vdGwtaWYtbm4tdGR3LnRlbmNlbnQtZGlzdHJpYnV0ZS5jb206NTQzMTAvc3RhZ2Uvb3V0ZmFjZS9JRUcvZGJ5aW5fYXBwL2RieWluL2RvY2tlcl90ZXN0LzIwMTcxMDA4XCJcbiAgICAgICAgfSwge1xuICAgICAgICAgICAgXCJzcmNIZGZzQWRkclwiOiBcIiBoZGZzOi8vc2guaGRmcy5jci5pZWQuY29tOjkwMDAvdGR3LXRyYW5zZmVyLWRhdGEvZGJ5aW4vMjAxNzA3MDcxOTMzNTEzMTMvMjAxNzEwMDlcIixcbiAgICAgICAgICAgIFwidGR3SGRmc0FkZHJcIjogXCJoZGZzOi8vdGwtaWYtbm4tdGR3LnRlbmNlbnQtZGlzdHJpYnV0ZS5jb206NTQzMTAvc3RhZ2Uvb3V0ZmFjZS9JRUcvZGJ5aW5fYXBwL2RieWluL2RvY2tlcl90ZXN0LzIwMTcxMDA5XCJcbiAgICAgICAgfV1cbiAgICB9O1xuXG4gICAgdGhpcy5zY2F0dEhUTUwgPSBcIjxkaXYgY2xhc3M9XFxcInBhcmFtcy1jb250ZW50XFxcIj5cXG4gICAgICAgIDxkaXYgY2xhc3M9XFxcInYtdGl0bGVcXFwiPlxcdTdFQzRcXHU0RUY2XFx1NTNDMlxcdTY1NzA8L2Rpdj4gIFxcblxcbiAgICAgICAgPHRlbXBsYXRlIHYtZm9yPVxcXCIoZHZhbCxkaW5kZXgpIGluIGRldGFpbHNcXFwiPlxcbiAgICAgICAgPHA+e3tkaW5kZXgrMX19PC9wPlxcbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcInYtcGFyYW1zXFxcIiB2LWZvcj1cXFwiKHZhbCxrZXkpIGluIGRldGFpbHNbZGluZGV4XVxcXCI+XFxuICAgICAgICAgICAgICAgIDxzcGFuPnt7a2V5fX08L3NwYW4+XFxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcInYtcGFyYW1zLXZhbHVlXFxcIj5cXG4gICAgICAgICAgICAgICAgICAgIDxpbnB1dCB2LW1vZGVsPVxcXCJkZXRhaWxzW2RpbmRleF1ba2V5XVxcXCIgLz5cXG4gICAgICAgICAgICAgICAgPC9kaXY+XFxuICAgICAgICAgICAgPC9kaXY+XFxuICAgICAgICA8L3RlbXBsYXRlPlxcblxcbiAgICA8L2Rpdj5cXG4gICAgXFxuICAgIFwiO1xufTtcblxubWVudVJlZ2lzdGVyLmFkZCh0ZHdJbnB1dCk7XG5cbmV4cG9ydCB7IHRkd0lucHV0LCBtZW51UmVnaXN0ZXIgfTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL3NjYWZmL21lbnVzL2Nyc0NoaWxkL2lucHV0L3Rkd0lucHV0LmpzXG4vLyBtb2R1bGUgaWQgPSAxNjVcbi8vIG1vZHVsZSBjaHVua3MgPSAxIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUFBO0FBQUE7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///165\n')},166:function(module,__webpack_exports__,__webpack_require__){"use strict";eval('/* unused harmony export tdwOutput */\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__tdwBase_js__ = __webpack_require__(86);\n/* unused harmony reexport menuRegister */\n\n\n\nvar tdwOutput = function tdwOutput() {\n    __WEBPACK_IMPORTED_MODULE_0__tdwBase_js__["a" /* menuBase */].call(this);\n\n    this.text = "tdwOutput";\n    this.procId = "tdwOutput";\n    this.parentId = "tdw";\n\n    //自定义函数  画布在添加node时,设置节点样式\n    this.setNodeElement = function (data) {\n        return \'\';\n    };\n\n    this.scattData = {\n\n        "details": [{\n            "srcHdfsAddr": " hdfs://sh.hdfs.cr.ied.com:9000/tdw-transfer-data/dbyin/20170707193351313/20171008",\n            "tdwHdfsAddr": "hdfs://tl-if-nn-tdw.tencent-distribute.com:54310/stage/outface/IEG/dbyin_app/dbyin/docker_test/20171008"\n        }, {\n            "srcHdfsAddr": " hdfs://sh.hdfs.cr.ied.com:9000/tdw-transfer-data/dbyin/20170707193351313/20171009",\n            "tdwHdfsAddr": "hdfs://tl-if-nn-tdw.tencent-distribute.com:54310/stage/outface/IEG/dbyin_app/dbyin/docker_test/20171009"\n        }]\n\n    };\n\n    this.scattHTML = "<div class=\\"params-content\\">\\n        <div class=\\"v-title\\">\\u7EC4\\u4EF6\\u53C2\\u6570</div>  \\n\\n        <template v-for=\\"(dval,dindex) in details\\">\\n        <p>{{dindex+1}}</p>\\n            <div class=\\"v-params\\" v-for=\\"(val,key) in details[dindex]\\">\\n                <span>{{key}}</span>\\n                <div class=\\"v-params-value\\">\\n                    <input v-model=\\"details[dindex][key]\\" />\\n                </div>\\n            </div>\\n        </template>\\n\\n    </div>\\n    \\n    ";\n};\n\n__WEBPACK_IMPORTED_MODULE_0__tdwBase_js__["b" /* menuRegister */].add(tdwOutput);\n\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTY2LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vc2NhZmYvbWVudXMvY3JzQ2hpbGQvb3V0cHV0L3Rkd091dHB1dC5qcz9lODJlIl0sInNvdXJjZXNDb250ZW50IjpbIlxuaW1wb3J0IHsgbWVudUJhc2UgYXMgbWVudUJhc2VzLCBtZW51UmVnaXN0ZXIgfSBmcm9tICcuLi90ZHdCYXNlLmpzJztcblxudmFyIHRkd091dHB1dCA9IGZ1bmN0aW9uIHRkd091dHB1dCgpIHtcbiAgICBtZW51QmFzZXMuY2FsbCh0aGlzKTtcblxuICAgIHRoaXMudGV4dCA9IFwidGR3T3V0cHV0XCI7XG4gICAgdGhpcy5wcm9jSWQgPSBcInRkd091dHB1dFwiO1xuICAgIHRoaXMucGFyZW50SWQgPSBcInRkd1wiO1xuXG4gICAgLy/oh6rlrprkuYnlh73mlbAgIOeUu+W4g+WcqOa3u+WKoG5vZGXml7Ys6K6+572u6IqC54K55qC35byPXG4gICAgdGhpcy5zZXROb2RlRWxlbWVudCA9IGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgICAgIHJldHVybiAnJztcbiAgICB9O1xuXG4gICAgdGhpcy5zY2F0dERhdGEgPSB7XG5cbiAgICAgICAgXCJkZXRhaWxzXCI6IFt7XG4gICAgICAgICAgICBcInNyY0hkZnNBZGRyXCI6IFwiIGhkZnM6Ly9zaC5oZGZzLmNyLmllZC5jb206OTAwMC90ZHctdHJhbnNmZXItZGF0YS9kYnlpbi8yMDE3MDcwNzE5MzM1MTMxMy8yMDE3MTAwOFwiLFxuICAgICAgICAgICAgXCJ0ZHdIZGZzQWRkclwiOiBcImhkZnM6Ly90bC1pZi1ubi10ZHcudGVuY2VudC1kaXN0cmlidXRlLmNvbTo1NDMxMC9zdGFnZS9vdXRmYWNlL0lFRy9kYnlpbl9hcHAvZGJ5aW4vZG9ja2VyX3Rlc3QvMjAxNzEwMDhcIlxuICAgICAgICB9LCB7XG4gICAgICAgICAgICBcInNyY0hkZnNBZGRyXCI6IFwiIGhkZnM6Ly9zaC5oZGZzLmNyLmllZC5jb206OTAwMC90ZHctdHJhbnNmZXItZGF0YS9kYnlpbi8yMDE3MDcwNzE5MzM1MTMxMy8yMDE3MTAwOVwiLFxuICAgICAgICAgICAgXCJ0ZHdIZGZzQWRkclwiOiBcImhkZnM6Ly90bC1pZi1ubi10ZHcudGVuY2VudC1kaXN0cmlidXRlLmNvbTo1NDMxMC9zdGFnZS9vdXRmYWNlL0lFRy9kYnlpbl9hcHAvZGJ5aW4vZG9ja2VyX3Rlc3QvMjAxNzEwMDlcIlxuICAgICAgICB9XVxuXG4gICAgfTtcblxuICAgIHRoaXMuc2NhdHRIVE1MID0gXCI8ZGl2IGNsYXNzPVxcXCJwYXJhbXMtY29udGVudFxcXCI+XFxuICAgICAgICA8ZGl2IGNsYXNzPVxcXCJ2LXRpdGxlXFxcIj5cXHU3RUM0XFx1NEVGNlxcdTUzQzJcXHU2NTcwPC9kaXY+ICBcXG5cXG4gICAgICAgIDx0ZW1wbGF0ZSB2LWZvcj1cXFwiKGR2YWwsZGluZGV4KSBpbiBkZXRhaWxzXFxcIj5cXG4gICAgICAgIDxwPnt7ZGluZGV4KzF9fTwvcD5cXG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXCJ2LXBhcmFtc1xcXCIgdi1mb3I9XFxcIih2YWwsa2V5KSBpbiBkZXRhaWxzW2RpbmRleF1cXFwiPlxcbiAgICAgICAgICAgICAgICA8c3Bhbj57e2tleX19PC9zcGFuPlxcbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXCJ2LXBhcmFtcy12YWx1ZVxcXCI+XFxuICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdi1tb2RlbD1cXFwiZGV0YWlsc1tkaW5kZXhdW2tleV1cXFwiIC8+XFxuICAgICAgICAgICAgICAgIDwvZGl2PlxcbiAgICAgICAgICAgIDwvZGl2PlxcbiAgICAgICAgPC90ZW1wbGF0ZT5cXG5cXG4gICAgPC9kaXY+XFxuICAgIFxcbiAgICBcIjtcbn07XG5cbm1lbnVSZWdpc3Rlci5hZGQodGR3T3V0cHV0KTtcblxuZXhwb3J0IHsgdGR3T3V0cHV0LCBtZW51UmVnaXN0ZXIgfTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL3NjYWZmL21lbnVzL2Nyc0NoaWxkL291dHB1dC90ZHdPdXRwdXQuanNcbi8vIG1vZHVsZSBpZCA9IDE2NlxuLy8gbW9kdWxlIGNodW5rcyA9IDEiXSwibWFwcGluZ3MiOiJBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///166\n')},167:function(module,__webpack_exports__,__webpack_require__){"use strict";eval('Object.defineProperty(__webpack_exports__, "__esModule", { value: true });\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_vue__ = __webpack_require__(1);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_vue___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_vue__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_font_awesome_css_font_awesome_css__ = __webpack_require__(168);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_font_awesome_css_font_awesome_css___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_font_awesome_css_font_awesome_css__);\n\n\n\n//Vue.use(Element, { size: \'small\', zIndex: 3000 });\n\n//执行的代码示例\nvar getExampleCode = {\n    demo1: {\n        //渲染\n        render: function render() {\n            return \'if(!demo.chart){ \\n\' + \'   demo.chart = new  window.tPlugin({ \\n\' + \'   _els:{ \\n\' + \'       chart:chartControl \\n\' + \'   },\\n\' + \'   useProp:false,\\n\' + \'   useTips:false,\\n\' + \'   useEnd: false \\n\' + \'   });\\n\' + \'}\\n\' + \'demo.chart.renderChart(json)\';\n        },\n        //节点配置\n        nodeJson: function nodeJson(x, y) {\n            return \'var nodeJson = { \\n\' + \'"name": "demo",\\n\' + \'"point":{\' + \'"x":\' + x + \',\' + \'"y":\' + y + \'},\\n\' + \'"class": "node-process",\\n\' + \'"removable": true,\\n\' + \'"creat":function(node,element){ \\n\' + \'    console.log(\\\'add a node\\\') \\n\' + \'},\\n\' + \'"data": { \\n\' + \'   "procId": -1, \\n\' + \'   "params": {} \\n\' + \'}\\n\' + \'}\\n\';\n        },\n        //添加节点\n        addNode: function addNode() {\n            return this.nodeJson(parseInt(Math.random() * 200), parseInt(Math.random() * 320)) + "//以下的chart即为demo.chart,也就是插件的实例化对象 \\n" + "chart.chartControl.addNode(nodeJson)";\n        },\n        //保存\n        save: function save() {\n            return "return JSON.stringify(chart.save())";\n        }\n    },\n    demo2: {\n        //渲染\n        render: function render() {\n            return \'if(demo.chart){ \\n\' + \'demo.chart.properControl.destroy(); \\n\' + \'} \\n\' + \'   demo.chart = new  window.tPlugin({ \\n\' + \'   menusData: [{\\n\' + \'    text: "tt",\\n\' + \'    procId: "ppx",\\n\' + \'    baseData: {\\n\' + \'        "namespace": "default",\\n\' + \'         "taskName": "export-001",\\n\' + \'    },\\n\' + \'    scattData: {\\n\' + \'        bb: 456\\n\' + \'    },\\n\' + \'    baseHTML: `<div class="params-content">\\n\' + \'<div class="v-title">公共参数</div>            \\n\' + \'<div class="v-params">\\n\' + \'    <span>namespace</span>\\n\' + \'    <div class="v-params-value">\\n\' + \'        <input v-model="namespace" />\\n\' + \'    </div>\\n\' + \'</div>\\n\' + \'<div class="v-params">\\n\' + \'    <span>taskName</span>\\n\' + \'    <div class="v-params-value">\\n\' + \'        <input v-model="taskName" />\\n\' + \'    </div>\\n\' + \'</div>\\n\' + \'<div class="v-params">\\n\' + \'    <span>owner</span>\\n\' + \'    <div class="v-params-value">\\n\' + \'        <input v-model="owner" />\\n\' + \'    </div>\\n\' + \'</div>                           \\n\' + \'</div>`,\\n\' + \'    scattHTML: `<input v-model="bb" />`\\n\' + \'}],         \' + \'   _els:{ \\n\' + \'       prop:chartControl \\n\' + \'   },\\n\' + \' \\n\' + \'   useProp:true,\\n\' + \'   useTips:false,\\n\' + \'   useEnd: false \\n\' + \'   });\\n\' + \'var menu = demo.chart.menuRegister.getMenuObj("ppx")\\n\' + \'var data = $.extend({},menu.baseData,menu.scattData,{\\n\' + \'         "owner":"fnh"         \\n\' + \'    });\\n\' + \' demo.chart._els.prop = $(demo.chart._els.prop); \\n\' + \'demo.chart.properControl.render({\\n\' + \'    el: demo.chart._els.prop.children()[0],\\n\' + \'    data: data,\\n\' + \'    html: menu.baseHTML + menu.scattHTML,\\n\' + \'    dataChange(key, newVal) {\\n\' + \'        data[key] = newVal;\\n\' + \'        demo.saveJson = JSON.stringify(data);\\n\' + \'        \\n\' + \'    },\\n\' + \'    methods: {\\n\' + \'    }\\n\' + \'});                                                         \\n\';\n        }\n    },\n    demo3: {\n        render: function render() {\n            return \'if(!demo.chart){ \\n\' + \'   demo.chart = new  window.tPlugin({ \\n\' + \' menusData: [{\\n\' + \'    text: "参数menu",\\n\' + \'    procId: "ppx1",\\n\' + \'    baseData: {\\n\' + \'        "namespace": "default",\\n\' + \'         "taskName": "export-001",\\n\' + \'    },\\n\' + \'    scattData: {\\n\' + \'        bb: 456\\n\' + \'    },\\n\' + \'    baseHTML: `<div class="params-content">\\n\' + \'     <div class="v-title">公共参数</div>            \\n\' + \'     <div class="v-params">\\n\' + \'         <span>namespace</span>\\n\' + \'         <div class="v-params-value">\\n\' + \'             <input v-model="namespace" />\\n\' + \'         </div>\\n\' + \'     </div>` \\n\' + \'   }],\' + \'   useProp:false,\\n\' + \'   useTips:false,\\n\' + \'   useEnd: false \\n\' + \'   });\\n\' + \'   demo.chart.render(_vue.$refs.demo3chartControl,json) \\n\' + \'}else { \\n\' + \'  demo.chart.renderChart(json)  \' + \'}\\n\';\n        }\n    },\n    demo4: {\n        render: function render() {\n            return \'if(!demo.chart){ \\n\' + \'   demo.chart = new  window.tPlugin({ \\n\' + \'   menusData: [{\\n\' + \'      text: "参数menu",\\n\' + \'      procId: "ppx2",\\n\' + \'      baseData: {\\n\' + \'          "namespace": "default",\\n\' + \'           "taskName": "export-001",\\n\' + \'      },\\n\' + \'      scattData: {\\n\' + \'          bb: 789 \\n\' + \'      },\\n\' + \'      baseHTML: `<div class="params-content">\\n\' + \'       <div class="v-title">公共参数</div>            \\n\' + \'       <div class="v-params">\\n\' + \'           <span>namespace</span>\\n\' + \'           <div class="v-params-value">\\n\' + \'               <input v-model="namespace" />\\n\' + \'           </div>\\n\' + \'       </div>` \\n\' + \'   }], \\n\' + \'   prop:{ \\n\' + \'       methods:{ \\n\' + \'           aa(){ \\n\' + \'               console.log("aa") \\n\' + \'           }                       \\n\' + \'       }     \\n  \' + \'   },   \\n\' + \'   useProp:true,\\n\' + \'   useTips:false,\\n\' + \'   useEnd: false \\n\' + \'   });\\n\' + \'   demo.chart.render(_vue.$refs.demo4chartControl,json) \\n\' + \'}else { \\n\' + \'  demo.chart.renderChart(json)  \' + \'}\\n\';\n        }\n    }\n};\n\nnew __WEBPACK_IMPORTED_MODULE_0_vue___default.a({\n    el: \'#app\',\n    data: function data() {\n        return {\n            menus: {\n                demo1: {\n                    saveJson: \'{"nodes":[],"connections":[]}\',\n                    render: getExampleCode.demo1.render(),\n                    nodeJson: getExampleCode.demo1.nodeJson(parseInt(Math.random() * 200), parseInt(Math.random() * 320)),\n                    addNode: getExampleCode.demo1.addNode(),\n                    save: getExampleCode.demo1.save()\n                },\n                demo2: {\n                    saveJson: "",\n                    render: getExampleCode.demo2.render()\n                },\n                demo3: {\n                    saveJson: \'{"nodes":[],"connections":[]}\',\n                    render: getExampleCode.demo3.render(),\n                    save: getExampleCode.demo1.save()\n                },\n                demo4: {\n                    saveJson: \'{"nodes":[],"connections":[]}\',\n                    render: getExampleCode.demo4.render(),\n                    save: getExampleCode.demo1.save()\n                }\n            },\n            curBtn: {\n                methodDemo: \'\',\n                demo: "",\n                method: \'\'\n            },\n            contentStatus: "introduce",\n            //示例代码\n            demoCodeText: \'\'\n        };\n    },\n    created: function created() {},\n    mounted: function mounted() {\n        var _this = this;\n\n        $(\'.v-content\').removeClass(\'v-none\');\n        //默认 渲染 状态\n        this.hoverBtn(\'render\', \'demo1\');\n        this.$nextTick(function () {\n            _this.render(\'demo1\');\n        });\n    },\n\n    methods: {\n        conTarget: function conTarget(name) {\n            this.contentStatus = name;\n        },\n        toTarget: function toTarget(demo) {\n            var _this2 = this;\n\n            this.contentStatus = \'demo\';\n\n            var $t = $(\'[data-target="\' + demo + \'"]\');\n            var top = $t.position().top + $(this.$refs.content).scrollTop();\n\n            $(this.$refs.content).scrollTop(top);\n\n            this.hoverBtn(\'render\', demo);\n            this.$nextTick(function () {\n                _this2.render(demo);\n            });\n        },\n        demoCodeChange: function demoCodeChange() {\n            if (this.curBtn.methodDemo == "") {\n                return;\n            }\n            this.menus[this.curBtn.demo][this.curBtn.method] = this.demoCodeText;\n        },\n        hoverBtn: function hoverBtn(method, demo) {\n            var methodDemo = method + demo;\n\n            if (this.curBtn.methodDemo == methodDemo) {\n                return;\n            }\n            this.curBtn.methodDemo = methodDemo;\n            this.curBtn.demo = demo;\n            this.curBtn.method = method;\n\n            this.demoCodeText = this.menus[demo][method]; //getExampleCode[demo][method]();\n\n\n            var $code = $(this.$refs.democode).find(\'textarea\');\n            var times = 0;\n            var func = function func() {\n                if (times < 0) {\n                    return;\n                }\n                times--;\n                $code.css(\'border\', \'1px solid rgb(64,158,255)\');\n                setTimeout(function () {\n                    $code.css(\'border\', \'\');\n                    setTimeout(function () {\n                        func();\n                    }, 300);\n                }, 300);\n            };\n            func();\n        },\n        addNodeAll: function addNodeAll(demo) {\n            if (demo in this.menus) {\n                this.addNode(demo);\n            }\n        },\n        renderAll: function renderAll() {\n            for (var i in this.menus) {\n                this.render(i);\n            }\n        },\n        render: function render(key) {\n            var demo = this.menus[key];\n\n            var json = this.menus[key].saveJson;\n            var chartControl = this.$refs[key + \'chartControl\'];\n            var menuControl = this.$refs[key + \'menuControl\'] || null;\n\n            var code = this.demoCodeText;\n            if (!demo.chart) {\n                var code = demo.render;\n            }\n            var c = new Function("demo", "json", "chartControl", "menuControl", "_vue", code);\n\n            c(demo, json, chartControl, menuControl, this);\n\n            this.demoCodeText = code;\n        },\n        addNode: function addNode(key) {\n            var chart = this.menus[key].chart;\n\n            var code = this.demoCodeText;\n\n            new Function("chart", code)(chart);\n        },\n        save: function save(key) {\n            var chart = this.menus[key].chart;\n\n            var code = this.demoCodeText;\n\n            var str = new Function("chart", code)(chart);\n\n            this.menus[key].saveJson = str;\n        }\n    }\n});\n\n$(function () {\n    return;\n    var t = window.t = new window.tPlugin({\n        //节点数据\n        menusData: [{\n            text: "tt",\n            procId: "ppx",\n            baseData: {\n                aa: 123\n            },\n            scattData: {\n                bb: 456\n            },\n            baseHTML: \'<input v-model="aa" />\',\n            scattHTML: \'<input v-model="bb" />\'\n        }],\n        chart: {\n            nodeDel: {\n                cover: true,\n                run: function run(nodeData, delNode) {\n\n                    if (delNode) {\n                        delNode.dispose();\n                        this.removeNode(delNode._id);\n                    }\n                }\n            }\n        },\n        useProp: true,\n        prop: {\n            methods: {\n                aam: function aam() {\n                    this.json.result = "true";\n                }\n            },\n            dataChange: function dataChange(node, key, newVal) {\n                console.log(node, key, newVal);\n            }\n        },\n        useStart: true,\n        useEnd: false\n    });\n\n    var arr = [\'{"nodes":[{"procId":"pySpark","params":{"removable":true,"status":"","namespace":"","taskName":"","owner":"","containerImage":"","executorCpuRequirement":"","executorMemRequirement":""},"name":"pySpark","nodeId":"n13172878880","_x":263,"_y":250,"className":"node-process","removable":true,"elId":"n13172878880","unPort":false},{"procId":"spark","params":{"removable":true,"namespace":"","taskName":"","owner":"","containerImage":"","executorCpuRequirement":"","executorMemRequirement":""},"name":"spark","nodeId":"n43172895192","_x":415,"_y":360,"className":"node-process","removable":true,"elId":"n43172895192","unPort":false},{"name":"","nodeId":"n03449778737","_x":419,"_y":11,"className":"","removable":false,"elId":"n03449778737","unPort":true,"nodeStyle":"start"},{"name":"","nodeId":"n13449778740","_x":258,"_y":472,"className":"","removable":false,"elId":"n13449778740","unPort":true,"nodeStyle":"end"},{"procId":"normal","params":{"namespace":"default","taskName":"export-001","owner":"dbyin","removable":true,"status":"","containerImage":"","executorCpuRequirement":"","executorMemRequirement":"","json":{"a":"11ggg"}},"name":"\\u666E\\u901A\\u8BA1\\u7B97","nodeId":"n14118724561","_x":399,"_y":142,"className":"node-process","removable":true,"elId":"n14118724561","unPort":false}],"connections":[{"connectionId":"con_25","pageSourceId":"n13172878880","pageTargetId":"n43172895192"},{"connectionId":"con_35","pageSourceId":"n43172895192","pageTargetId":"n13449778740","nodeStyle":"end"},{"connectionId":"con_58","pageSourceId":"n03449778737","pageTargetId":"n14118724561","nodeStyle":"start"},{"connectionId":"con_62","pageSourceId":"n14118724561","pageTargetId":"n13172878880"}]}\', \'{"nodes":[{"procId":"pySpark","params":{"removable":true,"status":"","namespace":"","taskName":"","owner":"","containerImage":"","executorCpuRequirement":"","executorMemRequirement":""},"name":"pySpark","nodeId":"n13172878880","_x":108,"_y":248,"className":"node-process","removable":true,"elId":"n13172878880","unPort":false},{"procId":"spark","params":{"removable":true,"namespace":"","taskName":"","owner":"","containerImage":"","executorCpuRequirement":"","executorMemRequirement":""},"name":"spark","nodeId":"n43172895192","_x":458,"_y":256,"className":"node-process","removable":true,"elId":"n43172895192","unPort":false},{"name":"","nodeId":"n03449893054","_x":382,"_y":19,"className":"","removable":false,"elId":"n03449893054","unPort":true,"nodeStyle":"start"},{"name":"","nodeId":"n13449893057","_x":306,"_y":348,"className":"","removable":false,"elId":"n13449893057","unPort":true,"nodeStyle":"end"},{"procId":"normal","params":{"namespace":"default","taskName":"export-001","owner":"dbyin","removable":true,"status":"","containerImage":"","executorCpuRequirement":"","executorMemRequirement":"","json":{"a":11}},"name":"\\u666E\\u901A\\u8BA1\\u7B97","nodeId":"n24118776057","_x":280,"_y":133,"className":"node-process","removable":true,"elId":"n24118776057","unPort":false}],"connections":[{"connectionId":"con_105","pageSourceId":"n13172878880","pageTargetId":"n13449893057","nodeStyle":"end"},{"connectionId":"con_110","pageSourceId":"n43172895192","pageTargetId":"n13449893057","nodeStyle":"end"},{"connectionId":"con_128","pageSourceId":"n03449893054","pageTargetId":"n24118776057","nodeStyle":"start"},{"connectionId":"con_132","pageSourceId":"n24118776057","pageTargetId":"n13172878880"},{"connectionId":"con_138","pageSourceId":"n24118776057","pageTargetId":"n43172895192"}]}\', \'{"nodes":[{"procId":"pySpark","params":{"removable":true,"status":"","namespace":"","taskName":"","owner":"","containerImage":"","executorCpuRequirement":"","executorMemRequirement":""},"name":"pySpark","nodeId":"n13172878880","_x":204,"_y":123,"className":"node-process","removable":true,"elId":"n13172878880","unPort":false},{"procId":"tdwOutput","params":{"namespace":"default","taskName":"export-001","owner":"dbyin","removable":true,"tdwUserPwd":"tdw_dbyin:dbyin","tdwAppId":"dbyin_app","details":[{"srcHdfsAddr":" hdfs://sh.hdfs.cr.ied.com:9000/tdw-transfer-data/dbyin/20170707193351313/20171008","tdwHdfsAddr":"hdfs://tl-if-nn-tdw.tencent-distribute.com:54310/stage/outface/IEG/dbyin_app/dbyin/docker_test/20171008"},{"srcHdfsAddr":" hdfs://sh.hdfs.cr.ied.com:9000/tdw-transfer-data/dbyin/20170707193351313/20171009","tdwHdfsAddr":"hdfs://tl-if-nn-tdw.tencent-distribute.com:54310/stage/outface/IEG/dbyin_app/dbyin/docker_test/20171009"}]},"name":"tdwOutput","nodeId":"n43449947576","_x":-267,"_y":385,"className":"node-process","removable":true,"elId":"n43449947576","unPort":false},{"name":"","nodeId":"n23449926868","_x":194,"_y":25,"className":"","removable":false,"elId":"n23449926868","unPort":true,"nodeStyle":"start"},{"name":"","nodeId":"n33449926871","_x":489,"_y":278,"className":"","removable":false,"elId":"n33449926871","unPort":true,"nodeStyle":"end"},{"procId":"tdwInput","params":{"namespace":"default","taskName":"export-001","owner":"dbyin","removable":true,"tdwUserPwd":"tdw_dbyin:dbyin","tdwAppId":"dbyin_app","details":[{"srcHdfsAddr":" hdfs://sh.hdfs.cr.ied.com:9000/tdw-transfer-data/dbyin/20170707193351313/20171008","tdwHdfsAddr":"hdfs://tl-if-nn-tdw.tencent-distribute.com:54310/stage/outface/IEG/dbyin_app/dbyin/docker_test/20171008"},{"srcHdfsAddr":" hdfs://sh.hdfs.cr.ied.com:9000/tdw-transfer-data/dbyin/20170707193351313/20171009","tdwHdfsAddr":"hdfs://tl-if-nn-tdw.tencent-distribute.com:54310/stage/outface/IEG/dbyin_app/dbyin/docker_test/20171009"}]},"name":"tdwInput","nodeId":"n23450102311","_x":384,"_y":182,"className":"node-process","removable":true,"elId":"n23450102311","unPort":false}],"connections":[{"connectionId":"con_99","pageSourceId":"n23449926868","pageTargetId":"n13172878880"},{"connectionId":"con_121","pageSourceId":"n23450102311","pageTargetId":"n33449926871"},{"connectionId":"con_134","pageSourceId":"n13172878880","pageTargetId":"n23450102311"}]}\', \'{"nodes":[],"connections":[]}\'];\n    return;\n\n    //初次载入\n    t.render("#chartContent", arr[0]);\n\n    //载入\n    $("#selectToor").on(\'change\', function () {\n        var val = parseInt($(this).val());\n        //二次渲染\n        t.renderChart(arr[val - 1]);\n    });\n\n    //保存\n    $(\'#save\').on(\'click\', function () {\n        return;\n        var str = JSON.stringify(t.chartControl.toJson());\n        console.log(str);\n        var blg = t.checkControl.check(\'closedLoop island\', t.chartControl.toJson());\n        if (!blg) {\n            console.log("含有闭环 或者 孤立节点");\n        }\n    });\n});\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTY3LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vdHBsdWdpbi9zcmMvanMvc2NhZmYvY3JzL2Nycy5pbmRleC5qcz81M2RhIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB2dWUgZnJvbSAndnVlJztcblxuaW1wb3J0ICdmb250LWF3ZXNvbWUvY3NzL2ZvbnQtYXdlc29tZS5jc3MnO1xuLy9WdWUudXNlKEVsZW1lbnQsIHsgc2l6ZTogJ3NtYWxsJywgekluZGV4OiAzMDAwIH0pO1xuXG4vL+aJp+ihjOeahOS7o+eggeekuuS+i1xudmFyIGdldEV4YW1wbGVDb2RlID0ge1xuICAgIGRlbW8xOiB7XG4gICAgICAgIC8v5riy5p+TXG4gICAgICAgIHJlbmRlcjogZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgICAgICAgcmV0dXJuICdpZighZGVtby5jaGFydCl7IFxcbicgKyAnICAgZGVtby5jaGFydCA9IG5ldyAgd2luZG93LnRQbHVnaW4oeyBcXG4nICsgJyAgIF9lbHM6eyBcXG4nICsgJyAgICAgICBjaGFydDpjaGFydENvbnRyb2wgXFxuJyArICcgICB9LFxcbicgKyAnICAgdXNlUHJvcDpmYWxzZSxcXG4nICsgJyAgIHVzZVRpcHM6ZmFsc2UsXFxuJyArICcgICB1c2VFbmQ6IGZhbHNlIFxcbicgKyAnICAgfSk7XFxuJyArICd9XFxuJyArICdkZW1vLmNoYXJ0LnJlbmRlckNoYXJ0KGpzb24pJztcbiAgICAgICAgfSxcbiAgICAgICAgLy/oioLngrnphY3nva5cbiAgICAgICAgbm9kZUpzb246IGZ1bmN0aW9uIG5vZGVKc29uKHgsIHkpIHtcbiAgICAgICAgICAgIHJldHVybiAndmFyIG5vZGVKc29uID0geyBcXG4nICsgJ1wibmFtZVwiOiBcImRlbW9cIixcXG4nICsgJ1wicG9pbnRcIjp7JyArICdcInhcIjonICsgeCArICcsJyArICdcInlcIjonICsgeSArICd9LFxcbicgKyAnXCJjbGFzc1wiOiBcIm5vZGUtcHJvY2Vzc1wiLFxcbicgKyAnXCJyZW1vdmFibGVcIjogdHJ1ZSxcXG4nICsgJ1wiY3JlYXRcIjpmdW5jdGlvbihub2RlLGVsZW1lbnQpeyBcXG4nICsgJyAgICBjb25zb2xlLmxvZyhcXCdhZGQgYSBub2RlXFwnKSBcXG4nICsgJ30sXFxuJyArICdcImRhdGFcIjogeyBcXG4nICsgJyAgIFwicHJvY0lkXCI6IC0xLCBcXG4nICsgJyAgIFwicGFyYW1zXCI6IHt9IFxcbicgKyAnfVxcbicgKyAnfVxcbic7XG4gICAgICAgIH0sXG4gICAgICAgIC8v5re75Yqg6IqC54K5XG4gICAgICAgIGFkZE5vZGU6IGZ1bmN0aW9uIGFkZE5vZGUoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5ub2RlSnNvbihwYXJzZUludChNYXRoLnJhbmRvbSgpICogMjAwKSwgcGFyc2VJbnQoTWF0aC5yYW5kb20oKSAqIDMyMCkpICsgXCIvL+S7peS4i+eahGNoYXJ05Y2z5Li6ZGVtby5jaGFydCzkuZ/lsLHmmK/mj5Lku7bnmoTlrp7kvovljJblr7nosaEgXFxuXCIgKyBcImNoYXJ0LmNoYXJ0Q29udHJvbC5hZGROb2RlKG5vZGVKc29uKVwiO1xuICAgICAgICB9LFxuICAgICAgICAvL+S/neWtmFxuICAgICAgICBzYXZlOiBmdW5jdGlvbiBzYXZlKCkge1xuICAgICAgICAgICAgcmV0dXJuIFwicmV0dXJuIEpTT04uc3RyaW5naWZ5KGNoYXJ0LnNhdmUoKSlcIjtcbiAgICAgICAgfVxuICAgIH0sXG4gICAgZGVtbzI6IHtcbiAgICAgICAgLy/muLLmn5NcbiAgICAgICAgcmVuZGVyOiBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgICAgICAgICByZXR1cm4gJ2lmKGRlbW8uY2hhcnQpeyBcXG4nICsgJ2RlbW8uY2hhcnQucHJvcGVyQ29udHJvbC5kZXN0cm95KCk7IFxcbicgKyAnfSBcXG4nICsgJyAgIGRlbW8uY2hhcnQgPSBuZXcgIHdpbmRvdy50UGx1Z2luKHsgXFxuJyArICcgICBtZW51c0RhdGE6IFt7XFxuJyArICcgICAgdGV4dDogXCJ0dFwiLFxcbicgKyAnICAgIHByb2NJZDogXCJwcHhcIixcXG4nICsgJyAgICBiYXNlRGF0YToge1xcbicgKyAnICAgICAgICBcIm5hbWVzcGFjZVwiOiBcImRlZmF1bHRcIixcXG4nICsgJyAgICAgICAgIFwidGFza05hbWVcIjogXCJleHBvcnQtMDAxXCIsXFxuJyArICcgICAgfSxcXG4nICsgJyAgICBzY2F0dERhdGE6IHtcXG4nICsgJyAgICAgICAgYmI6IDQ1NlxcbicgKyAnICAgIH0sXFxuJyArICcgICAgYmFzZUhUTUw6IGA8ZGl2IGNsYXNzPVwicGFyYW1zLWNvbnRlbnRcIj5cXG4nICsgJzxkaXYgY2xhc3M9XCJ2LXRpdGxlXCI+5YWs5YWx5Y+C5pWwPC9kaXY+ICAgICAgICAgICAgXFxuJyArICc8ZGl2IGNsYXNzPVwidi1wYXJhbXNcIj5cXG4nICsgJyAgICA8c3Bhbj5uYW1lc3BhY2U8L3NwYW4+XFxuJyArICcgICAgPGRpdiBjbGFzcz1cInYtcGFyYW1zLXZhbHVlXCI+XFxuJyArICcgICAgICAgIDxpbnB1dCB2LW1vZGVsPVwibmFtZXNwYWNlXCIgLz5cXG4nICsgJyAgICA8L2Rpdj5cXG4nICsgJzwvZGl2PlxcbicgKyAnPGRpdiBjbGFzcz1cInYtcGFyYW1zXCI+XFxuJyArICcgICAgPHNwYW4+dGFza05hbWU8L3NwYW4+XFxuJyArICcgICAgPGRpdiBjbGFzcz1cInYtcGFyYW1zLXZhbHVlXCI+XFxuJyArICcgICAgICAgIDxpbnB1dCB2LW1vZGVsPVwidGFza05hbWVcIiAvPlxcbicgKyAnICAgIDwvZGl2PlxcbicgKyAnPC9kaXY+XFxuJyArICc8ZGl2IGNsYXNzPVwidi1wYXJhbXNcIj5cXG4nICsgJyAgICA8c3Bhbj5vd25lcjwvc3Bhbj5cXG4nICsgJyAgICA8ZGl2IGNsYXNzPVwidi1wYXJhbXMtdmFsdWVcIj5cXG4nICsgJyAgICAgICAgPGlucHV0IHYtbW9kZWw9XCJvd25lclwiIC8+XFxuJyArICcgICAgPC9kaXY+XFxuJyArICc8L2Rpdj4gICAgICAgICAgICAgICAgICAgICAgICAgICBcXG4nICsgJzwvZGl2PmAsXFxuJyArICcgICAgc2NhdHRIVE1MOiBgPGlucHV0IHYtbW9kZWw9XCJiYlwiIC8+YFxcbicgKyAnfV0sICAgICAgICAgJyArICcgICBfZWxzOnsgXFxuJyArICcgICAgICAgcHJvcDpjaGFydENvbnRyb2wgXFxuJyArICcgICB9LFxcbicgKyAnIFxcbicgKyAnICAgdXNlUHJvcDp0cnVlLFxcbicgKyAnICAgdXNlVGlwczpmYWxzZSxcXG4nICsgJyAgIHVzZUVuZDogZmFsc2UgXFxuJyArICcgICB9KTtcXG4nICsgJ3ZhciBtZW51ID0gZGVtby5jaGFydC5tZW51UmVnaXN0ZXIuZ2V0TWVudU9iaihcInBweFwiKVxcbicgKyAndmFyIGRhdGEgPSAkLmV4dGVuZCh7fSxtZW51LmJhc2VEYXRhLG1lbnUuc2NhdHREYXRhLHtcXG4nICsgJyAgICAgICAgIFwib3duZXJcIjpcImZuaFwiICAgICAgICAgXFxuJyArICcgICAgfSk7XFxuJyArICcgZGVtby5jaGFydC5fZWxzLnByb3AgPSAkKGRlbW8uY2hhcnQuX2Vscy5wcm9wKTsgXFxuJyArICdkZW1vLmNoYXJ0LnByb3BlckNvbnRyb2wucmVuZGVyKHtcXG4nICsgJyAgICBlbDogZGVtby5jaGFydC5fZWxzLnByb3AuY2hpbGRyZW4oKVswXSxcXG4nICsgJyAgICBkYXRhOiBkYXRhLFxcbicgKyAnICAgIGh0bWw6IG1lbnUuYmFzZUhUTUwgKyBtZW51LnNjYXR0SFRNTCxcXG4nICsgJyAgICBkYXRhQ2hhbmdlKGtleSwgbmV3VmFsKSB7XFxuJyArICcgICAgICAgIGRhdGFba2V5XSA9IG5ld1ZhbDtcXG4nICsgJyAgICAgICAgZGVtby5zYXZlSnNvbiA9IEpTT04uc3RyaW5naWZ5KGRhdGEpO1xcbicgKyAnICAgICAgICBcXG4nICsgJyAgICB9LFxcbicgKyAnICAgIG1ldGhvZHM6IHtcXG4nICsgJyAgICB9XFxuJyArICd9KTsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcXG4nO1xuICAgICAgICB9XG4gICAgfSxcbiAgICBkZW1vMzoge1xuICAgICAgICByZW5kZXI6IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgICAgICAgIHJldHVybiAnaWYoIWRlbW8uY2hhcnQpeyBcXG4nICsgJyAgIGRlbW8uY2hhcnQgPSBuZXcgIHdpbmRvdy50UGx1Z2luKHsgXFxuJyArICcgbWVudXNEYXRhOiBbe1xcbicgKyAnICAgIHRleHQ6IFwi5Y+C5pWwbWVudVwiLFxcbicgKyAnICAgIHByb2NJZDogXCJwcHgxXCIsXFxuJyArICcgICAgYmFzZURhdGE6IHtcXG4nICsgJyAgICAgICAgXCJuYW1lc3BhY2VcIjogXCJkZWZhdWx0XCIsXFxuJyArICcgICAgICAgICBcInRhc2tOYW1lXCI6IFwiZXhwb3J0LTAwMVwiLFxcbicgKyAnICAgIH0sXFxuJyArICcgICAgc2NhdHREYXRhOiB7XFxuJyArICcgICAgICAgIGJiOiA0NTZcXG4nICsgJyAgICB9LFxcbicgKyAnICAgIGJhc2VIVE1MOiBgPGRpdiBjbGFzcz1cInBhcmFtcy1jb250ZW50XCI+XFxuJyArICcgICAgIDxkaXYgY2xhc3M9XCJ2LXRpdGxlXCI+5YWs5YWx5Y+C5pWwPC9kaXY+ICAgICAgICAgICAgXFxuJyArICcgICAgIDxkaXYgY2xhc3M9XCJ2LXBhcmFtc1wiPlxcbicgKyAnICAgICAgICAgPHNwYW4+bmFtZXNwYWNlPC9zcGFuPlxcbicgKyAnICAgICAgICAgPGRpdiBjbGFzcz1cInYtcGFyYW1zLXZhbHVlXCI+XFxuJyArICcgICAgICAgICAgICAgPGlucHV0IHYtbW9kZWw9XCJuYW1lc3BhY2VcIiAvPlxcbicgKyAnICAgICAgICAgPC9kaXY+XFxuJyArICcgICAgIDwvZGl2PmAgXFxuJyArICcgICB9XSwnICsgJyAgIHVzZVByb3A6ZmFsc2UsXFxuJyArICcgICB1c2VUaXBzOmZhbHNlLFxcbicgKyAnICAgdXNlRW5kOiBmYWxzZSBcXG4nICsgJyAgIH0pO1xcbicgKyAnICAgZGVtby5jaGFydC5yZW5kZXIoX3Z1ZS4kcmVmcy5kZW1vM2NoYXJ0Q29udHJvbCxqc29uKSBcXG4nICsgJ31lbHNlIHsgXFxuJyArICcgIGRlbW8uY2hhcnQucmVuZGVyQ2hhcnQoanNvbikgICcgKyAnfVxcbic7XG4gICAgICAgIH1cbiAgICB9LFxuICAgIGRlbW80OiB7XG4gICAgICAgIHJlbmRlcjogZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgICAgICAgcmV0dXJuICdpZighZGVtby5jaGFydCl7IFxcbicgKyAnICAgZGVtby5jaGFydCA9IG5ldyAgd2luZG93LnRQbHVnaW4oeyBcXG4nICsgJyAgIG1lbnVzRGF0YTogW3tcXG4nICsgJyAgICAgIHRleHQ6IFwi5Y+C5pWwbWVudVwiLFxcbicgKyAnICAgICAgcHJvY0lkOiBcInBweDJcIixcXG4nICsgJyAgICAgIGJhc2VEYXRhOiB7XFxuJyArICcgICAgICAgICAgXCJuYW1lc3BhY2VcIjogXCJkZWZhdWx0XCIsXFxuJyArICcgICAgICAgICAgIFwidGFza05hbWVcIjogXCJleHBvcnQtMDAxXCIsXFxuJyArICcgICAgICB9LFxcbicgKyAnICAgICAgc2NhdHREYXRhOiB7XFxuJyArICcgICAgICAgICAgYmI6IDc4OSBcXG4nICsgJyAgICAgIH0sXFxuJyArICcgICAgICBiYXNlSFRNTDogYDxkaXYgY2xhc3M9XCJwYXJhbXMtY29udGVudFwiPlxcbicgKyAnICAgICAgIDxkaXYgY2xhc3M9XCJ2LXRpdGxlXCI+5YWs5YWx5Y+C5pWwPC9kaXY+ICAgICAgICAgICAgXFxuJyArICcgICAgICAgPGRpdiBjbGFzcz1cInYtcGFyYW1zXCI+XFxuJyArICcgICAgICAgICAgIDxzcGFuPm5hbWVzcGFjZTwvc3Bhbj5cXG4nICsgJyAgICAgICAgICAgPGRpdiBjbGFzcz1cInYtcGFyYW1zLXZhbHVlXCI+XFxuJyArICcgICAgICAgICAgICAgICA8aW5wdXQgdi1tb2RlbD1cIm5hbWVzcGFjZVwiIC8+XFxuJyArICcgICAgICAgICAgIDwvZGl2PlxcbicgKyAnICAgICAgIDwvZGl2PmAgXFxuJyArICcgICB9XSwgXFxuJyArICcgICBwcm9wOnsgXFxuJyArICcgICAgICAgbWV0aG9kczp7IFxcbicgKyAnICAgICAgICAgICBhYSgpeyBcXG4nICsgJyAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiYWFcIikgXFxuJyArICcgICAgICAgICAgIH0gICAgICAgICAgICAgICAgICAgICAgIFxcbicgKyAnICAgICAgIH0gICAgIFxcbiAgJyArICcgICB9LCAgIFxcbicgKyAnICAgdXNlUHJvcDp0cnVlLFxcbicgKyAnICAgdXNlVGlwczpmYWxzZSxcXG4nICsgJyAgIHVzZUVuZDogZmFsc2UgXFxuJyArICcgICB9KTtcXG4nICsgJyAgIGRlbW8uY2hhcnQucmVuZGVyKF92dWUuJHJlZnMuZGVtbzRjaGFydENvbnRyb2wsanNvbikgXFxuJyArICd9ZWxzZSB7IFxcbicgKyAnICBkZW1vLmNoYXJ0LnJlbmRlckNoYXJ0KGpzb24pICAnICsgJ31cXG4nO1xuICAgICAgICB9XG4gICAgfVxufTtcblxubmV3IHZ1ZSh7XG4gICAgZWw6ICcjYXBwJyxcbiAgICBkYXRhOiBmdW5jdGlvbiBkYXRhKCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgbWVudXM6IHtcbiAgICAgICAgICAgICAgICBkZW1vMToge1xuICAgICAgICAgICAgICAgICAgICBzYXZlSnNvbjogJ3tcIm5vZGVzXCI6W10sXCJjb25uZWN0aW9uc1wiOltdfScsXG4gICAgICAgICAgICAgICAgICAgIHJlbmRlcjogZ2V0RXhhbXBsZUNvZGUuZGVtbzEucmVuZGVyKCksXG4gICAgICAgICAgICAgICAgICAgIG5vZGVKc29uOiBnZXRFeGFtcGxlQ29kZS5kZW1vMS5ub2RlSnNvbihwYXJzZUludChNYXRoLnJhbmRvbSgpICogMjAwKSwgcGFyc2VJbnQoTWF0aC5yYW5kb20oKSAqIDMyMCkpLFxuICAgICAgICAgICAgICAgICAgICBhZGROb2RlOiBnZXRFeGFtcGxlQ29kZS5kZW1vMS5hZGROb2RlKCksXG4gICAgICAgICAgICAgICAgICAgIHNhdmU6IGdldEV4YW1wbGVDb2RlLmRlbW8xLnNhdmUoKVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgZGVtbzI6IHtcbiAgICAgICAgICAgICAgICAgICAgc2F2ZUpzb246IFwiXCIsXG4gICAgICAgICAgICAgICAgICAgIHJlbmRlcjogZ2V0RXhhbXBsZUNvZGUuZGVtbzIucmVuZGVyKClcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGRlbW8zOiB7XG4gICAgICAgICAgICAgICAgICAgIHNhdmVKc29uOiAne1wibm9kZXNcIjpbXSxcImNvbm5lY3Rpb25zXCI6W119JyxcbiAgICAgICAgICAgICAgICAgICAgcmVuZGVyOiBnZXRFeGFtcGxlQ29kZS5kZW1vMy5yZW5kZXIoKSxcbiAgICAgICAgICAgICAgICAgICAgc2F2ZTogZ2V0RXhhbXBsZUNvZGUuZGVtbzEuc2F2ZSgpXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBkZW1vNDoge1xuICAgICAgICAgICAgICAgICAgICBzYXZlSnNvbjogJ3tcIm5vZGVzXCI6W10sXCJjb25uZWN0aW9uc1wiOltdfScsXG4gICAgICAgICAgICAgICAgICAgIHJlbmRlcjogZ2V0RXhhbXBsZUNvZGUuZGVtbzQucmVuZGVyKCksXG4gICAgICAgICAgICAgICAgICAgIHNhdmU6IGdldEV4YW1wbGVDb2RlLmRlbW8xLnNhdmUoKVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBjdXJCdG46IHtcbiAgICAgICAgICAgICAgICBtZXRob2REZW1vOiAnJyxcbiAgICAgICAgICAgICAgICBkZW1vOiBcIlwiLFxuICAgICAgICAgICAgICAgIG1ldGhvZDogJydcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBjb250ZW50U3RhdHVzOiBcImludHJvZHVjZVwiLFxuICAgICAgICAgICAgLy/npLrkvovku6PnoIFcbiAgICAgICAgICAgIGRlbW9Db2RlVGV4dDogJydcbiAgICAgICAgfTtcbiAgICB9LFxuICAgIGNyZWF0ZWQ6IGZ1bmN0aW9uIGNyZWF0ZWQoKSB7fSxcbiAgICBtb3VudGVkOiBmdW5jdGlvbiBtb3VudGVkKCkge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgICAgICQoJy52LWNvbnRlbnQnKS5yZW1vdmVDbGFzcygndi1ub25lJyk7XG4gICAgICAgIC8v6buY6K6kIOa4suafkyDnirbmgIFcbiAgICAgICAgdGhpcy5ob3ZlckJ0bigncmVuZGVyJywgJ2RlbW8xJyk7XG4gICAgICAgIHRoaXMuJG5leHRUaWNrKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIF90aGlzLnJlbmRlcignZGVtbzEnKTtcbiAgICAgICAgfSk7XG4gICAgfSxcblxuICAgIG1ldGhvZHM6IHtcbiAgICAgICAgY29uVGFyZ2V0OiBmdW5jdGlvbiBjb25UYXJnZXQobmFtZSkge1xuICAgICAgICAgICAgdGhpcy5jb250ZW50U3RhdHVzID0gbmFtZTtcbiAgICAgICAgfSxcbiAgICAgICAgdG9UYXJnZXQ6IGZ1bmN0aW9uIHRvVGFyZ2V0KGRlbW8pIHtcbiAgICAgICAgICAgIHZhciBfdGhpczIgPSB0aGlzO1xuXG4gICAgICAgICAgICB0aGlzLmNvbnRlbnRTdGF0dXMgPSAnZGVtbyc7XG5cbiAgICAgICAgICAgIHZhciAkdCA9ICQoJ1tkYXRhLXRhcmdldD1cIicgKyBkZW1vICsgJ1wiXScpO1xuICAgICAgICAgICAgdmFyIHRvcCA9ICR0LnBvc2l0aW9uKCkudG9wICsgJCh0aGlzLiRyZWZzLmNvbnRlbnQpLnNjcm9sbFRvcCgpO1xuXG4gICAgICAgICAgICAkKHRoaXMuJHJlZnMuY29udGVudCkuc2Nyb2xsVG9wKHRvcCk7XG5cbiAgICAgICAgICAgIHRoaXMuaG92ZXJCdG4oJ3JlbmRlcicsIGRlbW8pO1xuICAgICAgICAgICAgdGhpcy4kbmV4dFRpY2soZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIF90aGlzMi5yZW5kZXIoZGVtbyk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSxcbiAgICAgICAgZGVtb0NvZGVDaGFuZ2U6IGZ1bmN0aW9uIGRlbW9Db2RlQ2hhbmdlKCkge1xuICAgICAgICAgICAgaWYgKHRoaXMuY3VyQnRuLm1ldGhvZERlbW8gPT0gXCJcIikge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMubWVudXNbdGhpcy5jdXJCdG4uZGVtb11bdGhpcy5jdXJCdG4ubWV0aG9kXSA9IHRoaXMuZGVtb0NvZGVUZXh0O1xuICAgICAgICB9LFxuICAgICAgICBob3ZlckJ0bjogZnVuY3Rpb24gaG92ZXJCdG4obWV0aG9kLCBkZW1vKSB7XG4gICAgICAgICAgICB2YXIgbWV0aG9kRGVtbyA9IG1ldGhvZCArIGRlbW87XG5cbiAgICAgICAgICAgIGlmICh0aGlzLmN1ckJ0bi5tZXRob2REZW1vID09IG1ldGhvZERlbW8pIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLmN1ckJ0bi5tZXRob2REZW1vID0gbWV0aG9kRGVtbztcbiAgICAgICAgICAgIHRoaXMuY3VyQnRuLmRlbW8gPSBkZW1vO1xuICAgICAgICAgICAgdGhpcy5jdXJCdG4ubWV0aG9kID0gbWV0aG9kO1xuXG4gICAgICAgICAgICB0aGlzLmRlbW9Db2RlVGV4dCA9IHRoaXMubWVudXNbZGVtb11bbWV0aG9kXTsgLy9nZXRFeGFtcGxlQ29kZVtkZW1vXVttZXRob2RdKCk7XG5cblxuICAgICAgICAgICAgdmFyICRjb2RlID0gJCh0aGlzLiRyZWZzLmRlbW9jb2RlKS5maW5kKCd0ZXh0YXJlYScpO1xuICAgICAgICAgICAgdmFyIHRpbWVzID0gMDtcbiAgICAgICAgICAgIHZhciBmdW5jID0gZnVuY3Rpb24gZnVuYygpIHtcbiAgICAgICAgICAgICAgICBpZiAodGltZXMgPCAwKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdGltZXMtLTtcbiAgICAgICAgICAgICAgICAkY29kZS5jc3MoJ2JvcmRlcicsICcxcHggc29saWQgcmdiKDY0LDE1OCwyNTUpJyk7XG4gICAgICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICRjb2RlLmNzcygnYm9yZGVyJywgJycpO1xuICAgICAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZ1bmMoKTtcbiAgICAgICAgICAgICAgICAgICAgfSwgMzAwKTtcbiAgICAgICAgICAgICAgICB9LCAzMDApO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGZ1bmMoKTtcbiAgICAgICAgfSxcbiAgICAgICAgYWRkTm9kZUFsbDogZnVuY3Rpb24gYWRkTm9kZUFsbChkZW1vKSB7XG4gICAgICAgICAgICBpZiAoZGVtbyBpbiB0aGlzLm1lbnVzKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5hZGROb2RlKGRlbW8pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICByZW5kZXJBbGw6IGZ1bmN0aW9uIHJlbmRlckFsbCgpIHtcbiAgICAgICAgICAgIGZvciAodmFyIGkgaW4gdGhpcy5tZW51cykge1xuICAgICAgICAgICAgICAgIHRoaXMucmVuZGVyKGkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICByZW5kZXI6IGZ1bmN0aW9uIHJlbmRlcihrZXkpIHtcbiAgICAgICAgICAgIHZhciBkZW1vID0gdGhpcy5tZW51c1trZXldO1xuXG4gICAgICAgICAgICB2YXIganNvbiA9IHRoaXMubWVudXNba2V5XS5zYXZlSnNvbjtcbiAgICAgICAgICAgIHZhciBjaGFydENvbnRyb2wgPSB0aGlzLiRyZWZzW2tleSArICdjaGFydENvbnRyb2wnXTtcbiAgICAgICAgICAgIHZhciBtZW51Q29udHJvbCA9IHRoaXMuJHJlZnNba2V5ICsgJ21lbnVDb250cm9sJ10gfHwgbnVsbDtcblxuICAgICAgICAgICAgdmFyIGNvZGUgPSB0aGlzLmRlbW9Db2RlVGV4dDtcbiAgICAgICAgICAgIGlmICghZGVtby5jaGFydCkge1xuICAgICAgICAgICAgICAgIHZhciBjb2RlID0gZGVtby5yZW5kZXI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgYyA9IG5ldyBGdW5jdGlvbihcImRlbW9cIiwgXCJqc29uXCIsIFwiY2hhcnRDb250cm9sXCIsIFwibWVudUNvbnRyb2xcIiwgXCJfdnVlXCIsIGNvZGUpO1xuXG4gICAgICAgICAgICBjKGRlbW8sIGpzb24sIGNoYXJ0Q29udHJvbCwgbWVudUNvbnRyb2wsIHRoaXMpO1xuXG4gICAgICAgICAgICB0aGlzLmRlbW9Db2RlVGV4dCA9IGNvZGU7XG4gICAgICAgIH0sXG4gICAgICAgIGFkZE5vZGU6IGZ1bmN0aW9uIGFkZE5vZGUoa2V5KSB7XG4gICAgICAgICAgICB2YXIgY2hhcnQgPSB0aGlzLm1lbnVzW2tleV0uY2hhcnQ7XG5cbiAgICAgICAgICAgIHZhciBjb2RlID0gdGhpcy5kZW1vQ29kZVRleHQ7XG5cbiAgICAgICAgICAgIG5ldyBGdW5jdGlvbihcImNoYXJ0XCIsIGNvZGUpKGNoYXJ0KTtcbiAgICAgICAgfSxcbiAgICAgICAgc2F2ZTogZnVuY3Rpb24gc2F2ZShrZXkpIHtcbiAgICAgICAgICAgIHZhciBjaGFydCA9IHRoaXMubWVudXNba2V5XS5jaGFydDtcblxuICAgICAgICAgICAgdmFyIGNvZGUgPSB0aGlzLmRlbW9Db2RlVGV4dDtcblxuICAgICAgICAgICAgdmFyIHN0ciA9IG5ldyBGdW5jdGlvbihcImNoYXJ0XCIsIGNvZGUpKGNoYXJ0KTtcblxuICAgICAgICAgICAgdGhpcy5tZW51c1trZXldLnNhdmVKc29uID0gc3RyO1xuICAgICAgICB9XG4gICAgfVxufSk7XG5cbiQoZnVuY3Rpb24gKCkge1xuICAgIHJldHVybjtcbiAgICB2YXIgdCA9IHdpbmRvdy50ID0gbmV3IHdpbmRvdy50UGx1Z2luKHtcbiAgICAgICAgLy/oioLngrnmlbDmja5cbiAgICAgICAgbWVudXNEYXRhOiBbe1xuICAgICAgICAgICAgdGV4dDogXCJ0dFwiLFxuICAgICAgICAgICAgcHJvY0lkOiBcInBweFwiLFxuICAgICAgICAgICAgYmFzZURhdGE6IHtcbiAgICAgICAgICAgICAgICBhYTogMTIzXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgc2NhdHREYXRhOiB7XG4gICAgICAgICAgICAgICAgYmI6IDQ1NlxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGJhc2VIVE1MOiAnPGlucHV0IHYtbW9kZWw9XCJhYVwiIC8+JyxcbiAgICAgICAgICAgIHNjYXR0SFRNTDogJzxpbnB1dCB2LW1vZGVsPVwiYmJcIiAvPidcbiAgICAgICAgfV0sXG4gICAgICAgIGNoYXJ0OiB7XG4gICAgICAgICAgICBub2RlRGVsOiB7XG4gICAgICAgICAgICAgICAgY292ZXI6IHRydWUsXG4gICAgICAgICAgICAgICAgcnVuOiBmdW5jdGlvbiBydW4obm9kZURhdGEsIGRlbE5vZGUpIHtcblxuICAgICAgICAgICAgICAgICAgICBpZiAoZGVsTm9kZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZGVsTm9kZS5kaXNwb3NlKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnJlbW92ZU5vZGUoZGVsTm9kZS5faWQpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICB1c2VQcm9wOiB0cnVlLFxuICAgICAgICBwcm9wOiB7XG4gICAgICAgICAgICBtZXRob2RzOiB7XG4gICAgICAgICAgICAgICAgYWFtOiBmdW5jdGlvbiBhYW0oKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuanNvbi5yZXN1bHQgPSBcInRydWVcIjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZGF0YUNoYW5nZTogZnVuY3Rpb24gZGF0YUNoYW5nZShub2RlLCBrZXksIG5ld1ZhbCkge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKG5vZGUsIGtleSwgbmV3VmFsKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgdXNlU3RhcnQ6IHRydWUsXG4gICAgICAgIHVzZUVuZDogZmFsc2VcbiAgICB9KTtcblxuICAgIHZhciBhcnIgPSBbJ3tcIm5vZGVzXCI6W3tcInByb2NJZFwiOlwicHlTcGFya1wiLFwicGFyYW1zXCI6e1wicmVtb3ZhYmxlXCI6dHJ1ZSxcInN0YXR1c1wiOlwiXCIsXCJuYW1lc3BhY2VcIjpcIlwiLFwidGFza05hbWVcIjpcIlwiLFwib3duZXJcIjpcIlwiLFwiY29udGFpbmVySW1hZ2VcIjpcIlwiLFwiZXhlY3V0b3JDcHVSZXF1aXJlbWVudFwiOlwiXCIsXCJleGVjdXRvck1lbVJlcXVpcmVtZW50XCI6XCJcIn0sXCJuYW1lXCI6XCJweVNwYXJrXCIsXCJub2RlSWRcIjpcIm4xMzE3Mjg3ODg4MFwiLFwiX3hcIjoyNjMsXCJfeVwiOjI1MCxcImNsYXNzTmFtZVwiOlwibm9kZS1wcm9jZXNzXCIsXCJyZW1vdmFibGVcIjp0cnVlLFwiZWxJZFwiOlwibjEzMTcyODc4ODgwXCIsXCJ1blBvcnRcIjpmYWxzZX0se1wicHJvY0lkXCI6XCJzcGFya1wiLFwicGFyYW1zXCI6e1wicmVtb3ZhYmxlXCI6dHJ1ZSxcIm5hbWVzcGFjZVwiOlwiXCIsXCJ0YXNrTmFtZVwiOlwiXCIsXCJvd25lclwiOlwiXCIsXCJjb250YWluZXJJbWFnZVwiOlwiXCIsXCJleGVjdXRvckNwdVJlcXVpcmVtZW50XCI6XCJcIixcImV4ZWN1dG9yTWVtUmVxdWlyZW1lbnRcIjpcIlwifSxcIm5hbWVcIjpcInNwYXJrXCIsXCJub2RlSWRcIjpcIm40MzE3Mjg5NTE5MlwiLFwiX3hcIjo0MTUsXCJfeVwiOjM2MCxcImNsYXNzTmFtZVwiOlwibm9kZS1wcm9jZXNzXCIsXCJyZW1vdmFibGVcIjp0cnVlLFwiZWxJZFwiOlwibjQzMTcyODk1MTkyXCIsXCJ1blBvcnRcIjpmYWxzZX0se1wibmFtZVwiOlwiXCIsXCJub2RlSWRcIjpcIm4wMzQ0OTc3ODczN1wiLFwiX3hcIjo0MTksXCJfeVwiOjExLFwiY2xhc3NOYW1lXCI6XCJcIixcInJlbW92YWJsZVwiOmZhbHNlLFwiZWxJZFwiOlwibjAzNDQ5Nzc4NzM3XCIsXCJ1blBvcnRcIjp0cnVlLFwibm9kZVN0eWxlXCI6XCJzdGFydFwifSx7XCJuYW1lXCI6XCJcIixcIm5vZGVJZFwiOlwibjEzNDQ5Nzc4NzQwXCIsXCJfeFwiOjI1OCxcIl95XCI6NDcyLFwiY2xhc3NOYW1lXCI6XCJcIixcInJlbW92YWJsZVwiOmZhbHNlLFwiZWxJZFwiOlwibjEzNDQ5Nzc4NzQwXCIsXCJ1blBvcnRcIjp0cnVlLFwibm9kZVN0eWxlXCI6XCJlbmRcIn0se1wicHJvY0lkXCI6XCJub3JtYWxcIixcInBhcmFtc1wiOntcIm5hbWVzcGFjZVwiOlwiZGVmYXVsdFwiLFwidGFza05hbWVcIjpcImV4cG9ydC0wMDFcIixcIm93bmVyXCI6XCJkYnlpblwiLFwicmVtb3ZhYmxlXCI6dHJ1ZSxcInN0YXR1c1wiOlwiXCIsXCJjb250YWluZXJJbWFnZVwiOlwiXCIsXCJleGVjdXRvckNwdVJlcXVpcmVtZW50XCI6XCJcIixcImV4ZWN1dG9yTWVtUmVxdWlyZW1lbnRcIjpcIlwiLFwianNvblwiOntcImFcIjpcIjExZ2dnXCJ9fSxcIm5hbWVcIjpcIlxcdTY2NkVcXHU5MDFBXFx1OEJBMVxcdTdCOTdcIixcIm5vZGVJZFwiOlwibjE0MTE4NzI0NTYxXCIsXCJfeFwiOjM5OSxcIl95XCI6MTQyLFwiY2xhc3NOYW1lXCI6XCJub2RlLXByb2Nlc3NcIixcInJlbW92YWJsZVwiOnRydWUsXCJlbElkXCI6XCJuMTQxMTg3MjQ1NjFcIixcInVuUG9ydFwiOmZhbHNlfV0sXCJjb25uZWN0aW9uc1wiOlt7XCJjb25uZWN0aW9uSWRcIjpcImNvbl8yNVwiLFwicGFnZVNvdXJjZUlkXCI6XCJuMTMxNzI4Nzg4ODBcIixcInBhZ2VUYXJnZXRJZFwiOlwibjQzMTcyODk1MTkyXCJ9LHtcImNvbm5lY3Rpb25JZFwiOlwiY29uXzM1XCIsXCJwYWdlU291cmNlSWRcIjpcIm40MzE3Mjg5NTE5MlwiLFwicGFnZVRhcmdldElkXCI6XCJuMTM0NDk3Nzg3NDBcIixcIm5vZGVTdHlsZVwiOlwiZW5kXCJ9LHtcImNvbm5lY3Rpb25JZFwiOlwiY29uXzU4XCIsXCJwYWdlU291cmNlSWRcIjpcIm4wMzQ0OTc3ODczN1wiLFwicGFnZVRhcmdldElkXCI6XCJuMTQxMTg3MjQ1NjFcIixcIm5vZGVTdHlsZVwiOlwic3RhcnRcIn0se1wiY29ubmVjdGlvbklkXCI6XCJjb25fNjJcIixcInBhZ2VTb3VyY2VJZFwiOlwibjE0MTE4NzI0NTYxXCIsXCJwYWdlVGFyZ2V0SWRcIjpcIm4xMzE3Mjg3ODg4MFwifV19JywgJ3tcIm5vZGVzXCI6W3tcInByb2NJZFwiOlwicHlTcGFya1wiLFwicGFyYW1zXCI6e1wicmVtb3ZhYmxlXCI6dHJ1ZSxcInN0YXR1c1wiOlwiXCIsXCJuYW1lc3BhY2VcIjpcIlwiLFwidGFza05hbWVcIjpcIlwiLFwib3duZXJcIjpcIlwiLFwiY29udGFpbmVySW1hZ2VcIjpcIlwiLFwiZXhlY3V0b3JDcHVSZXF1aXJlbWVudFwiOlwiXCIsXCJleGVjdXRvck1lbVJlcXVpcmVtZW50XCI6XCJcIn0sXCJuYW1lXCI6XCJweVNwYXJrXCIsXCJub2RlSWRcIjpcIm4xMzE3Mjg3ODg4MFwiLFwiX3hcIjoxMDgsXCJfeVwiOjI0OCxcImNsYXNzTmFtZVwiOlwibm9kZS1wcm9jZXNzXCIsXCJyZW1vdmFibGVcIjp0cnVlLFwiZWxJZFwiOlwibjEzMTcyODc4ODgwXCIsXCJ1blBvcnRcIjpmYWxzZX0se1wicHJvY0lkXCI6XCJzcGFya1wiLFwicGFyYW1zXCI6e1wicmVtb3ZhYmxlXCI6dHJ1ZSxcIm5hbWVzcGFjZVwiOlwiXCIsXCJ0YXNrTmFtZVwiOlwiXCIsXCJvd25lclwiOlwiXCIsXCJjb250YWluZXJJbWFnZVwiOlwiXCIsXCJleGVjdXRvckNwdVJlcXVpcmVtZW50XCI6XCJcIixcImV4ZWN1dG9yTWVtUmVxdWlyZW1lbnRcIjpcIlwifSxcIm5hbWVcIjpcInNwYXJrXCIsXCJub2RlSWRcIjpcIm40MzE3Mjg5NTE5MlwiLFwiX3hcIjo0NTgsXCJfeVwiOjI1NixcImNsYXNzTmFtZVwiOlwibm9kZS1wcm9jZXNzXCIsXCJyZW1vdmFibGVcIjp0cnVlLFwiZWxJZFwiOlwibjQzMTcyODk1MTkyXCIsXCJ1blBvcnRcIjpmYWxzZX0se1wibmFtZVwiOlwiXCIsXCJub2RlSWRcIjpcIm4wMzQ0OTg5MzA1NFwiLFwiX3hcIjozODIsXCJfeVwiOjE5LFwiY2xhc3NOYW1lXCI6XCJcIixcInJlbW92YWJsZVwiOmZhbHNlLFwiZWxJZFwiOlwibjAzNDQ5ODkzMDU0XCIsXCJ1blBvcnRcIjp0cnVlLFwibm9kZVN0eWxlXCI6XCJzdGFydFwifSx7XCJuYW1lXCI6XCJcIixcIm5vZGVJZFwiOlwibjEzNDQ5ODkzMDU3XCIsXCJfeFwiOjMwNixcIl95XCI6MzQ4LFwiY2xhc3NOYW1lXCI6XCJcIixcInJlbW92YWJsZVwiOmZhbHNlLFwiZWxJZFwiOlwibjEzNDQ5ODkzMDU3XCIsXCJ1blBvcnRcIjp0cnVlLFwibm9kZVN0eWxlXCI6XCJlbmRcIn0se1wicHJvY0lkXCI6XCJub3JtYWxcIixcInBhcmFtc1wiOntcIm5hbWVzcGFjZVwiOlwiZGVmYXVsdFwiLFwidGFza05hbWVcIjpcImV4cG9ydC0wMDFcIixcIm93bmVyXCI6XCJkYnlpblwiLFwicmVtb3ZhYmxlXCI6dHJ1ZSxcInN0YXR1c1wiOlwiXCIsXCJjb250YWluZXJJbWFnZVwiOlwiXCIsXCJleGVjdXRvckNwdVJlcXVpcmVtZW50XCI6XCJcIixcImV4ZWN1dG9yTWVtUmVxdWlyZW1lbnRcIjpcIlwiLFwianNvblwiOntcImFcIjoxMX19LFwibmFtZVwiOlwiXFx1NjY2RVxcdTkwMUFcXHU4QkExXFx1N0I5N1wiLFwibm9kZUlkXCI6XCJuMjQxMTg3NzYwNTdcIixcIl94XCI6MjgwLFwiX3lcIjoxMzMsXCJjbGFzc05hbWVcIjpcIm5vZGUtcHJvY2Vzc1wiLFwicmVtb3ZhYmxlXCI6dHJ1ZSxcImVsSWRcIjpcIm4yNDExODc3NjA1N1wiLFwidW5Qb3J0XCI6ZmFsc2V9XSxcImNvbm5lY3Rpb25zXCI6W3tcImNvbm5lY3Rpb25JZFwiOlwiY29uXzEwNVwiLFwicGFnZVNvdXJjZUlkXCI6XCJuMTMxNzI4Nzg4ODBcIixcInBhZ2VUYXJnZXRJZFwiOlwibjEzNDQ5ODkzMDU3XCIsXCJub2RlU3R5bGVcIjpcImVuZFwifSx7XCJjb25uZWN0aW9uSWRcIjpcImNvbl8xMTBcIixcInBhZ2VTb3VyY2VJZFwiOlwibjQzMTcyODk1MTkyXCIsXCJwYWdlVGFyZ2V0SWRcIjpcIm4xMzQ0OTg5MzA1N1wiLFwibm9kZVN0eWxlXCI6XCJlbmRcIn0se1wiY29ubmVjdGlvbklkXCI6XCJjb25fMTI4XCIsXCJwYWdlU291cmNlSWRcIjpcIm4wMzQ0OTg5MzA1NFwiLFwicGFnZVRhcmdldElkXCI6XCJuMjQxMTg3NzYwNTdcIixcIm5vZGVTdHlsZVwiOlwic3RhcnRcIn0se1wiY29ubmVjdGlvbklkXCI6XCJjb25fMTMyXCIsXCJwYWdlU291cmNlSWRcIjpcIm4yNDExODc3NjA1N1wiLFwicGFnZVRhcmdldElkXCI6XCJuMTMxNzI4Nzg4ODBcIn0se1wiY29ubmVjdGlvbklkXCI6XCJjb25fMTM4XCIsXCJwYWdlU291cmNlSWRcIjpcIm4yNDExODc3NjA1N1wiLFwicGFnZVRhcmdldElkXCI6XCJuNDMxNzI4OTUxOTJcIn1dfScsICd7XCJub2Rlc1wiOlt7XCJwcm9jSWRcIjpcInB5U3BhcmtcIixcInBhcmFtc1wiOntcInJlbW92YWJsZVwiOnRydWUsXCJzdGF0dXNcIjpcIlwiLFwibmFtZXNwYWNlXCI6XCJcIixcInRhc2tOYW1lXCI6XCJcIixcIm93bmVyXCI6XCJcIixcImNvbnRhaW5lckltYWdlXCI6XCJcIixcImV4ZWN1dG9yQ3B1UmVxdWlyZW1lbnRcIjpcIlwiLFwiZXhlY3V0b3JNZW1SZXF1aXJlbWVudFwiOlwiXCJ9LFwibmFtZVwiOlwicHlTcGFya1wiLFwibm9kZUlkXCI6XCJuMTMxNzI4Nzg4ODBcIixcIl94XCI6MjA0LFwiX3lcIjoxMjMsXCJjbGFzc05hbWVcIjpcIm5vZGUtcHJvY2Vzc1wiLFwicmVtb3ZhYmxlXCI6dHJ1ZSxcImVsSWRcIjpcIm4xMzE3Mjg3ODg4MFwiLFwidW5Qb3J0XCI6ZmFsc2V9LHtcInByb2NJZFwiOlwidGR3T3V0cHV0XCIsXCJwYXJhbXNcIjp7XCJuYW1lc3BhY2VcIjpcImRlZmF1bHRcIixcInRhc2tOYW1lXCI6XCJleHBvcnQtMDAxXCIsXCJvd25lclwiOlwiZGJ5aW5cIixcInJlbW92YWJsZVwiOnRydWUsXCJ0ZHdVc2VyUHdkXCI6XCJ0ZHdfZGJ5aW46ZGJ5aW5cIixcInRkd0FwcElkXCI6XCJkYnlpbl9hcHBcIixcImRldGFpbHNcIjpbe1wic3JjSGRmc0FkZHJcIjpcIiBoZGZzOi8vc2guaGRmcy5jci5pZWQuY29tOjkwMDAvdGR3LXRyYW5zZmVyLWRhdGEvZGJ5aW4vMjAxNzA3MDcxOTMzNTEzMTMvMjAxNzEwMDhcIixcInRkd0hkZnNBZGRyXCI6XCJoZGZzOi8vdGwtaWYtbm4tdGR3LnRlbmNlbnQtZGlzdHJpYnV0ZS5jb206NTQzMTAvc3RhZ2Uvb3V0ZmFjZS9JRUcvZGJ5aW5fYXBwL2RieWluL2RvY2tlcl90ZXN0LzIwMTcxMDA4XCJ9LHtcInNyY0hkZnNBZGRyXCI6XCIgaGRmczovL3NoLmhkZnMuY3IuaWVkLmNvbTo5MDAwL3Rkdy10cmFuc2Zlci1kYXRhL2RieWluLzIwMTcwNzA3MTkzMzUxMzEzLzIwMTcxMDA5XCIsXCJ0ZHdIZGZzQWRkclwiOlwiaGRmczovL3RsLWlmLW5uLXRkdy50ZW5jZW50LWRpc3RyaWJ1dGUuY29tOjU0MzEwL3N0YWdlL291dGZhY2UvSUVHL2RieWluX2FwcC9kYnlpbi9kb2NrZXJfdGVzdC8yMDE3MTAwOVwifV19LFwibmFtZVwiOlwidGR3T3V0cHV0XCIsXCJub2RlSWRcIjpcIm40MzQ0OTk0NzU3NlwiLFwiX3hcIjotMjY3LFwiX3lcIjozODUsXCJjbGFzc05hbWVcIjpcIm5vZGUtcHJvY2Vzc1wiLFwicmVtb3ZhYmxlXCI6dHJ1ZSxcImVsSWRcIjpcIm40MzQ0OTk0NzU3NlwiLFwidW5Qb3J0XCI6ZmFsc2V9LHtcIm5hbWVcIjpcIlwiLFwibm9kZUlkXCI6XCJuMjM0NDk5MjY4NjhcIixcIl94XCI6MTk0LFwiX3lcIjoyNSxcImNsYXNzTmFtZVwiOlwiXCIsXCJyZW1vdmFibGVcIjpmYWxzZSxcImVsSWRcIjpcIm4yMzQ0OTkyNjg2OFwiLFwidW5Qb3J0XCI6dHJ1ZSxcIm5vZGVTdHlsZVwiOlwic3RhcnRcIn0se1wibmFtZVwiOlwiXCIsXCJub2RlSWRcIjpcIm4zMzQ0OTkyNjg3MVwiLFwiX3hcIjo0ODksXCJfeVwiOjI3OCxcImNsYXNzTmFtZVwiOlwiXCIsXCJyZW1vdmFibGVcIjpmYWxzZSxcImVsSWRcIjpcIm4zMzQ0OTkyNjg3MVwiLFwidW5Qb3J0XCI6dHJ1ZSxcIm5vZGVTdHlsZVwiOlwiZW5kXCJ9LHtcInByb2NJZFwiOlwidGR3SW5wdXRcIixcInBhcmFtc1wiOntcIm5hbWVzcGFjZVwiOlwiZGVmYXVsdFwiLFwidGFza05hbWVcIjpcImV4cG9ydC0wMDFcIixcIm93bmVyXCI6XCJkYnlpblwiLFwicmVtb3ZhYmxlXCI6dHJ1ZSxcInRkd1VzZXJQd2RcIjpcInRkd19kYnlpbjpkYnlpblwiLFwidGR3QXBwSWRcIjpcImRieWluX2FwcFwiLFwiZGV0YWlsc1wiOlt7XCJzcmNIZGZzQWRkclwiOlwiIGhkZnM6Ly9zaC5oZGZzLmNyLmllZC5jb206OTAwMC90ZHctdHJhbnNmZXItZGF0YS9kYnlpbi8yMDE3MDcwNzE5MzM1MTMxMy8yMDE3MTAwOFwiLFwidGR3SGRmc0FkZHJcIjpcImhkZnM6Ly90bC1pZi1ubi10ZHcudGVuY2VudC1kaXN0cmlidXRlLmNvbTo1NDMxMC9zdGFnZS9vdXRmYWNlL0lFRy9kYnlpbl9hcHAvZGJ5aW4vZG9ja2VyX3Rlc3QvMjAxNzEwMDhcIn0se1wic3JjSGRmc0FkZHJcIjpcIiBoZGZzOi8vc2guaGRmcy5jci5pZWQuY29tOjkwMDAvdGR3LXRyYW5zZmVyLWRhdGEvZGJ5aW4vMjAxNzA3MDcxOTMzNTEzMTMvMjAxNzEwMDlcIixcInRkd0hkZnNBZGRyXCI6XCJoZGZzOi8vdGwtaWYtbm4tdGR3LnRlbmNlbnQtZGlzdHJpYnV0ZS5jb206NTQzMTAvc3RhZ2Uvb3V0ZmFjZS9JRUcvZGJ5aW5fYXBwL2RieWluL2RvY2tlcl90ZXN0LzIwMTcxMDA5XCJ9XX0sXCJuYW1lXCI6XCJ0ZHdJbnB1dFwiLFwibm9kZUlkXCI6XCJuMjM0NTAxMDIzMTFcIixcIl94XCI6Mzg0LFwiX3lcIjoxODIsXCJjbGFzc05hbWVcIjpcIm5vZGUtcHJvY2Vzc1wiLFwicmVtb3ZhYmxlXCI6dHJ1ZSxcImVsSWRcIjpcIm4yMzQ1MDEwMjMxMVwiLFwidW5Qb3J0XCI6ZmFsc2V9XSxcImNvbm5lY3Rpb25zXCI6W3tcImNvbm5lY3Rpb25JZFwiOlwiY29uXzk5XCIsXCJwYWdlU291cmNlSWRcIjpcIm4yMzQ0OTkyNjg2OFwiLFwicGFnZVRhcmdldElkXCI6XCJuMTMxNzI4Nzg4ODBcIn0se1wiY29ubmVjdGlvbklkXCI6XCJjb25fMTIxXCIsXCJwYWdlU291cmNlSWRcIjpcIm4yMzQ1MDEwMjMxMVwiLFwicGFnZVRhcmdldElkXCI6XCJuMzM0NDk5MjY4NzFcIn0se1wiY29ubmVjdGlvbklkXCI6XCJjb25fMTM0XCIsXCJwYWdlU291cmNlSWRcIjpcIm4xMzE3Mjg3ODg4MFwiLFwicGFnZVRhcmdldElkXCI6XCJuMjM0NTAxMDIzMTFcIn1dfScsICd7XCJub2Rlc1wiOltdLFwiY29ubmVjdGlvbnNcIjpbXX0nXTtcbiAgICByZXR1cm47XG5cbiAgICAvL+WIneasoei9veWFpVxuICAgIHQucmVuZGVyKFwiI2NoYXJ0Q29udGVudFwiLCBhcnJbMF0pO1xuXG4gICAgLy/ovb3lhaVcbiAgICAkKFwiI3NlbGVjdFRvb3JcIikub24oJ2NoYW5nZScsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIHZhbCA9IHBhcnNlSW50KCQodGhpcykudmFsKCkpO1xuICAgICAgICAvL+S6jOasoea4suafk1xuICAgICAgICB0LnJlbmRlckNoYXJ0KGFyclt2YWwgLSAxXSk7XG4gICAgfSk7XG5cbiAgICAvL+S/neWtmFxuICAgICQoJyNzYXZlJykub24oJ2NsaWNrJywgZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm47XG4gICAgICAgIHZhciBzdHIgPSBKU09OLnN0cmluZ2lmeSh0LmNoYXJ0Q29udHJvbC50b0pzb24oKSk7XG4gICAgICAgIGNvbnNvbGUubG9nKHN0cik7XG4gICAgICAgIHZhciBibGcgPSB0LmNoZWNrQ29udHJvbC5jaGVjaygnY2xvc2VkTG9vcCBpc2xhbmQnLCB0LmNoYXJ0Q29udHJvbC50b0pzb24oKSk7XG4gICAgICAgIGlmICghYmxnKSB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhcIuWQq+aciemXreeOryDmiJbogIUg5a2k56uL6IqC54K5XCIpO1xuICAgICAgICB9XG4gICAgfSk7XG59KTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL3RwbHVnaW4vc3JjL2pzL3NjYWZmL2Nycy9jcnMuaW5kZXguanNcbi8vIG1vZHVsZSBpZCA9IDE2N1xuLy8gbW9kdWxlIGNodW5rcyA9IDEiXSwibWFwcGluZ3MiOiJBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///167\n')},27:function(module,__webpack_exports__,__webpack_require__){"use strict";eval('/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return menuBases; });\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__core_menu_menuBase_js__ = __webpack_require__(68);\n/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return __WEBPACK_IMPORTED_MODULE_0__core_menu_menuBase_js__["b"]; });\n\n\nvar menuBases = function menuBases() {\n    __WEBPACK_IMPORTED_MODULE_0__core_menu_menuBase_js__["a" /* menuBase */].call(this);\n\n    this.procId = "crs";\n    this.text = "crs";\n    //组件的 公共数据结构\n    this.baseData = $.extend(this.baseData, {\n        "namespace": "default",\n        "taskName": "export-001",\n        "owner": "dbyin"\n    });\n\n    this.baseHTML = "\\n        <div class=\\"params-content\\">\\n            <div class=\\"v-title\\">\\u516C\\u5171\\u53C2\\u6570</div>  \\n\\n            <div class=\\"v-params\\">\\n                <span>namespace</span>\\n                <div class=\\"v-params-value\\">\\n                    <input v-model=\\"namespace\\" />\\n                </div>\\n            </div>\\n            <div class=\\"v-params\\">\\n                <span>taskName</span>\\n                <div class=\\"v-params-value\\">\\n                    <input v-model=\\"taskName\\" />\\n                </div>\\n            </div>\\n            <div class=\\"v-params\\">\\n                <span>owner</span>\\n                <div class=\\"v-params-value\\">\\n                    <input v-model=\\"owner\\" />\\n                </div>\\n            </div>\\n        </div>\\n    ";\n\n    //添加后的节点是否可以删除\n    this.baseData.removable = true;\n\n    //设置 图形节点的内容\n    this.setNodeElement = function (data) {\n\n        return "";\n    };\n};\n\n__WEBPACK_IMPORTED_MODULE_0__core_menu_menuBase_js__["b" /* menuRegister */].add(menuBases);\n\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjcuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zY2FmZi9tZW51cy9jcnNDaGlsZC9jcnNCYXNlLmpzP2JjMWQiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgbWVudUJhc2UsIG1lbnVSZWdpc3RlciB9IGZyb20gJy4uLy4uLy4uL2NvcmUvbWVudS9tZW51QmFzZS5qcyc7XG5cbnZhciBtZW51QmFzZXMgPSBmdW5jdGlvbiBtZW51QmFzZXMoKSB7XG4gICAgbWVudUJhc2UuY2FsbCh0aGlzKTtcblxuICAgIHRoaXMucHJvY0lkID0gXCJjcnNcIjtcbiAgICB0aGlzLnRleHQgPSBcImNyc1wiO1xuICAgIC8v57uE5Lu255qEIOWFrOWFseaVsOaNrue7k+aehFxuICAgIHRoaXMuYmFzZURhdGEgPSAkLmV4dGVuZCh0aGlzLmJhc2VEYXRhLCB7XG4gICAgICAgIFwibmFtZXNwYWNlXCI6IFwiZGVmYXVsdFwiLFxuICAgICAgICBcInRhc2tOYW1lXCI6IFwiZXhwb3J0LTAwMVwiLFxuICAgICAgICBcIm93bmVyXCI6IFwiZGJ5aW5cIlxuICAgIH0pO1xuXG4gICAgdGhpcy5iYXNlSFRNTCA9IFwiXFxuICAgICAgICA8ZGl2IGNsYXNzPVxcXCJwYXJhbXMtY29udGVudFxcXCI+XFxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFwidi10aXRsZVxcXCI+XFx1NTE2Q1xcdTUxNzFcXHU1M0MyXFx1NjU3MDwvZGl2PiAgXFxuXFxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFwidi1wYXJhbXNcXFwiPlxcbiAgICAgICAgICAgICAgICA8c3Bhbj5uYW1lc3BhY2U8L3NwYW4+XFxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcInYtcGFyYW1zLXZhbHVlXFxcIj5cXG4gICAgICAgICAgICAgICAgICAgIDxpbnB1dCB2LW1vZGVsPVxcXCJuYW1lc3BhY2VcXFwiIC8+XFxuICAgICAgICAgICAgICAgIDwvZGl2PlxcbiAgICAgICAgICAgIDwvZGl2PlxcbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcInYtcGFyYW1zXFxcIj5cXG4gICAgICAgICAgICAgICAgPHNwYW4+dGFza05hbWU8L3NwYW4+XFxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcInYtcGFyYW1zLXZhbHVlXFxcIj5cXG4gICAgICAgICAgICAgICAgICAgIDxpbnB1dCB2LW1vZGVsPVxcXCJ0YXNrTmFtZVxcXCIgLz5cXG4gICAgICAgICAgICAgICAgPC9kaXY+XFxuICAgICAgICAgICAgPC9kaXY+XFxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFwidi1wYXJhbXNcXFwiPlxcbiAgICAgICAgICAgICAgICA8c3Bhbj5vd25lcjwvc3Bhbj5cXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFwidi1wYXJhbXMtdmFsdWVcXFwiPlxcbiAgICAgICAgICAgICAgICAgICAgPGlucHV0IHYtbW9kZWw9XFxcIm93bmVyXFxcIiAvPlxcbiAgICAgICAgICAgICAgICA8L2Rpdj5cXG4gICAgICAgICAgICA8L2Rpdj5cXG4gICAgICAgIDwvZGl2PlxcbiAgICBcIjtcblxuICAgIC8v5re75Yqg5ZCO55qE6IqC54K55piv5ZCm5Y+v5Lul5Yig6ZmkXG4gICAgdGhpcy5iYXNlRGF0YS5yZW1vdmFibGUgPSB0cnVlO1xuXG4gICAgLy/orr7nva4g5Zu+5b2i6IqC54K555qE5YaF5a65XG4gICAgdGhpcy5zZXROb2RlRWxlbWVudCA9IGZ1bmN0aW9uIChkYXRhKSB7XG5cbiAgICAgICAgcmV0dXJuIFwiXCI7XG4gICAgfTtcbn07XG5cbm1lbnVSZWdpc3Rlci5hZGQobWVudUJhc2VzKTtcblxuZXhwb3J0IHsgbWVudUJhc2VzIGFzIG1lbnVCYXNlLCBtZW51UmVnaXN0ZXIgfTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL3NjYWZmL21lbnVzL2Nyc0NoaWxkL2Nyc0Jhc2UuanNcbi8vIG1vZHVsZSBpZCA9IDI3XG4vLyBtb2R1bGUgY2h1bmtzID0gMSJdLCJtYXBwaW5ncyI6IkFBQUE7QUFBQTtBQUFBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///27\n')},67:function(module,__webpack_exports__,__webpack_require__){"use strict";eval('var chartController = function chartController(select, options) {\n    this.jq = $(select);\n    this.options = $.extend({\n        nodeClick: function nodeClick(data, node) {},\n        nodeDbClick: function nodeDbClick(data, node) {},\n        nodeDel: function nodeDel(data, node) {},\n        nodeInputBlur: function nodeInputBlur(data, node) {},\n        contentClick: function contentClick() {}\n    }, options);\n\n    //新建 流程图实例\n    this.createFlow = function (chart) {\n        this.chart = new chart($(this.jq), this.options);\n    };\n\n    //添加一个节点\n    this.addNode = function (option) {\n        this.chart.addNode(option);\n    };\n\n    //清空画布\n    this.clear = function () {\n        this.chart.clear();\n    };\n\n    //把图形转为json，并返回\n    this.toJson = function () {\n        return this.chart.toJson();\n    };\n\n    //基于json 渲染图形\n    this.fromJson = function (json, option) {\n        return this.chart.fromJson(json, option);\n    };\n\n    //添加起点 节点\n    this.addNodeStart = function (options) {\n        return this.chart.addNodeStart(options);\n    };\n};\n\n/* harmony default export */ __webpack_exports__["a"] = (chartController);\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNjcuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zY2FmZi9jaGFydC9iYXNlL2NoYXJ0Q29udHJvbGxlci5qcz9jMDA1Il0sInNvdXJjZXNDb250ZW50IjpbInZhciBjaGFydENvbnRyb2xsZXIgPSBmdW5jdGlvbiBjaGFydENvbnRyb2xsZXIoc2VsZWN0LCBvcHRpb25zKSB7XG4gICAgdGhpcy5qcSA9ICQoc2VsZWN0KTtcbiAgICB0aGlzLm9wdGlvbnMgPSAkLmV4dGVuZCh7XG4gICAgICAgIG5vZGVDbGljazogZnVuY3Rpb24gbm9kZUNsaWNrKGRhdGEsIG5vZGUpIHt9LFxuICAgICAgICBub2RlRGJDbGljazogZnVuY3Rpb24gbm9kZURiQ2xpY2soZGF0YSwgbm9kZSkge30sXG4gICAgICAgIG5vZGVEZWw6IGZ1bmN0aW9uIG5vZGVEZWwoZGF0YSwgbm9kZSkge30sXG4gICAgICAgIG5vZGVJbnB1dEJsdXI6IGZ1bmN0aW9uIG5vZGVJbnB1dEJsdXIoZGF0YSwgbm9kZSkge30sXG4gICAgICAgIGNvbnRlbnRDbGljazogZnVuY3Rpb24gY29udGVudENsaWNrKCkge31cbiAgICB9LCBvcHRpb25zKTtcblxuICAgIC8v5paw5bu6IOa1geeoi+WbvuWunuS+i1xuICAgIHRoaXMuY3JlYXRlRmxvdyA9IGZ1bmN0aW9uIChjaGFydCkge1xuICAgICAgICB0aGlzLmNoYXJ0ID0gbmV3IGNoYXJ0KCQodGhpcy5qcSksIHRoaXMub3B0aW9ucyk7XG4gICAgfTtcblxuICAgIC8v5re75Yqg5LiA5Liq6IqC54K5XG4gICAgdGhpcy5hZGROb2RlID0gZnVuY3Rpb24gKG9wdGlvbikge1xuICAgICAgICB0aGlzLmNoYXJ0LmFkZE5vZGUob3B0aW9uKTtcbiAgICB9O1xuXG4gICAgLy/muIXnqbrnlLvluINcbiAgICB0aGlzLmNsZWFyID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLmNoYXJ0LmNsZWFyKCk7XG4gICAgfTtcblxuICAgIC8v5oqK5Zu+5b2i6L2s5Li6anNvbu+8jOW5tui/lOWbnlxuICAgIHRoaXMudG9Kc29uID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5jaGFydC50b0pzb24oKTtcbiAgICB9O1xuXG4gICAgLy/ln7rkuo5qc29uIOa4suafk+WbvuW9olxuICAgIHRoaXMuZnJvbUpzb24gPSBmdW5jdGlvbiAoanNvbiwgb3B0aW9uKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmNoYXJ0LmZyb21Kc29uKGpzb24sIG9wdGlvbik7XG4gICAgfTtcblxuICAgIC8v5re75Yqg6LW354K5IOiKgueCuVxuICAgIHRoaXMuYWRkTm9kZVN0YXJ0ID0gZnVuY3Rpb24gKG9wdGlvbnMpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY2hhcnQuYWRkTm9kZVN0YXJ0KG9wdGlvbnMpO1xuICAgIH07XG59O1xuXG5leHBvcnQgZGVmYXVsdCBjaGFydENvbnRyb2xsZXI7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9zY2FmZi9jaGFydC9iYXNlL2NoYXJ0Q29udHJvbGxlci5qc1xuLy8gbW9kdWxlIGlkID0gNjdcbi8vIG1vZHVsZSBjaHVua3MgPSAxIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///67\n')},68:function(module,__webpack_exports__,__webpack_require__){"use strict";eval('/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return menuRegister; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return menuBase; });\nvar menuRegister = {\n    _menus: [],\n    add: function add(menu) {\n        var tmp = null;\n        if (typeof menu === "function") {\n            tmp = new menu();\n        } else {\n            tmp = menu;\n        }\n        var blg = false;\n        this._menus.forEach(function (m) {\n            if (tmp.procId === m.procId) {\n                blg = true;\n                return false;\n            }\n        });\n        if (blg === false) {\n            this._menus.push(tmp);\n        }\n    },\n    //获得具体的menu对象\n    getMenuObj: function getMenuObj(procId) {\n        for (var i = 0; i < this._menus.length; i++) {\n            var menu = this._menus[i];\n\n            if (menu.procId == procId) {\n                return menu;\n            }\n        };\n        return null;\n    },\n\n    //获取menu对象\n    getMenus: function getMenus() {\n        return this._menus;\n    }\n};\n\nvar menuBase = function menuBase() {\n    //菜单标题\n    this.text = "root";\n    //类的唯一标识\n    this.procId = "0";\n\n    //组件的 公共数据结构\n    this.baseData = {};\n\n    //组件的 特性数据结构\n    this.scattData = {};\n\n    //组件的 公共模板 (vue.js模板语法)\n    this.baseHTML = "";\n\n    //特性模板\n    this.scattHTML = "";\n};\n\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNjguanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9jb3JlL21lbnUvbWVudUJhc2UuanM/YWI3YyJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgbWVudVJlZ2lzdGVyID0ge1xuICAgIF9tZW51czogW10sXG4gICAgYWRkOiBmdW5jdGlvbiBhZGQobWVudSkge1xuICAgICAgICB2YXIgdG1wID0gbnVsbDtcbiAgICAgICAgaWYgKHR5cGVvZiBtZW51ID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgICAgIHRtcCA9IG5ldyBtZW51KCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0bXAgPSBtZW51O1xuICAgICAgICB9XG4gICAgICAgIHZhciBibGcgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5fbWVudXMuZm9yRWFjaChmdW5jdGlvbiAobSkge1xuICAgICAgICAgICAgaWYgKHRtcC5wcm9jSWQgPT09IG0ucHJvY0lkKSB7XG4gICAgICAgICAgICAgICAgYmxnID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICBpZiAoYmxnID09PSBmYWxzZSkge1xuICAgICAgICAgICAgdGhpcy5fbWVudXMucHVzaCh0bXApO1xuICAgICAgICB9XG4gICAgfSxcbiAgICAvL+iOt+W+l+WFt+S9k+eahG1lbnXlr7nosaFcbiAgICBnZXRNZW51T2JqOiBmdW5jdGlvbiBnZXRNZW51T2JqKHByb2NJZCkge1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMuX21lbnVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICB2YXIgbWVudSA9IHRoaXMuX21lbnVzW2ldO1xuXG4gICAgICAgICAgICBpZiAobWVudS5wcm9jSWQgPT0gcHJvY0lkKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG1lbnU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH0sXG5cbiAgICAvL+iOt+WPlm1lbnXlr7nosaFcbiAgICBnZXRNZW51czogZnVuY3Rpb24gZ2V0TWVudXMoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9tZW51cztcbiAgICB9XG59O1xuXG52YXIgbWVudUJhc2UgPSBmdW5jdGlvbiBtZW51QmFzZSgpIHtcbiAgICAvL+iPnOWNleagh+mimFxuICAgIHRoaXMudGV4dCA9IFwicm9vdFwiO1xuICAgIC8v57G755qE5ZSv5LiA5qCH6K+GXG4gICAgdGhpcy5wcm9jSWQgPSBcIjBcIjtcblxuICAgIC8v57uE5Lu255qEIOWFrOWFseaVsOaNrue7k+aehFxuICAgIHRoaXMuYmFzZURhdGEgPSB7fTtcblxuICAgIC8v57uE5Lu255qEIOeJueaAp+aVsOaNrue7k+aehFxuICAgIHRoaXMuc2NhdHREYXRhID0ge307XG5cbiAgICAvL+e7hOS7tueahCDlhazlhbHmqKHmnb8gKHZ1ZS5qc+aooeadv+ivreazlSlcbiAgICB0aGlzLmJhc2VIVE1MID0gXCJcIjtcblxuICAgIC8v54m55oCn5qih5p2/XG4gICAgdGhpcy5zY2F0dEhUTUwgPSBcIlwiO1xufTtcblxuZXhwb3J0IHsgbWVudVJlZ2lzdGVyLCBtZW51QmFzZSB9O1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vY29yZS9tZW51L21lbnVCYXNlLmpzXG4vLyBtb2R1bGUgaWQgPSA2OFxuLy8gbW9kdWxlIGNodW5rcyA9IDEiXSwibWFwcGluZ3MiOiJBQUFBO0FBQUE7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///68\n')},85:function(module,__webpack_exports__,__webpack_require__){"use strict";eval("/**\r\n * @class 流程节点\r\n * @param {Object} container      节点容器（画布），jquery对象\r\n * @param {String} id      节点id\r\n * @param {String} name    节点名称\r\n * @param {Number} x       节点x坐标\r\n * @param {Number} y       节点y坐标\r\n * @param {Object} [options] 节点附加属性\r\n * @param {String} [options.color] 节点文字颜色\r\n * @param {String} [options.bgColor] 节点背景色\r\n * @param {Number} [options.radius] 节点圆角大小\r\n * @param {Number} [options.data] 绑定到节点的附加数据\r\n * @param {Number} [options.container] 节点容器（画布），若设置此选项则会自动将节点添加到画布上\r\n * @param {Boolean} [options.removable=true] 是否支持删除功能（鼠标放上去显示关闭图标）\r\n */\nvar ChartNode = function ChartNode(nodeId, options) {\n    if (arguments.length < 2) {\n        return;\n    }\n    this._jsPlumb = null;\n    this._container = null;\n    this._id = nodeId;\n    this._name = options.name;\n    this._x = options.point.x;\n    this._y = options.point.y;\n    this._clsName = options.class || '';\n    this._data = options && options.data || {};\n\n    this._options = $.extend({ // 默认属性\n        removable: true\n    }, options);\n    this._el = null;\n\n    if (options && options.container) {\n        //this.appendTo(options.container);\n    }\n};\n\n/**\r\n * 样式配置\r\n * @type {Object}\r\n */\nChartNode.prototype.optionStyle = {\n    lineStyle: {\n        strokeWidth: 2,\n        joinstyle: \"round\",\n        stroke: \"#0096f2\"\n    },\n    getPaintStyle: function getPaintStyle(strokeColor) {\n        return {\n            fill: strokeColor,\n            stroke: \"rgba(0,0,0,0)\",\n            strokeWidth: 8\n        };\n    },\n    connector: [\"Bezier\", {\n        curviness: 100\n    }]\n};\n\nChartNode.prototype.setPlumb = function (plumb) {\n    this._jsPlumb = plumb;\n};\nChartNode.prototype.setContainer = function (container) {\n    this._container = container;\n};\n\nChartNode.prototype.px = function (value) {\n    return value + 'px';\n};\n\nChartNode.prototype.getId = function () {\n    return this._id;\n};\n\nChartNode.prototype.getData = function () {\n    return this._data || {};\n};\nChartNode.prototype.setData = function (data) {\n    this._data = data;\n};\n\nChartNode.prototype.createElemt = function (options) {\n    var $node = $(options.html.trim()),\n        container = options.container,\n        elementCallback = options.elementCallback;\n\n    $node.addClass(\"\" + this._clsName).attr('id', this._id).css({\n        left: this.px(this._x),\n        top: this.px(this._y)\n    });\n\n    if (elementCallback) {\n        elementCallback(this, $node);\n    }\n\n    if (options.removable) {\n        var removeIcon = $('<div>').addClass('remove');\n        $node.append(removeIcon);\n    }\n\n    container.append($node);\n\n    var _this = this,\n        startX = 0,\n        startY = 0,\n        moveX = 0,\n        moveY = 0;\n    //节点拖动属性\n    this._jsPlumb.draggable($node, {\n        grid: [1, 1],\n        start: function start(e) {\n            startX = parseInt($(e.el).css('left'));\n            startY = parseInt($(e.el).css('top'));\n        },\n        stop: function stop(e) {\n            var left = parseInt($(e.el).css('left')),\n                top = parseInt($(e.el).css('top')),\n                maxWith = parseInt($(_this._container).width()) - parseInt($(e.el).outerWidth()),\n                maxHeight = parseInt($(_this._container).height()) - parseInt($(e.el).outerHeight());\n\n            left = left < 0 ? 0 : left > maxWith ? maxWith : left;\n            top = top < 0 ? 0 : top > maxHeight ? maxHeight : top;\n\n            moveX = left - startX;\n            moveY = top - startY;\n\n            e.drag.moveBy(moveX, moveY, e);\n        }\n        /* startEvent:function(){\r\n             console.log(arguments)\r\n         },\r\n         drag:function(){\r\n             console.log(arguments)\r\n         },\r\n         stop:function(){\r\n             console.log(arguments)\r\n         }\r\n        */\n    });\n\n    this._el = $node;\n};\n\n/**\r\n * 添加连接端口\r\n * @param {Object} options 连接端口参数\r\n * @param {String} [options.color=#0096f2] 端口颜色\r\n * @param {Boolean} [options.isSource=false] 是否为源端口\r\n * @param {Boolean} [options.isTarget=false] 是否为目标端口\r\n * @param {String} [options.label] 端口名称\r\n * @param {String} [options.position=bottom] 端口位置，可设置为 'Top'\r\n */\nChartNode.prototype.addPort = function (options) {\n    var pos = options.position || 'Bottom';\n\n    var strokeColor = pos === 'Top' ? \"#f65d3b\" : '#0096f2';\n    var cssClass = pos === 'Top' ? \"jspl-point-top\" : 'jspl-point-bottom';\n    var hoverClass = pos === 'TOP' ? \"jspl-point-top-hover\" : 'jspl-point-bottom-hover';\n\n    var endpointConf = {\n        endpoint: [\"Dot\", {\n            radius: 6,\n            cssClass: cssClass,\n            hoverClass: hoverClass\n        }],\n        //hoverPaintStyle:{ stroke:\"rgb(0, 0, 135)\" },\n        paintStyle: this.optionStyle.getPaintStyle(strokeColor),\n        anchor: pos, //[pos, [0.5, 0, 0, -1]],\n        isSource: !!options.isSource,\n        isTarget: !!options.isTarget,\n        maxConnections: -1,\n        connector: this.optionStyle.connector,\n\n        connectorStyle: this.optionStyle.lineStyle,\n\n        dragOptions: options.dragOptions || {},\n\n        allowLoopback: false\n    };\n\n    this[pos + \"Endpoint\"] = this._jsPlumb.addEndpoint(this._el, endpointConf);\n};\n\n/**\r\n * 更新坐标\r\n */\nChartNode.prototype.updatePos = function () {\n    var el = this._el;\n    this._x = parseInt(el.css(\"left\"), 10);\n    this._y = parseInt(el.css(\"top\"), 10);\n};\n\nChartNode.prototype.getPos = function () {\n    return {\n        x: this._x,\n        y: this._y\n    };\n};\n\nChartNode.prototype.toPlainObj = function () {\n    this.updatePos();\n\n    var data = $.extend({}, this._data);\n\n    data.name = this._name;\n    data.nodeId = this._id;\n    data._x = this._x;\n    data._y = this._y;\n    data.className = this._clsName;\n    data.removable = this._options.removable;\n    data.elId = this._el[0].id;\n\n    data.unPort = this._options.unPort || false;\n    data.nodeStyle = this._options.nodeStyle;\n\n    return data;\n};\n\nChartNode.prototype.dispose = function () {\n    var el = this._el;\n    var domEl = el.get(0);\n\n    this._jsPlumb.deleteEndpoint(this.TopEndpoint);\n    this._jsPlumb.remove(domEl);\n    el.remove();\n};\n\n/**\r\n * 设置params数据\r\n */\nChartNode.prototype.setParams = function (data) {\n    this._data.params = data;\n};\n\n/**\r\n * 返回params数据\r\n */\nChartNode.prototype.getParams = function () {\n    return this._data.params;\n};\n\n/**\r\n * 设置params数据 key=>val 形式设置\r\n */\nChartNode.prototype.setParamsOfKey = function (key, data) {\n    this._data.params[key] = data;\n};\n\n/**\r\n * connector连接线的绑定事件\r\n */\n\nChartNode.prototype.connectorEvent = {\n    upper: null,\n    init: function init(self, connect, options) {\n        this.upper = self;\n\n        this.mousedownEvent(connect, options);\n        this.mouseoverEvent(connect, options);\n        this.mouseoutEvent(connect, options);\n        this.dblclickEvent(connect, options);\n    },\n    mousedownEvent: function mousedownEvent(connect) {\n        var _this2 = this;\n\n        connect.unbind('mousedown').bind('mousedown', function (e) {\n\n            _this2.mousedown(e);\n        });\n    },\n    mousedown: function mousedown(e) {},\n    mouseoverEvent: function mouseoverEvent(connect) {\n        var _this3 = this;\n\n        connect.unbind('mouseover').bind('mouseover', function (e) {\n            _this3.mouseover(e);\n        });\n    },\n    mouseover: function mouseover(e) {\n        var p = e.connector.path;\n        if (typeof p.normalEvenPrams === \"undefined\") {\n            p.normalEvenPrams = {};\n        }\n        p.normalEvenPrams.strokeWidth = p.attributes[\"stroke-width\"].value;\n        p.attributes[\"stroke-width\"].value = 5;\n    },\n    mouseoutEvent: function mouseoutEvent(connect) {\n        var _this4 = this;\n\n        connect.unbind('mouseout').bind('mouseout', function (e) {\n            _this4.mouseout(e);\n        });\n    },\n    mouseout: function mouseout(e) {\n        var p = e.connector.path;\n        p.attributes[\"stroke-width\"].value = p.normalEvenPrams.strokeWidth;\n    },\n    dblclickEvent: function dblclickEvent(connect) {\n        var _this5 = this;\n\n        connect.unbind('dblclick').bind('dblclick', function (e) {\n            _this5.dblclick(e);\n        });\n    },\n    dblclick: function dblclick(e) {\n        this.upper._jsPlumb.deleteConnection(e);\n    }\n\n};\n\n/* harmony default export */ __webpack_exports__[\"a\"] = (ChartNode);\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///85\n")},86:function(module,__webpack_exports__,__webpack_require__){"use strict";eval('/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return menuBases; });\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__crsBase_js__ = __webpack_require__(27);\n/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return __WEBPACK_IMPORTED_MODULE_0__crsBase_js__["b"]; });\n\n\nvar menuBases = function menuBases() {\n    __WEBPACK_IMPORTED_MODULE_0__crsBase_js__["a" /* menuBase */].call(this);\n\n    this.procId = "tdw";\n    this.text = "tdw";\n    //组件的 公共数据结构\n    this.baseData = $.extend(this.baseData, {\n        "tdwUserPwd": "tdw_dbyin:dbyin",\n        "tdwAppId": "dbyin_app"\n    });\n\n    this.baseHTML = "\\n    <div class=\\"params-content\\">\\n        <div class=\\"v-title\\">\\u516C\\u5171\\u53C2\\u6570</div>  \\n\\n        <div class=\\"v-params\\">\\n            <span>namespace</span>\\n            <div class=\\"v-params-value\\">\\n                <input v-model=\\"namespace\\" />\\n            </div>\\n        </div>\\n        <div class=\\"v-params\\">\\n            <span>taskName</span>\\n            <div class=\\"v-params-value\\">\\n                <input v-model=\\"taskName\\" />\\n            </div>\\n        </div>\\n        <div class=\\"v-params\\">\\n            <span>owner</span>\\n            <div class=\\"v-params-value\\">\\n                <input v-model=\\"owner\\" />\\n            </div>\\n        </div>\\n        <div class=\\"v-params\\">\\n            <span>tdwUserPwd</span>\\n            <div class=\\"v-params-value\\">\\n                <input v-model=\\"tdwUserPwd\\" />\\n            </div>\\n        </div>\\n        <div class=\\"v-params\\">\\n            <span>tdwAppId</span>\\n            <div class=\\"v-params-value\\">\\n                <input v-model=\\"tdwAppId\\" />\\n            </div>\\n        </div>\\n\\n    </div>\\n    ";\n\n    //添加后的节点是否可以删除\n    this.baseData.removable = true;\n\n    //设置 图形节点的内容\n    this.setNodeElement = function (data) {\n\n        return "";\n    };\n};\n\n__WEBPACK_IMPORTED_MODULE_0__crsBase_js__["b" /* menuRegister */].add(menuBases);\n\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiODYuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zY2FmZi9tZW51cy9jcnNDaGlsZC90ZHdCYXNlLmpzPzMxODciXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgbWVudUJhc2UsIG1lbnVSZWdpc3RlciB9IGZyb20gJy4vY3JzQmFzZS5qcyc7XG5cbnZhciBtZW51QmFzZXMgPSBmdW5jdGlvbiBtZW51QmFzZXMoKSB7XG4gICAgbWVudUJhc2UuY2FsbCh0aGlzKTtcblxuICAgIHRoaXMucHJvY0lkID0gXCJ0ZHdcIjtcbiAgICB0aGlzLnRleHQgPSBcInRkd1wiO1xuICAgIC8v57uE5Lu255qEIOWFrOWFseaVsOaNrue7k+aehFxuICAgIHRoaXMuYmFzZURhdGEgPSAkLmV4dGVuZCh0aGlzLmJhc2VEYXRhLCB7XG4gICAgICAgIFwidGR3VXNlclB3ZFwiOiBcInRkd19kYnlpbjpkYnlpblwiLFxuICAgICAgICBcInRkd0FwcElkXCI6IFwiZGJ5aW5fYXBwXCJcbiAgICB9KTtcblxuICAgIHRoaXMuYmFzZUhUTUwgPSBcIlxcbiAgICA8ZGl2IGNsYXNzPVxcXCJwYXJhbXMtY29udGVudFxcXCI+XFxuICAgICAgICA8ZGl2IGNsYXNzPVxcXCJ2LXRpdGxlXFxcIj5cXHU1MTZDXFx1NTE3MVxcdTUzQzJcXHU2NTcwPC9kaXY+ICBcXG5cXG4gICAgICAgIDxkaXYgY2xhc3M9XFxcInYtcGFyYW1zXFxcIj5cXG4gICAgICAgICAgICA8c3Bhbj5uYW1lc3BhY2U8L3NwYW4+XFxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFwidi1wYXJhbXMtdmFsdWVcXFwiPlxcbiAgICAgICAgICAgICAgICA8aW5wdXQgdi1tb2RlbD1cXFwibmFtZXNwYWNlXFxcIiAvPlxcbiAgICAgICAgICAgIDwvZGl2PlxcbiAgICAgICAgPC9kaXY+XFxuICAgICAgICA8ZGl2IGNsYXNzPVxcXCJ2LXBhcmFtc1xcXCI+XFxuICAgICAgICAgICAgPHNwYW4+dGFza05hbWU8L3NwYW4+XFxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFwidi1wYXJhbXMtdmFsdWVcXFwiPlxcbiAgICAgICAgICAgICAgICA8aW5wdXQgdi1tb2RlbD1cXFwidGFza05hbWVcXFwiIC8+XFxuICAgICAgICAgICAgPC9kaXY+XFxuICAgICAgICA8L2Rpdj5cXG4gICAgICAgIDxkaXYgY2xhc3M9XFxcInYtcGFyYW1zXFxcIj5cXG4gICAgICAgICAgICA8c3Bhbj5vd25lcjwvc3Bhbj5cXG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXCJ2LXBhcmFtcy12YWx1ZVxcXCI+XFxuICAgICAgICAgICAgICAgIDxpbnB1dCB2LW1vZGVsPVxcXCJvd25lclxcXCIgLz5cXG4gICAgICAgICAgICA8L2Rpdj5cXG4gICAgICAgIDwvZGl2PlxcbiAgICAgICAgPGRpdiBjbGFzcz1cXFwidi1wYXJhbXNcXFwiPlxcbiAgICAgICAgICAgIDxzcGFuPnRkd1VzZXJQd2Q8L3NwYW4+XFxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFwidi1wYXJhbXMtdmFsdWVcXFwiPlxcbiAgICAgICAgICAgICAgICA8aW5wdXQgdi1tb2RlbD1cXFwidGR3VXNlclB3ZFxcXCIgLz5cXG4gICAgICAgICAgICA8L2Rpdj5cXG4gICAgICAgIDwvZGl2PlxcbiAgICAgICAgPGRpdiBjbGFzcz1cXFwidi1wYXJhbXNcXFwiPlxcbiAgICAgICAgICAgIDxzcGFuPnRkd0FwcElkPC9zcGFuPlxcbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcInYtcGFyYW1zLXZhbHVlXFxcIj5cXG4gICAgICAgICAgICAgICAgPGlucHV0IHYtbW9kZWw9XFxcInRkd0FwcElkXFxcIiAvPlxcbiAgICAgICAgICAgIDwvZGl2PlxcbiAgICAgICAgPC9kaXY+XFxuXFxuICAgIDwvZGl2PlxcbiAgICBcIjtcblxuICAgIC8v5re75Yqg5ZCO55qE6IqC54K55piv5ZCm5Y+v5Lul5Yig6ZmkXG4gICAgdGhpcy5iYXNlRGF0YS5yZW1vdmFibGUgPSB0cnVlO1xuXG4gICAgLy/orr7nva4g5Zu+5b2i6IqC54K555qE5YaF5a65XG4gICAgdGhpcy5zZXROb2RlRWxlbWVudCA9IGZ1bmN0aW9uIChkYXRhKSB7XG5cbiAgICAgICAgcmV0dXJuIFwiXCI7XG4gICAgfTtcbn07XG5cbm1lbnVSZWdpc3Rlci5hZGQobWVudUJhc2VzKTtcblxuZXhwb3J0IHsgbWVudUJhc2VzIGFzIG1lbnVCYXNlLCBtZW51UmVnaXN0ZXIgfTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL3NjYWZmL21lbnVzL2Nyc0NoaWxkL3Rkd0Jhc2UuanNcbi8vIG1vZHVsZSBpZCA9IDg2XG4vLyBtb2R1bGUgY2h1bmtzID0gMSJdLCJtYXBwaW5ncyI6IkFBQUE7QUFBQTtBQUFBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///86\n')}},[108]);